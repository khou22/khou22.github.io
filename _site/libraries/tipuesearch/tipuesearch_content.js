







var tipuesearch = {"pages": [

  
  
  
  {
    "title": "Terminal Tips and Tricks June 2018: JSON Data, Caffeinate, and More",
    "text": "Inspecting JSON Data Instead of spending time writing code to view JSON or using a JSON viewer app, which can both be incredibely slow with large JSON files, you can use NodeJS to inspect JSON objects. Simply start the Node console: $ node Next, you can import the JSON and navigate the tree object to your heart’s content. &gt;&gt; // Import JSON &gt;&gt; require('./path/to/json') &gt;&gt; &gt;&gt; /* `_` references the last output &gt;&gt; * In this case: _ = require(...) &gt;&gt; */ &gt;&gt; r = _ &gt;&gt; &gt;&gt; // Traverse JSON tree &gt;&gt; r.data Prevent Mac from Sleeping Mac’s contain a built in terminal function called Caffeinate. While one could download the free “Caffeine” app from the Mac App Store, the command line provides an easy alternative. It offers more control and in my opinion is easier to interpret. To activate, simply type: $ caffeinate # Indefinite amount of time Options: -d # Prevent display from sleeping -i # Prevent system from idle sleeping -s # Prevent system from lseeping (only when plugged in) -u # Resets the system timeout and/or will wake the computer -t &lt;seconds&gt; # Specifies timeout in seconds from the time the command is run SSH Tricks SSH Shortcut Modify your ~/.ssh/config file and add: Host aliasName Hostname some.example.com Port 2222 User username Usage: $ ssh aliasName iTerm Specific Pressing &lt;Command&gt; and ; at the same time will open an autocomplete dropdown selection in iTerm. General Tricks Searching for command history: $ history to see all recent commands Control + r to search through your recent history and use as your current command. Count how many lines of code in a given directory: $ find . -name \"*.*\" -exec wc -l {} \\; Show your permission on a directory: $ ls -ld &lt;directory&gt; Show the size of the files in a directory: $ ls -lh Print certain files all in one column: $ ls -1. *.jpg # 1 column, JPGs Mark file as not executable: $ chmod -x fileName Copy contents of file to the clipboard: $ cat file.txt | pbcopy or $ pbcopy &lt; file.txt Show a mini calendar view: $ cal Count number of columns in CSV file: `$ head -1 data_set/background-one.csv | sed ‘s/[^,]//g’ | wc -c$ Open URLs without copy pasting: Command + Click Delete word: Control + w Grepping (Searches for string in directory): grep -r someString .. Useful doc It’s also helpful to note that you can use regexes on most commands. For example: killall -9 prefix_* # All processes that begin with \"prefix_\" rm -f *_vs_* # Forcibly remove all files with names that have \"_vs_\" in them I know this doesn’t fall under the Terminal category, but I thought this was a cool trick. If you Option + Click on a window, all the other windows in that desktop will be hidden.",
    "tags": "terminal",
    "url": "/configuration/2018/06/22/terminal-tips-and-tricks-june-2018-json-data-caffeinate-and-more.html"
},

  
  
  
  {
    "title": "Algorithm Best Practices June 2018&amp;#58 Recrusive Tree Search Functions",
    "text": "Introduction to Recursion Recursive functions can be a massive headache for all developers involved if the code is not properly documented, formatted, and abstracted. For those that don’t know, a recursive function is a function that calls itself. The University of Wisconsin Madison defines it as follows: A recursive function (DEF) is a function which either calls itself or is in a potential cycle of function calls. As the definition specifies, there are two types of recursive functions. Consider a function which calls itself: we call this type of recursion immediate recursion. — University of Wisconsin - Madison Recursive functions can do a variety of neat things and replicate a lot of natural phenomenons such as fractals. Challenges Code that can run itself can lead to a whole host of issues. The most common is a “stack overflow”. This is when a recursive function calls itself over and over, never terminating, and pushes its function calls onto the “call stack” until the computer can’t handle it anymore and shuts down - hence a “stack overflow.” This is one of the many easy traps of recursive programming. Furthermore, recursive code is difficult to read, especially if you’re not the one who wrote it. Without proper code etiquette, it can get incredibly confusing. Solution and Modularization The solution to these problems is to a) write code that works b) document your code. In this section, I’ll show you a technique I learned from my coworker, Brian Lonsdorf, that clearly abstracts the different pieces of recursion into modular, isolated functions. This not only helps keep the code organized, but combined with the correct commenting, can result in clear and concise code. The code below was written in Python 3 and demonstrates a simple depth-first search using an accumulator object that is pass-by-reference. The coolest parts about this code in my opinion was the implementation of a visitor function and an accumulator. Using these methods, handling data and performing the main logic is clearly compartmentalized. This ensures the main recursive logic isn’t affected by your logic and prevents bugs (like stack overflows) from occuring. # Python 3 # Kevin Hou (khou22.com) # The condition function that determines if a node has child nodes # This ensures the code terminates eventually def hasChildren(node): return len(node['children']) &gt; 0 # Visitor function # This function is called on every node the search function visits # This is where your main logic should go def visitor(element, accumulator): # In this situation, we're simply checking if it's a leaf and storing it in our accumulator if it is if ~hasChildren(element): # Check if it's a leaf node accumulator.append(element) # Add to accumulator if leaf # The recursive function that calls itself # Searches a node, applies a visitor function, and searches each child node def searchChildren(node, visitor): visitor(node) # Visitor function # Recursively search if possible if hasChildren(element): children = element['children'] # Get child nodes list(map(lambda child: searchChildren(child, visitor), children)) # Search each child node # Get all SLDS components def getLeaves(tree): accumulator = [] # Pass-by-reference accumulator object # Initial search call with visitor function searchChildren(tree, lambda element: visitor(element, accumulator))",
    "tags": "python sourceCode",
    "url": "/programming/2018/06/15/algorithm-best-practices-june-2018-recrusive-tree-search-functions.html"
},

  
  
  
  {
    "title": "Machine Learning Code Snippets&amp;#58 June 2018",
    "text": "This blog post contains a number of useful code snippets, functions, and classes that will help with machine learning in Jupyter Notebooks. Specific usage instructions as well as dependencies Modifying and Selecting Information from a DataFrame Random Sample of Rows Choose a random sample of rows from a large dataframe. This is very useful when trying to reduce your training set for debugging purposes. indices = np.random.randint(10, size=2) smallerDF = df[indices,:] Selecting and Removing Columns It’s very easy to extract or remove columns from a pandas dataframe using their built in indexing actions. # Extract these keys into their own data frame preserveKeys = ['x', 'y'] smallDF = df[preserveKeys] # Create a new dataframe without certain columns newDF = df.drop(columns=['z']) Converting All Non-Null Entries to 1 This is helpful when converting a dataframe into a boolean dataframe in which a 1 indicates the prescence of a value and a null indicates there was no value. It can turn any dataframe into a sort of “checkbox” which is helpful for certain types of data processing like collaborative filtering where the actual value doesn’t matter. booleanDF = copy.deepcopy(df) # Deep copy so don't modify other DF # Convert 'np.nan' to 0's and everything else to 1's booleanDF = booleanDF.notnull().astype('int') # Replace all 0's with 'np.nan' booleanDF = booleanDF.replace(0, np.nan) Merging DataFrames # Merge 2 dataframes with the same rows (ie. add new columns) finalDF = pd.concat([df1, df2], sort=True) # Merge 2 dataframes with the same columns (ie. add more rows) finalDF = pd.concat([df1, df2], sort=True, axis=0) # Merge 2 dataframes by row and add new columns when appropriate finalDF = pd.concat([df1, df2], sort=True, axis=0, ignore_index=True) Getting an Overview of a DataFrame (Make this into another It’s often difficult to deal with abstract, seemingly black-box machine learning algorithms. What can help alleviate some of this stress is knowing what your data really looks like. Here’s a few examples that will help you understand what’s going on in your dataset. Printing Basic Excerpts df.describe() df.head(5) # First 5 rows Running df.describe() will print a table of all columns and their respective counts (how many non-null values in the column), mean, std (standard deviation), min, 25%, 50%, 75%, and max. Sometimes the row name doens’t get included. This can be fixed by passing in the argument “include=’all’” as follows: df.describe(include='all'). Running df.head(n) will print the first n rows of your dataset and can give you a good understanding of the form of your data. While the describe() function is good at showing you basic distributions, the head() function will show you what your data actually looks like quickly and easily.",
    "tags": "python sourceCode",
    "url": "/programming/2018/06/14/machine-learning-code-snippets-june-2018.html"
},

  
  
  
  {
    "title": "Slate: Taking My First Solo iOS App from R&amp;D to Full Scale Product",
    "text": "Introduction I released my first solo iOS app, Slate Scheduler, on the App Store a couple months ago. It can be found on the Apple App Store. Because of school and other commitments, I only just finished this blog post detailing the research, design, and implementation. Inspiration The inspiration for this project was that, as a busy college student, I was scheduling basically the same calendar events all too often and each time it would still take me an average of 30 seconds to do on my phone. I found that 90% of my scheduled events were “irregularly repeating” events, that is, they had the same event names and locations, the only thing that changed were their times. Think about having dinner with someone. I’d have dinner with Person A, let’s call him/her Alex. Alex and I get a meal once a week when we can, generally between 5 PM and 8 PM, and typically at one of three dining halls on campus. As you can see, there is a consistency in options, but because Google Calendar or iOS Calendar only allow you to copy events exactly, there was no way for me to pick and choose which parts of past events I wanted to include in the calendar event for my dinner with Alex next week. This meant that I’d have to create my calendar event for dinner with Alex every single time, going through the monotonous process of typing in the name, searching a location, and using a hurrendous date picker for the time of dinner. Frustrated, I took a macroscopic and critical look at the “mainstream” calendar apps, narrowing my painpoints to two main problems: Existing apps, like the iOS and Google calendar clients, were designed for completeness — migrating all features from the desktop to mobile — resulting in a bloated product that didn’t keep simplicity in mind. The interface for scheduling events largely remained the same across all clients: date pickers, checkboxes, scrolling — a slow but accepted and standardized user experience. I decided that I wanted to solve this horrific problem of calendar event scheduling by building a user-experience so simple and painless, that you would prefer it to your powerful desktop calendar clients. Designing the User-Experience Research &amp; Identifying the Problem When researching, I discovered that every app pretty much has the same UI for creating an event. As someone who schedules four of five events a day, spending 30 seconds populating a form felt sluggish and irritating. I found myself increasingly annoyed at how limited the market was. Certain features, that would feel natural to include, simply didn’t exist. For example, in Google Calendar, pressing “Done” (ie. the return key) would simply close the keyboard instead of focusing on the next logical text box below it. Pressing the location text box would take you to a completely new page — adding two more screen clicks than it “should” take. Like I mentioned earlier, another the huge point of frustration was the fact that once you pressed “Create New Event”, there was no way for you to check your current schedule simultaneously. No mainstream calendar client that I researched had this feature. Defining the Challenge The challenge was to attack this basic task of adding a calendar event from your phone in a way that was quick, intuitive, and yet still powerful. I had to create a user-experience that would minimize taps, keyboard key presses, and especially, screen switches. Furthermore, I had to add the ability for users to see their availability on any given day so that they could view their schedules while creating the event. Formulating Ideas I approached my “solution” by looking through the eyes of a perspective user. What exactly do users want? What feels intuitive? Because I naturally have my own bias and style of scheduling events, what changes to the user experience can be generalized to any person wishing to schedule evets? I first identified my core target audience. This app was to be a scheduler — used for frequent, but inconsistent events. The busy student, parent, or professional using this to schedule meetings, meals, and other random events, would generally have no desire to change their notification time, add guests, select a color for the event, add a note, etc. These are all features that could be useful on the desktop, but ultimately, wouldn’t be touched except for in specific edge cases. After asking friends, family, and coworkers, I found that this was consistent across the majority of people who I would be targeting. With this in mind, I could then trim down fields that my user wouldn’t need: guests, custom notification times (a default for all events will do), event color, notes, URL &amp; file attachments, free/busy selection, visibility, travel time (automatically taken care of automatically by iOS/Mac), and event privacy. This left the bare neccessities: Name of the event Start and end time Location These three elements can be broken into two groups: text fields and dates. Text fields were an easier component to tackle, but it took some thought to generate a good date picking user experience. Designing the Text Fields The text fields ultimately came down to minimizing the number of keyboard key presses. A lot of time is wasted typing the same event name and loction over and over again. I decided that every text field should have a list of text suggests based on historical data: events that you add frequently would have a higher liklihood of showing up. It’d be an autocomplete text field that would double as a search box of sorts (think Google search suggestions). This would make “typing” the names of events a matter of simply pressing the suggestion or searching then selecting. The location input would work in the same way. Most location search boxes direct you to a new, fullscreen search page which both feels annoying and takes longer. With these autocomplete text fields, all interaction could take place on the same page. I also wanted an easy way to prepend a room number or some sort of text before the location. With most calendar clients, because you’d be searching for an exact location, you wouldn’t have the ability to both search for a real location and add a room number. I solved this problem by splitting the location text field into two: a main location field with Google maps searching and a smaller text field to add a small chunk of text before the actual location. Another dead-simple, but unfortunately left out features is the ability to press the return key on the keyboard to move to the next text field. In Slate, you can easily zip between the required text fields. Pressing “Return” or a listed suggestion will take you to the next text field. Currently, the flow goes from event name to location and then to room number. Designing the Date Picking Instead of the clunky scrolling date and time pickers, I decided to take a more elegant approach and avoid this method as much as possible. Because scheduling events generally happens within the next week or two, I created a horizontal scrolling date picker that better served the goal of selecting a date. Engineering — The Implementation Slate uses a predictive model that strengthens with usage to allow you to schedule calendar events quickly and easily without the painpoints of date pickers, multiple pages, and many other irritating, but commonly used, UI standards. I’ve built and will open-source many of the components that I built for this project including autocomplete text boxes and rounding step sliders. I will not focus on the implementation as much simply because I’ve already covered a lot of the topics in other blog posts. Here are some of the few blog posts: Swift Classes August 2017: Classes, Subclasses, and Protocols Swift Tips and Tricks February 2017: UI Text Field Styling and Force Touch App Shortcuts Data Types December 2016: Dictionaries and Symbol Tables Swift Core Data Basics: Storing App Data Swift Navigation Basics: How to Setup a Tab Bar App Persist Data: Storing Values Locally Using Swift And many more that can be found in the iOS category of my blog site What I Learned I learned a whole lot from this project both from a UX design standpoint as well as from an engineering, marketing, and critical thinking perspective. Unlike my previous iOS apps, I wanted to make this a fullscale, end-to-end project. This meant that instead of simply designing and building, I also researched, user tested, implemented Google Analytics, marketed, built a static website to promote it, asked my friends and family on social media to download it — in short, I took full ownership of it. This was not a siloed project that only me and 4 other random strangers would use. I wanted this to be a polished product strong enough to withstand any situation, clickpath, or permission error possible. I’ve built upwards of 20 or 30 coding projects to varying degrees, but Slate is definitely one of my most polished products. It gives me immense satisfaction and joy seeing people from all around the world using my app and even sharing it with their friends that I’ll never actually meet. It’s that knowledge that someone out in the world is touching my work — the thousands of lines of code that I carefully crafted — that is truly the fire that keeps me doing what I love: building for others. I can’t deny that I love coding for the sake of coding, but I believe a solution to a challenge can only be great, if there’s someone out there who gets to appreciate it. Acknowledgements I’d like to thank my family and friends for their love and support during Slate’s development. To everyone who beta tested, gave feedback, and rated/reviewed — I give you a huge thank you. You keep me doing what I do and I can’t be more appreciative. The GIFs in this blog post were created on ezgif.com.",
    "tags": "swift project reflection designProcess userExperience",
    "url": "/ios/2017/12/03/slate-taking-my-first-solo-ios-app-from-rd-to-full-scale-product.html"
},

  
  
  
  {
    "title": "Getting Started with Login Sessions: Express, Client Sessions, and React",
    "text": "Introduction What is a cookie? A cookie is a piece of data attached to the header of an Internet request. It’s the browsers way of storing data about a website. A site might use cookies to track what’s in your shopping cart, when your last visit was, or who’s logged in to your site which is what we will be covering in this blog post. How does it work? In short, the user logs in and sends their username and password to an API endpoint on the server. If authenticated, the server will send back and set a cookie with the session on the browser (ie. client). Until the cookie expires, all communication between the client and the server will include a cookie, or encrypted string, that can be used for authentiction, sessions, etc. My Stack I’m running an ES6, React-Redux-Router client web app compiled with Webpack and served by my server. My server is an Express, Typescript, Webpack, NodeJS app connected to a Postgres database and Sequelize as my database API interface. My entire setup runs on Heroku. Server-Side Middleware: Enabling Cookies We must first setup the infrastructure for cookies using client-sessions. This involves using middleware to both configure and “enable” cookies. We use create a middleware with the specified configuration: app.use(sessions({ cookieName: 'session', // cookie name dictates the key name added to the request object secret: 'somecrazykeythatyoushouldkeephidden', // store in environment variables duration: 60 * 60 * 1000, // how long the session will stay valid in ms activeDuration: 1000 * 60 * 5, // if expiresIn &lt; activeDuration, the session will be extended by activeDuration milliseconds })); The secret key should be kept secret for security reasons. This serves as the encryption method for the cookie contents. Because a cookie is just a string attached to a header, it can be theoretically available to the public; however, you don’t want your user or curious browsers to see what you are setting as it could contain sensitive information. It often contains email addresses, authentication tokens, and if the developer really has no sense of security, passwords. In order to keep all this information confidential, we use a long string as our key and perform an LFSR (Linear Feedback Shift Register) — an effective type of encryption. Because the key is stored on the server (keep it as an process.env variable if your code is open-source), the server can decrypt it as well. If you are curious about LFSR, feel free to check out a version I wrote in python. Restricting access based on cookies Once a cookie is set, you can easily use this cookie to restrict access to various parts of your app. client-sessions handles the decryption so the cooke simply becomes another variable that you can read in that is attached to the request variable in Express. Instead of adding logic to every individual route or controller, I added my authentication logic to my middleware like so: app.use((req, res, next) =&gt; { // APIs that client must be logged in for // Best practice: APIs that are accessible via the client but require a login // APIs are already protected by a Basic Auth, this is just a safegaurd const blacklisted = [ '\\/api\\/users\\/create', ] const path = req.originalUrl; if (!req.session.user) { console.log('No session'); if (new RegExp(blacklisted.join('|'), 'i').test(path)) { // If on the blacklist res.status(401).send('Please log in'); } else { // Allowed next(); } } else { next(); } }); Because I already encrypt my server and client with Basic Authentication, I did not need to have restricted access on every part of my app. I instead created a blacklist of url regexes that require authentication. If a request is made to that URL or set of URLs, the request will be cut short and a 401 unauthorized response will be returned telling the user/client ot log in. Client-Side Logging In In order to set a cookie on the client-side, we need a /api/login endpoint that checks against a database of users and sets a cookie. I’m using Sequelize so the database management is fairly straightforward. My login route hits this function below: export const login = (req: Request, res: express.Response) =&gt; { const data = req.body; // Takes in values in the body if (data.username === undefined || data.password === undefined) { // Empty authentication res.status(200).send({ success: false, error: 'Please submit a username and password', }); return; // Terminate } return User // Sequelize - perform a lookup in the database .findOne({ where: { username: data.username, password: data.password, } }) .then((user: User) =&gt; { if (user == null) { // No user — Invalid credentials res.status(200).send({ // Send response success: false, error: 'Invalid username &amp; password', }); return; } // Valid credentials console.log(`Successfully logged in user: ${user.username}`); delete user.password; // Don't send back password for security reasons req.session.user = user; // Set the cookie // Send a message back to the client res.status(200).send({ success: true, user, // Send user }); }) // Error with sequelize .catch((error: Error) =&gt; { console.log(error); res.status(400).send({ success: false, error, }); }); // Error in request } Set a browser cookie from an API response Now that we know how to send a cookie back from the server, we must now inject that cookie into the browser so the session can actually be tied to a browser. The client-session package automatically sets the appropriate cookie on the response header as Set-Cookie. This indicates to the browser to store the response as a cookie. Any response with the property Set-Cookie, as seen below, will do just that. In order for the client to allow setting a cookie, the fetch request must be same-origin. This is a security feature that ensures malicious cookies have a harder time. I’m using whatwg-fetch and in my fetch request, I set credentials: 'same-origin': return fetch(url, { method: 'POST', headers: { Accept: 'application/json', \"Content-Type\": \"application/json\" }, credentials: 'same-origin', // Will set cookie 'set-cookie' only if this is set to 'same-origin' } In this situtation, there was a successful login from the login page that sent back a cookie. The browser set this cookie in the header so every request to my domain will include this cookie in the future — at least until it expires. The cookie was encrypted on the server side and can only be decrypted by the server. It also has an expiration date so a user’s session will expire. Logging Out Logging out is much more straightforward. It simply involves removing the cookie from the headers — thus reseting the cookie on the client-side. export const logout = (req: Request, res: express.Response) =&gt; { const previousUser = req.session.user; // Save the previous user req.session.reset(); // Reset the cookies // Response to client res.status(200).send({ success: false, user: previousUser, }); } Getting User Information after Load Cookies only allow information to be sent back from the server, so we need a seperate method to get information about the user like their name, email, etc. We do this by creating a method that returns unencrypted data about the user based on the session cookie. It’s also a helpful API for determining if a user is currently signed in. Here’s an example: export const currentUser = (req: Request, res: express.Response) =&gt; { if (req.session.user) { delete req.session.user.password; // Remove password const data = { logged_in: true, user: req.session.user, }; res.status(200).send(data); } else { const data = { logged_in: false, }; res.status(200).send(data); } } In my React-Redux-Router app, I make this API request on entry so that my local redux state contains information about my user right on load. This allows me to populate sections of my app like a ‘Profile’ section as well as restricting certain routes.",
    "tags": "expressServer backendServer es6 javascript tutorial sourceCode",
    "url": "/web/2017/08/29/getting-started-with-login-sessions-express-client-sessions-and-react.html"
},

  
  
  
  {
    "title": "React Redux Tutorial: Building Your Own Web App",
    "text": "Introduction Redux has been making a strong appearance recently in the world of web development. In a nutshell, it is essentially a way of keeping and consolidating props outside of the React components. The goal is to eliminate the need for local states and use the React components for purely rendering and small minor helper functions. The creators of Redux set out to tackle the challenge many developers faced, myself included, of passing properties between many components. I’ve been working with React since it’s birth for about 3 years now and I’ve been a huge fan ever since. I started using Redux this past summer at Moat (Now Oracle as of August 1st) and it’s been a great addition to my skillset and productivity because of the ways in which it improves large-scale React web apps. In this post, I will cover the basics of React/Redux as well as its benefits. Redux works by using React components, containers, actions, and reducers. Reducers receive action dispatches and update the Redux state. All Redux state changes must be routed through the reducer. Additionally, all actions must be connected to components through containers. Component can only update the local state by triggering actions. In short, reducers sit on top of the state, actions triggers reducers, containers connect components with states as well as actions, and components display client-facing components. Overview Typical file structure: client/src/ +-- Actions | +-- Section1Actions.js | +-- Section2Actions.js +-- Components | +-- Section1 | | +-- Components1.jsx | | +-- Components2.jsx | +-- Section2 | | +-- Components3.jsx | | +-- Components4.jsx +-- Constants | +-- MainActionTypes.js | +-- OtherConstants.js +-- Containers | +-- EntryContainer.js | +-- Section1Container.js | +-- Section2Container.js +-- Reducers | +-- Section1Reducer.js | +-- Section2Reducer.js | +-- index.js +-- Styles | +-- main.scss | +-- Section1Styles.scss | +-- Section2Styles.scss +-- ConfigureStore.js. +-- index.js Dependencies react react-dom react-redux redux redux-logger redux-thunk Boilerplate Code 1. Entry-Point // client/src/index.js import React from 'react'; import { render } from 'react-dom'; import { Provider } from 'react-redux'; // This imports a redux store that we will get into next import store from './ConfigureStore.js'; // I've found it helpful to use a generic entry container that houses subsequent containers import Entry from './Containers/EntryContainer'; // Can call actions on render which can be helpful for fetch requests import { someAction } from './Actions/MainActions'; // Import styleguide (optional) that doesn't correspond to a specific component import './Styles/main.scss'; // Get styleguide store.dispatch(fetchRepos()); // Fetch the fe-component repos render( // Must wrap with the provider and store &lt;Provider store={store}&gt; &lt;Entry /&gt; &lt;/Provider&gt;, // The target in the DOM you are rendering to // This will be in the client/dist/index.html document.getElementById('main') ); 2. Configuring the Store // client/src/ConfigureStore.js import { createStore, applyMiddleware } from 'redux'; import thunkMiddleware from 'redux-thunk'; import createLogger from 'redux-logger'; // For debugging in the console import mainReducer from './Reducers'; // Import the reducer (client/src/Reducers/index.js) // Thunk middleware is used to allow functions to be passed as actions const middlewares = [thunkMiddleware]; // If debug mode is on, log state changes and actions to the console const debuggerMode = false; // Can also be determined by process.ENV variables if (debuggerMode) { const loggerMiddleware = createLogger(); middlewares.push(loggerMiddleware); // Add middleware } // Creates store that handles the complete state tree of app // This is exported and used by the provider export default createStore(mainReducer, applyMiddleware(...middlewares)); 3. Creating a Component Components are the purely frontend, client-side rendering piece of the puzzle. They should have limited logic and mainly act as pure functions. They are connected to containers which feed them props, but for now we will simply be creating a component with property requirements. Pure Functional Component (Just Rendering) // client/src/Components/&lt;folder-name&gt;/&lt;component-name&gt;.jsx import React from 'react'; import PropTypes from 'prop-types'; // For enforcing prop types import '../../Styles/&lt;component-name&gt;.scss'; // Import the corresponding stylesheet const ComponentName = (props) =&gt; ( &lt;div&gt; {props.message} &lt;/div&gt; ); // Declare which props are what type and if they are optional ComponentName.propTypes = { message: PropTypes.string.isRequired, someObject: PropTypes.shape({ name: PropTypes.string.isRequired, age: PropTypes.number, numbers: PropTypes.arrayOf(PropTypes.number).isRequired, }), // Not required }; export default ComponentName; More Logic-Heavy Component // client/src/Components/&lt;folder-name&gt;/&lt;component-name&gt;.jsx import React, { Component } from 'react'; // Must import the Component class type import '../../Styles/&lt;component-name&gt;.scss'; // Import sass file for this component class Loading extends Component { constructor(props) { // Can now use other functions super(props); ... } randomFunction(input) { ... } render() { return ( &lt;div&gt; {this.props.message} &lt;/div&gt; ) } } ComponentName.propTypes = { ... }; export default ComponentName; 4. Action Types All actions must dispatch an object that dictates to a reducer what it should do. The way the reducer registers what type of logic to carry out is by a unique action.type. These are stored in the Constants/MainActionTypes.js file. It looks something like this: // client/src/Constants/MainActionTypes.js // Loading Actions export const REQUEST_SENT = 'REQUEST_SENT'; export const REQUEST_SUCCESS = 'REQUEST_SUCCESS'; // API Actions ... 5. Reducers Reducers respond to actions when they dispatch a return object. These objects are picked up by the reducers and some logic is carried out that can update the state. Reducer functionality should be kept at a minimum and it is very important that they remain pure-functions — that is, they only rely on input, no other information, for calculating an output. A reducer looks like this: // client/src/Reducers/SomeReducer.js // This gives you access to the action types we created in step 4 import * as types from '../Constants/MainActionTypes'; const initialState = { someValue: true, // Default initial state for this variable }; const someReducer = (state = initialState, action) =&gt; { // The app can decide what to do based on the action type // The return object for this function will be the new state switch (action.type) { case types.SOME_ACTION_TYPE: return { ...state, someValue: false, }; default: // Default, no state change return state; }; return state; }; export default someReducer; The reducers are then consolidated into one file in the Reducers/index.js file: // client/src/Reducers/index.js import { combineReducers } from 'redux'; // Import all the reducers import someReducer from './someReducer'; ... import anotherReducer from './anotherReducer'; // Export for use in the entry index.js file export default combineReducers({ // 'name' refers to the name of the reducer you will use to access the variables associated with it name: someReducer, ... another: anotherReducer, }); 6. Actions Actions are like any function except that the only thing that really matters is their return object. Actions are dispatched (thanks to redux-thunk) and their return objects are what the reducers receive and interpret; therefore, it is imperitive that the action return has type value associated with it. We will set them using the MainActionTypes.js constants we wrote earlier so that there are no typos. Actions are generally referenced in the container and attached to a component as a prop as we’ll see in step 7. Standard action: // client/src/Actions/mainActions.js import 'whatwg-fetch'; // Fetch requests import * as types from '../Constants/MainActionTypes'; export const updatingVariables = (val) =&gt; ({ type: types.SOME_ACTION, name: val, }); Sample async fetch-request: // client/src/Actions/mainActions.js import 'whatwg-fetch'; // Fetch requests import * as types from '../Constants/MainActionTypes'; export const fetchJSON = () =&gt; { const url = '...'; // Returning a promise allows you to use the 'dispatch' function in the child scope return (dispatch) =&gt; { dispatch(requestSent(url)); // Actions can dispatch other actions // Return the contents of the fetch promise return fetch(url, { // See watwg-fetch for docs credentials: 'same-origin', // If same origin }).then(response =&gt; response.json()) // Parse response .then(json =&gt; { console.log('Received data'); dispatch(receivedData(json)); return json; // Return it as a promise — will be the result of the original action // Example: // this.props.fetchJSON().then((response) { ... }).catch((error) { ...}); }) .catch(error =&gt; { // Catch any errors dispatch(actionError(error)); }); }; }; 7. Containers Containers put steps 3-5 together and lets you package the component, reducer, and constants all together. Containers connect the actions, redux state values, and reducers to the components as props. When you want to render the contents of the container, you include the &lt;ContainerName /&gt; as opposed to its child &lt;ComponentName /&gt;. // client/src/Containers/someContainer.js import { connect } from 'react-redux'; // Get the component import SomeComponent from '../Components/SomeComponent'; // Import actions you'd like to make usable to a component import { someAction } from '../Actions/MainActions'; // Map the redux states to props const mapStateToProps = (state) =&gt; ({ // 'name' is the name of the reducer you specified in step 5 in the file: // client/src/Reducers/index.js someValue: state.name.someValue, }); // Map actions to props const mapDispatchToProps = (dispatch) =&gt; ({ viewComponent: (input) =&gt; ( dispatch(someAction(input)) ), }); // Connects your component to the store using the previously defined functions export default connect( mapStateToProps, // Add the states mapDispatchToProps // Add the actions )(SomeComponent); // Connect them to the component To use the container, simply include it like so: import React, { Component } from 'react'; import PropTypes from 'prop-types'; import SomeContainer from '../Containers/SomeContainer'; // Get container class Entry extends Component { constructor(props) { super(props); ... } render() { return ( &lt;div&gt; &lt;SomeContainer /&gt; &lt;/div&gt; ) } } Entry.propTypes = { ... }; export default Entry; Conclusion If you put all those pieces together you should end up with your first, boilerplate React/Redux application! It’s a really useful tool and a great addition to any stack — especially those that already use React. I will be working with this stack very shortly on a personal project as well as some business projects so I’ll be sure to keep you all updated on what I’ll continue to learn!",
    "tags": "reactjs redux javascript es6 tutorial sourceCode",
    "url": "/web/2017/08/29/react-redux-tutorial-building-your-own-web-app.html"
},

  
  
  
  {
    "title": "Swift Classes August 2017: Classes, Subclasses, and Protocols",
    "text": "Swift Classes August 2017: Classes, Subclasses, and Protocols Classes In this post, I will cover the basics of Swift classes, subclasses, and their protocols/delegates. Classes are a foundational piece of computer science and software development. They allow developers to create instances of a certain type of object with pre-defined methods (functions) and instance variables (properties). For example, a class might be a car with an instance variable: wheels = 4 and a method: driveForward(). Here is what it would look like in Swift 3: // Declaration class Car { // Immutable and only accessible within this class // No initial value private let wheels: Int // Mutable and accessible outside of this class // Initial value 1 public var passengers: Int = 1 // Called when a new instance of \"Car\" is created init(wheels: Int) { self.wheels = wheels // Set instance variable } // Can be called on an instance of \"Car\" public func driveForward() -&gt; void { ... } } // Usage let porche: Car = Car(wheels: 4) print(porche.passengers) // 1 porche.driveForward() // ... All cars have wheels and they all the ability to drive forward — that is why these become part of the class. Classes are a way of standardizing objects that have similar properties, just different values. This method of creating classes is what allows for modular-code, an essential aspect of computing and engineering. Subclasses Subclasses are a way of building on top of existing classes. For example, if we continue with our example of the class Car, a subclass could be Tesla. They share very similar properties, but Tesla’s have key features that set them apart from cars. Tesla would inherit all the essential properties and methods from Car, but add on its own special components. Here is an example: class Tesla: Car { // Inherit \"Car\" public func charge() -&gt; void { ... } } Any instance of Tesla would still have the same constructor and properties like wheels and driveForward(), but would include a new method charge() unique to instances of type Tesla. Protocols &amp; Delegates Protocols are a way of enforcing a parent or other class conforms to a set of methods. It’s a somewhat complicated topic and it makes the most sense once you’ve worked with Swift for a little bit, but here are some easy example. The easiest example of a protocol is when you create a sublcass of a UIViewController. By subclassing, you are adding on top of the existing class UIViewController. You are also given the option to override certain functions like viewDidLoad() and viewDidLayoutSubviews(). These methods are optional protocols in UIViewController made available to you because the delegate — what is responsible for satisfying the protocols — is set to the new subclass. That’s all very confusing, but here’s a step by step on how they work and how to create your own class with protocols. It might clear up your confusion. Create a class that has an event listener. class SomeClass { private let button: UIButton = UIButton() ... private func buttonPressed() { print(\"I was pressed\") } } This function, buttonPressed(), will be run every time the button is pressed. This begs the question, how will the UIViewController that contains an instance of SomeClass detect when the button was pressed? It can create an interval timer that checks every 1/10 of a second to see if the button state has changed, but that’s neither efficient nor practical. Instead we must use a protocol. Create a protocol. protocol SomeDelegate: class { func buttonWasPressed(someValue: Int) // Passes back a parameter } @objc protocol SomeDelegate: class { @objc optional func buttonWasReleased() // Optional protocol } Notice the first protocol passes back a value. This is useful when you want the parent to be able to listen and track when a specific value has changed. You can simply trigger the protocol every time the value is changed and pass the value as the parameter. The second protocol example doesn’t take a paramter, but it is optional. This means that the parent class doesn’t need to include buttonWasReleased() in order to conform to the protocol SomeDelegate. Notice the use of the @objc tags. Establish the protocol as an instance variable named delegate. class SomeClass { weak var delegate: SomeDelegate? } Call the appropriate protocol method in your class to trigger the listener. class SomeClass { ... private func buttonPressed() { print(\"I was pressed\") self.delegate.buttonWasPressed(someValue: 1) // For optional protocols self.delegate?.buttonWasReleased?() // Optional so don't force otherwise app will crash } } This new line triggers the protocol method buttonWasPressed and passes the value 1 up to the parent. Now we’ll cover how to actually use this in your class. In your UIViewController subclass, add the protocol as a class to conform to. class SomeViewController: UIViewController, SomeDelegate { ... } Connect or create the instance of the class and attach self as the delegate. This will tell the protocol that this current class will conform to the protocol. class SomeViewController: UIViewController, SomeDelegate { override func viewDidLoad() { super.viewDidLoad() let example: SomeClass = SomeClass() example.delegate = self } } Add the protocol as a function. If everything was set up correctly, the method should auto-complete. class SomeViewController: UIViewController, SomeDelegate { ... func buttonWasPressed(someValue: Int) { print(\"Button was pressed with value: \\(someValue)\") } } That’s it! Now every time the function buttonPressed() is run, it will run buttonWasPressed() in SomeViewController and pass a value. This is a great way of communicating between a child and parent when some event is triggered by the user. Hope this tutorial helped! It’s been a few months since I did any iOS dev (got caught up in a lot of web dev because of work) so I hope my explanations and code were clear and clean.",
    "tags": "swift tutorial",
    "url": "/ios/2017/08/24/swift-classes-august-2017-classes-subclasses-and-protocols.html"
},

  
  
  
  {
    "title": "CSS Tips and Tricks August 2017: Flexbox",
    "text": "Introduction I’ve been starting to work with CSS flexbox for one of my projects at work that has some very sophisticated alignment, spacing, sizing, and positioning specifications. It’s heavy in animations and must respond dynamically to window dimension changes. One of my co-workers advised that I try out flexbox since it specializes in these types of properties. This post will cover the main properties and what they do. For more information, here are some useful resources: Flexbox guide Gamification to learn flexbox Challenges that were solved with flexbox Parent Properties Allowing Flexbox Properties You must first specify that the div should respond to flex CSS properties by setting display: flex in the parent. Axis &amp; Cross-Axis: http://www.flexboxdefense.com/images/flexbox-column-a0e8dc099b07e1cfd6eaa6da2525cf54.png .container { flex-direction: row | row-reverse | column | column-reverse; } justify-content (cross-axis/horizontal spacing) The justify-content property is a fancy way of saying horizontal alignment. You can align flex-start (left), center (center), flex-end (right), space-between (space items evenly using their widths), or space-around (space all items so that they have equal space between them). .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly; } align-items (across cross-axis/vertical spacing) The align-items property allows you position a container’s items across its cross-axis — basically meaning vertically. There are three possible values: flex-start (top), flex-end (bottom), and center (vertically in the middle). .container { align-items: flex-start | flex-end | center | baseline | stretch; } flex-wrap Can determine whetehr or not the children are capable of wrapping. .container{ flex-wrap: nowrap | wrap | wrap-reverse; /* default nowrap */ } Child Properties order (order of items) This can be set to display the children in an order different from when they appear. It accepts an interger value as its parameter and they are all relative — that is, they do not need to be sequential. Making the first component -10 and the second component 0 has no difference from making the first component 1 and the second component 2. .item { order: $integer; } flex/flex-grow/flex-shrink (proportion they scale to fill their container) This property describes the item’s ability to scale and fill the container. Like order, the numbers are all relative so having an item with flex: 1 (or flex-shrink/flex-grow if you want to set them independelty) will scale half the size of an item of the same parent with flex: 2. Negative numbers are not allowed. .item { flex: $number; /* default is 0 */ flex-grow: $number; flex-shrink: $number; }",
    "tags": "css tutorial",
    "url": "/web/2017/08/22/css-tips-and-tricks-august-2017-flexbox.html"
},

  
  
  
  {
    "title": "My Custom VIM Configuration: Installation, Usage, and Capabilities",
    "text": "Configuring Your Environment VIM is configured using a .vimrc file in your root directory (~/.vimrc) and serves as the configuration file. It is similar to a .bashrc or .bash_profile in the sense that it must be sourced to reflect changes, but VIM automatically takes care of when it launches. Ensure that the ~/.vimrc file exists and if not, create one. Now here’s how the complete setup: Copy/paste the contents of the configuration file into your .vimrc file or replace the file itself. This will give you all the configurations that I use. Before you are done, you need to install the packages that are used in the configuration. Like I said earlier, I’m using vim-plug as my package manager service. Install vim-plug using: curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Open VIM - type : to open the VIM command line. You will be using this a lot. Type PlugInstall and press Enter. VIM has a handful of common “listener keys” that let VIM know you are about to perform a custom key command. This includes :, ,, /, etc. Note: Sometimes need to source the .vimrc file first: :source % :PlugInstall Install MacVim Some plugins will require a higher version of VIM than the out-of-the-box built-in default for Macs. Many references online have recommended using MacVim and aliasing its CL interface to “replace” the default. Add this to your .bash_profile after you’ve installed MacVim: # Mac VIM Alias alias vim='/Applications/MacVim.app/Contents/MacOS/Vim' Your VIM is now properly configured to work with the plugins that we have included in the .vimrc; however, some plugins require additional installations that I will described next. Installing Plugins There are a few plugins that require additional installations that don’t get setup automatically using vim-plug. Follow the steps below to configure these libraries: Pathogen — Package loader mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim AG - For project file grepping (‘AG’ stands for the silver element in periodic table) brew install the_silver_searcher    Dev Box (Ubuntu)     sudo apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev YouCompleteMe - Autocomplete Install Cmake: $ brew install CMake On dev box (Ubuntu): $ sudo apt-get install cmake To install Typescript support: $ npm install -g typescript Finish install: $ cd ~/.vim/plugged/YouCompleteMe &amp;&amp; ./install.py --all Theme and Colorscheme (Dark: Solarized | Light: PaperColor) Install into bundle folder. Create it if the directory doesn’t exist. $ cd ~/.vim/bundle $ git clone git://github.com/altercation/vim-colors-solarized.git Set the theme in .vimrc. syntax enable \" Use 'light' if want the light theme set background=dark colorscheme solarized The current default theme is solarized-dark however, if your iTerm profile name contains the the word light (case insensitive), the theme will be PaperColor with a light background. Can also switch the colorscheme in your session by typing: :colorscheme papercolor. Available themes: papercolor, carbonized. Asside: the current bashrc does not contains this, but there’s a neat script from Metalelfo Blog that changes the colorscheme to dark/light depending on the iTerm profile name. Also, if you name your iTerm profile ‘solarized’ for example, it’ll change the vim theme to ‘solarized’ if it exists. NERDTree - Project Heiarchy in Sidebar Ensure you have a ~/.vim/bundle/ directory Install using: $ git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree NERDTree will automatically open when VIM opens because of this command in the .vimrc: autocmd vimenter * NERDTree mru.vim — Quick Access to Most Recently Used Files (For Unix Systems) Ensure there exists a folder: ~/.vim/plugin Add mru.vim to the plugin folder curl \"https://raw.githubusercontent.com/yegappan/mru/master/plugin/mru.vim\" -o \"mru.vim\" Additional configurations can be found here To use mru.vim, type :MRU in VIM and you will open up an interactive mini window listing your most recently used files that you can then browse and open files from Commands VIM Environment Launch VIM: $ vim &lt;file/directory (optional)&gt; Close current pane: :q Quitting all panes: :qa Save: :w Save &amp; Quit: :wq Run a terminal command: :! &lt;your-command&gt; Switching input modes Highlight mode: v Insert mode (keyboard and arrow keys will work like normal): i Insert new line below and enter insert mode: o Delete and enter insert mode: s Viewing mode (if in highlight or insert mode): Esc Navigating In-File (Non-Insert Mode) Go to line: &lt;Line-Number&gt; + Shift + G Back one word: b Forward one word: w Move to first non-blank character of line (Like Command + Left): _ Move to last non-blank character of line (Like Command + Right): g_ Beginning of line: 0 End of line: Shift + 4 ($) Page up: Control + B Page Down: Control + F Delete row: D + D Delete key in front of cursor: X Arrow key mappings: Up: k Down: j Left: h Right: l Move x positions: &lt;number&gt; + &lt;key&gt; Example: Move down 10 lines: 10 + j Note: Syntax supported by all navigation commands Opening Files Fuzzy Search - Searches file names — ,t To cancel: Command + C or :q Reload buffer (file) due to external changes: :e Refresh NerdTree file tree: While in NerdTree pane, Shift + R Grepping Global find (searches content of file in project) — ,a The “current project” is whatever directory you $ vim into Search the selected word: Shift + 8 Search within file: \\&lt;keyword on page&gt; * n goes to next * Shift + N goes back * :noh clears the highlighted words on the page from the search Search and replace: :%s/foo/bar/g (Replace foo with bar no confirmation. For confirmation, use gc instead of g at end) Highlight all occurances of current word under cursor and go to first instance (while not in highlight mode): # To refresh NerdTree’s listing of files, navigate to the NerdTree pane and press Shift + R Highlighting mode Highlighting an entire line: Shift + V Highlighting mode: v Copy/yank: y Copy file contents to clipboard: :% !pbcopy Paste: p Paste above: Shift + P Pasting in insert mode (having copied using the operating system): Command + v Paste from clipboard with auto-indenting: :set paste + Command + V Yank/copy the inner word (word under cursor): yiw Highlight the inner word (word under cursor): viw Panes Opening new panes, start with: control + w: * v is vertical split (focus on the new pane) * o is horizontal split * = makes all panes equal size Switch panes: Move up: control + j Move down: control + k Move left: control + h Move right: control + l Close all except current: control + o Other Undo: u Redo: control + r Highlight cursor in vim: Command + / Repeating the last command: . Delete: d –&gt; Format: d + number (optional, default 1) + action d + 4 + w would delete the four next words Creating new file from CL in VIM: $ vim &lt;file-name&gt; Make sure you save before you quit using :w Quitting: :q Quitting without saving (and not being prompted): :q! Using easymotion Easymotion is a plugin that allows you to quickly move through the current file by highlighting all possible next positions for your cursor and adding a hotkey to them. Instead of typing /div and pressing n to cycle through to the instance of div that you’re looking for in your code, you can simply type s to initiate the easymotion grepping, di as your two character query (configurable in .vimrc file), and type the key that is placed on the instance of what you’re looking for. Commenting To comment a line you’ve highlighted, type gc To comment a line without highlighting, type gcc Explorer Opening up explorer: :Explore or :Exp + Tab to complete it for you Navigation using hjkl. When opening a file: Enter opens in same pane o splits horizontally (opens below) v splits vertically (opens to the side) - Up one level to parent gg - top of file/pane Shift + G - bottom Go to line number: &lt;Line #&gt; + Shift + G Using the Command Line You can use or view the command line without leaving the VIM environment. :! takes you to a read-only fullscreen command prompt to see your history :! &lt;usual-terminal-command&gt; will allow you to enter commands Additional Plugins and Customizations All Plugins comment_vim typescript-vim vim-fugitive supertab tabular rename.vim goyo.vim vim-vroom auto_mkdir ctrlp.vim ag.vim ctrlp-cmatcher ack.vim YouCompleteMe indentline vim-gitgutter vim-airline vim-multiple-cursors vim-easymotion Languages vim-coffee-script vim-elixir vim-emoji vim-rails vim-javascript vim-jsx Further Customizations Adding a Plug In Add the plugin to the .vimrc file: Plug 'Valloric/YouCompleteMe' Source the file: :source % Install the plugins: :PlugInstall Removing Plugins Remove the Plug line from the .vimrc file Source the .vimrc file Clean VIM by typing :PlugClean and pressing y to confirm deletion of plugin Suggestions Change caps lock to escape in System Preferecnes -&gt; Keyboard -&gt; Modifiers In Development Undo closing a pane (reopen last pane) FAQs Does the mouse work? Yes! Open VIM tutorial: $ vimtutor What does &lt;C&gt; map to? It maps to Control",
    "tags": "vim sourceCode",
    "url": "/configuration/2017/08/04/my-custom-vim-configuration-installation-usage-and-capabilities.html"
},

  
  
  
  {
    "title": "Introduction to VIM: Transitioning to Command Line Text Editing",
    "text": "I’m testing out VIM (contractions: “Vi IMproved”) — a command-line editor — to see if I should make the switch from Atom/Sublime to VIM. I’ve been using Sublime since I started developing in December of 2014 and I only recently picked up Atom my senior year of high school back in the fall of 2015. I’ve always enjoyed text editors and have had my fair share of GUI clients: Sublime 2, Atom, Brackets, XCode (although a bit different because it’s not for web), and a handful of others. Up until now I’ve always argued that ext editors are much more useful than terminal editors because of their functionality, power, and customization; I was willing to look over their slow performance and limited upper-bound on configuration. Specifically for work-related projects, I have to develop and write code on my virtual machine in the cloud, meaning that I could either edit from the terminal or use an FTP plugin on Sublime/Atom (meaning I would have to manage double copies of everything). I decided that since it’s the summer, I’d have time to try out VIM and see if I want it to be daily driver during the school year because, I have to admit, it has its major benefits. I didn’t want to start from scratch and thankfully my coworker, Steve Aragon, is a master at VIM and has been using it for the past two years or so. He has a base configuration that he got from a friend of his so I used his a base and added some of my own customizations. I’ll probably end up doing a more in-depth post on my thoughts after using it extensively, but my initial thoughts have been fairly positive. The keystrokes take some getting used to. They’re so drastically different from my daily workflow that it’s difficult to adopt, but I can already sense it becoming more muscle memory. Keep in mind that I’ve been using VIM for probably 6 hours total now — much of which is for configuration — I don’t really have enough time logged to make an accurate review of my experience. I love how fast it is and the extensive customizations that I can make. There are plenty of handy plugins (I’m using vim-plug). I’m sticking with my usual iTerm 2 which is significantly faster than any visual text editor, especially Atom, and I’m able to modify the code on my dev box directly as opposed to syncing it from my local machine. I’ll probably be fairly confident with my setup by the time school rolls around so I’m hoping I can start developing in VIM for all my personal, club, school, and work projects by the end of the summer. The learning curve is a bit steep, but once I’ve put in some practice I’m sure I’ll be faster than I was on Atom or Sublime. I think the difference is really that VIM is so malleable and lightweight that the you can keep pushing the upper bound of your macros, grepping, navigation speed, etc. — your productivity doesn’t ceiling out like it would on a normal text editor. Check out my next blog post to see my personal VIM configuration — I’ve spent a fair amount of time messing around with it and I’m really enjoying it so far so definitely take a look if you’re at all interested.",
    "tags": "vim",
    "url": "/configuration/2017/08/03/introduction-to-vim-transitioning-to-command-line-text-editing.html"
},

  
  
  
  {
    "title": "ES6 Tips and Tricks June 2017: Webpack Loaders, Regexes, and DNS Configuration",
    "text": "Using Raw Files with Webpack There are some files that are best used when imported as their raw contents. This includes, but is not limited to file extensions like: .svg, .md, and .txt. For these situations, you must use the raw-loader in your webpack.config file: // Load markdown as raw text ... { test: /\\.md/, exclude: /node_modules/, loader: 'raw-loader' } ... Using an .svg file in React: import svgData from './image.svg'; /* React render() */ &lt;span className=\"loading\" dangerouslySetInnerHTML= /&gt; Cleaning up Log Statements Developers use console.log statements religiously — it’s the best way of debugging and tracking a browser or computer’s path through the code. One problem that arises is that console.log statements are accidentally left in, which doesn’t reflect well if the log statements are clearly debuggers, or simply left in commented out. When deploying to production, console.log statements should be removed. Because they permeate every corner of the project, I’ve found it’s easiest to remove them using regexes: Find &amp; Replace. Here are the regexes for finding all lines with console.log statements: // Commented out statements \"\\n *\\/\\/ console\\.log\\(.*\\)\" // Active statements \"\\n *console\\.log\\(.*\\)\" // Commented out or still active \"\\n *\\/?\\/? console\\.log\\(.*\\)\" Common Regex Statements I’ve started using regexes (regular expressions) more and more in my projects — specifically in Javascript — and I’ve found them very elegant and fun to use. I learned them briefly in class at school, but never really implemented them in full. My hackathon project did use a bit of natural language processing, however, it wasn’t to a huge scale. We mostly stuck to date and location parsing. Here’s a simple email validation regex match statement in Javascript: const validQuery = 'email@test.com'; const invalidQuery = 'I am not an email address'; // Email regex from: https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript // Notice: uses '/' instead of quotes const emailRegex = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; console.log(emailRegex.test(validQuery)); // true console.log(emailRegex.test(invalidQuery)); // false Getting the Current Directory in Javascript It’s really important that you use a reliable path resolving system when configuring your web apps. Packages like ExpressJS and Webpack rely on file paths to build and serve up your app so it’s essential that the way you get your current directory is reliable. There are a handful of ways of getting your current directory and navigating through it: Getting Directory: Default: __dirname // Often global — can simply access by calling this variable Using environment variables: const __dirname = process.env.PWD; Navigating Files: Use the path library: const path = require('path'); path.join(__dirname, './client/dist') // Resolves the file path Modifying Local DNS Computers can easily be configured to change the Domain Name System (DNS). What this means is that you can override and map certain IP addresses to different URL names. For example, at work, I develop on my own Dev Box — a section of a computer somewhere that hosts my files. Because Moat has hundreds of these, it’s not economical to buy a domain name for each box. Instead, they are left unnamed and can only be accessed from the browser using their public IP address. When I’m modifying code, I hook into their private IP addresses. Instead of typing in the exact IP address every time you want to view your code, which is long and can easily be butchered, you can modify your local DNS and map that specific IP address to a human-readable URL. Navigate to /etc/ ($ cd /etc/) — notice it is prepended using a forward-slash, indiciating it is in the base directory. Next, open hosts using VI, VIM, NANO, or any other text editor. Now modify that file using the following structure. &lt;IP Address&gt; &lt;URL 1&gt; ... &lt;URL N&gt; 12.345.67.89 admin.test.com 01.234.56.78 test1.com test2.com Common IP Ranges Private IPv4 address spaces (Source) RFC1918 name IP address range Mask bits 24-bit block 10.0.0.0 - 10.255.255.25 8 bits 20-bit block 172.16.0.0 – 172.31.255.255 12 bits 16-bit block 192.168.0.0 – 192.168.255.255 16 bits",
    "tags": "es6 javascript tutorial",
    "url": "/web/2017/07/31/es6-tips-and-tricks-june-2017-webpack-configuration-regexes-and-dns-configuration.html"
},

  
  
  
  {
    "title": "Design Notes July 2017: Useful Tools, Freelance, and Design Systems",
    "text": "Introduction I’ve recently started talking to some designers at Moat — Vince Li and Josh Turk (Spelling?) [head of design at Moat] — and they’ve been giving me some really good insight into design at a big company as well as tools for myself to use. I’ve been working on the frontend Analytics engineering team, however, because of the size of the company, we do not do any design work. I’ve taken a liking to talking to designers to see what’s going on with their projects and any tips they might have for starting designers. One of the pieces of advice that I’ve picked up at Moat and specifically with design is from Steve Jobs when he says: “Stay a beginner”. The premise of this is great for design but applies to many different aspects of life. It is the idea that you should remain constantly questioning and relearning. If you approach a problem as a beginner every time, you are bound to find improvements and issues with the current design. Tools I talked to Vince extensively about what tools he uses on a day to day for his designing. I mentioned to him that I wanted to get more into natural/organic designs like freehand with more intricate details. He uses the Wacom Intuos Pro Medium and now uses it instead of a mouse. He highly recommends it for what I want to do, but he said that since the entry price is quite steep, it might be more economical to buy an iPad Pro. He let me use Moat’s iPad Pro since the design team hasn’t really gotten around to using it, and it’s been a really neat experience. I’ve been able to play around with some pretty cool apps and I’m currently debating if I can justify the also insanely high price. I’ll give it a couple weeks to see if I’m just going through a hype phase. Useful Design Tools “Spotlight” - Sketch Plugin: Runner “Google Fonts” - Batch Download Common Fonts: Blog Post on This “Laws of UX” - Good design guidelines: lawofux.com About Freelance Josh worked freelance for about a year and talked about how it’s different from a 9-5 job. He said that working as a designer in isolation is one of the hardest things about it. There’s no one to bounce ideas off of, brainstorm, or even give feedback on your work. He also recommended that freelance work, in general, should be intended to build a consistent stream of work. All too often, you can fall into the trap of building for many different clients with small tasks as opposed to building up a solid relation to a handful (he said about four) brands doing long term work. It’s better when you know the company you’re designing for well and it’s much more rewarding seeing the problem and solution play out over long periods of time. I’ll definitely keep it in mind moving forward seeing as freelance is something that I can imagine myself doing in the future. Design Systems Because of my current project at work and what I’ve experienced talking to designers recently, I really want to build my own design system/pattern/toolkit. Initially I wanted to build my own design system using the atomic design method — building buttons, fonts, icons, inputs, etc. that serve as atoms. These atoms then get stacked into molecules, which then stack into organisms, then templates, then finally to pages. It’s a really neat concept and I really want to do it eventually, but because I’m juggling 3 projects (with deadlines) and work right now, I just don’t think I’ll have the hours to devote to it. A more feasible endeavor would be a design pattern, a frontend framework, or a design toolkit — just a way of standardizing the way my buttons, headers, labels, icons, etc. look. Here are a couple of good reference examples: BlueprintJS - “React-based UI Toolkit” Pattern Lab — An atomic design system Bootstrap — Frontend framework Lightning Design - Salesforce’s Design System Google Material Design - Google’s Design System Lost My Name Design System - A great, clean React-based design system Semantic UI React - A Reactified component library And here are some useful articles on how to make your own: How to construct a design system - Useful for how to begin from scratch",
    "tags": "designProcess",
    "url": "/design/2017/07/24/design-notes-july-2017-useful-tools-freelance-and-design-systems.html"
},

  
  
  
  {
    "title": "Getting Started with Typescript: Thoughts, Tips, and Useful Notes",
    "text": "I started using TypeScript for my next project at Moat and I have to say I really love it. I’ve always been a fan of type safe language — largely for the compile-time debugging, code completion, and readability — which is why I’m such a huge fan of Swift. TypeScript has given me the structure and safety that I’ve found with Java and Swift, and has reinvigorated my love for web development. I’ve always considered web development to be somewhat of the “wild west” — not too much standardization and with no checks and balances to minimize errors. Benefits Using TypeScript has eliminated a whole category of bugs that would be present in traditional Javascript. I’m using atom-typescript (v11.0.6) which includes a live linter that checks my code on “compile” rather than during runtime. Because of this, my development time (after I got the hang of some syntax complications) was significantly increased. I no longer had unexpected types, undefined variables, and missing properties on objects. TypeScript can track the type of variables to ensure that functions always receive their specified inputs, variables don’t change types unless explicitly allowed, and code doesn’t attempt to access object attributes that aren’t actually there (also helps with spelling mistakes). It has huge benefits with scalability because of the code clarity and readability. Deciphering poorly written code is a nightmare, but if it had type safety, using the interfaces alone would provide a good map of what’s going on. Furthermore, you wouldn’t have to spend ten minutes to trace the shape of the return object on a function. Team members could better understand the input and output of your code making compartmentalization and modulation a lot easier and more natural. Drawbacks One of the major drawbacks to TypeScript is efficiency. For small scale projects without many complicated objects and nested types, TypeScript might slow your development time down. TypeScript excels in complicated projects where you or a team member must use a complicated object with doubly nested arrays, objects, and dictionaries. This is where knowing exactly what variables you will have at your hands is a lifesaver. TypeScript can also be annoying when the type you expect to receive either doesn’t or varies. Even though you can “turn off” type safety by either not declaring a type or using any as the type, it’s still annoying when the linter complains about something that isn’t really within your control. I’m sure I’ll find many more annoyances after I’ve gotten deeper into it. After all, I’ve only been using it for about a day so I’m probably naive and buying into the initial hype. Regardless, I’m having fun with TypeScript and opinions are better than no opinions. Interfaces I recognized TypeScript’s true power when I was setting up interfaces. Interfaces are like kind of like Structures in Swift without the variable declaration. They do not contain variables or values. Instead, they essentially map out an object’s shape. For example, I’ve been playing around with GitHub’s API for a project and here are two of my interfaces: // Declare shape of repository interface GitHubRepository { name: string; id: number; } interface GitHubFile { type: string; encoding: string; name: string; path: string; content: string; someFunction: { (parameter1: string ): number }; // someFunction(parameter1: 'Hello') } You can also merge and extend interfaces like so: import * as express from 'express'; // Adds onto the original interface from 'Express' interface Request extends express.Request { session { username: string; } } Now, I can use GitHubFile or GitHubRepository as a type just like I would with any other variable type. I have the added benefit of code completion now. When I type a variable name of type GitHubFile and press period, a list of properties and their expected type shows up. It enables IDE’s to be much smarter about their suggestions to the point where it’s honestly approaching Xcode level. Basic Syntaxes Arrays: const numbers: Array&lt;number&gt; = Math.random(); Functions: const getReadme = (name: string) : Promise&lt;GitHubFile&gt; =&gt; { … } Casting: const random: any = Math.random(); const value: number = random as number; Defining Generics: // A promise function that declares a GitHubFile as the promise response Promise&lt;GitHubFile&gt; Final Thoughts Overall, I’ve been very satisfied with TypeScript so far. The combination of code completion, reduced debugging time, and clean structure has made for a hugely satisfying development process. I’m thinking about refactoring my NodeJS Heroku server to TypeScript just so I can keep using it. Hope this post was helpful and I highly recommend you give TypeScript a shot!",
    "tags": "javascript es6 expressServer backendServer",
    "url": "/web/2017/07/14/getting-started-with-typescript-thoughts-tips-and-useful-notes.html"
},

  
  
  
  {
    "title": "Testing APIs: Postman, Network Debugging, and JSON",
    "text": "Postman and Network Debugging Postman is a clean, powerful tool to test APIs with custom configurations to suit your API’s needs. You can choose everything from the types of request (GET, POST, etc.) and the authorization type, to cookies and header data. It includes a great UI for displaying the body of the response as raw, pretty/formatted, or as a web page. It supports tests, pre-request scripts, and useful organization tools that help you manage requests you’ve previously made. I’ve been doing a lot of server work both at Moat and on my personal time. I’ve been using Postman a lot so I figured I’d share a couple of useful tips I’ve come to learn. The authentication features are great for public APIs and APIs with basic levels of security, however, many APIs rely on session cookies — bits of data that tell the browser that the user is signed in and has access to the site. At first, I attempted to manually cookies to the Postman request cookies input, but I believe I left out a couple and may have had some syntax errors because my requests would bounce back empty. I did some digging online and found that there’s a really neat developer tool in Chrome for this exact thing. I’ve been using the Network developer tool in Chrome religiously these past couple weeks. They display information like response time, headers, etc. — pretty much anything you could need related to an API request. Unfortunately, I find the user interface somewhat confusing and it only handles information about the request. It can’t actually call a request. Like any developer, I have to make hundreds of calls to the same endpoint, often with the same data, over and over again even after the simplest of changes. For my project at work, triggering the API required over three clicks and filling out a form before the API was even called. Doing this every time I wanted to run a POST request was a huge pain and I didn’t have time for it. Instead, I discovered that the Chrome Network Tool compiles the request as a cURL command. For those that don’t know, a cURL command is a Command Line tool to make network requests. They’re somewhat hard to format and write out for convoluted network calls, but they’re a standard in the industry. Chrome allows you to copy the request as a cURL ready to be run from the command line! To do this, open the developer tool, click the network tab, run the API (the network tab must be open when the request is made for it to record), then right click the request and select “Copy → Copy as cURL”. You can then run this command in the terminal by simply pasting the cURL into the prompt and pressing enter. This method is great for some testing like pinging a server and reading server print statements, but because I was more concerned with the request responses, I had to deal with large JSON objects — which Postman does a good job with. Fortunately, Postman has a useful feature that allows users to import and export cURL commands. Make sure the cURL is still copied to your clipboard and navigate to your Postman window. In the top left corner, click the “Import” button and a modal should display. Click on the “Past Raw Text” option and past the cURL command in the text area. Postman will import the cURL request with all the options, cookies, etc. and automatically create the API request for you! It’ll essentially duplicate the request the browser made, except in a much better UI. Now you can use all the wonderful Postman features with any network request! I haven’t run into a situation where this doesn’t work (at least with cache-based login sessions) and I’m hoping it’s a catch all. I highly recommend this method for anyone dealing with server development. If you’re still using the browser to ping your API endpoints, I guarantee that it’ll speed up your workflow. Dealing with JSON JSON, along with some of its cousins like XML, is one of the data formats that serves as the bridge between programming languages. You can think of it as the glue that holds the Internet together. When called, API’s will return data — often in JSON format — for the site’s Javascript to parse through. Because JSON isn’t anything more than a specifically formatted String, it can be used pretty much universally. As I’ve mentioned earlier, I’ve been working with massive JSON objects often — sometimes with thousands of entries in nested arrays. Debugging large, plain JSON text as a String is a nightmare. I’ve found a useful Chrome extension called JSON Viewer that automatically determines if the contents of the browser is valid JSON data and provides you with some useful tools to organize the information. JSON With No Formatting JSON With Formatting It turns the page into a text editor of sorts and you can compress objects and arrays very easily. It’ll use syntax highlighting and you can customize the font, text size, and more. Overall, just makes the process of looking at JSON much more enjoyable (restoring the romance in data if I may). It’s really useful when you want to compare two different objects that are separated by a massive, nested array. You can simply compress the array and it becomes infinitely cleaner to look at.",
    "tags": "backendServer expressServer",
    "url": "/configuration/2017/07/01/testing-apis-postman-network-debugging-and-json.html"
},

  
  
  
  {
    "title": "NPM Basics June 2017: Creating an NPM Project",
    "text": "Create an NPM Environment First, you need to create an NPM environment for your library so that NPM knows what dependencies and scripts are associated with the library. Run: npm init Follow the instructions and it’ll attempt to create a proper package.json for your project. Installing Dependencies npm install --save react-redux npm install --save-dev babel-core Global installation npm install -g eslint Useful Dev Tools Linter: Check for coding errors — saves a trip to the browser (Airbnb’s linter is useful) Webpack: For building and compiling JSX, ES6, etc. It will create static site with the option to serve it up locally on the localhost. Use GitHub Repo as the Public NPM Package npm i git://github.com/user/project.git#commit-ish --save File structure of GitHub repo if you want to use it as a public package: library-name/ demo/ dist/ src/",
    "tags": "packageManager github",
    "url": "/web/2017/06/27/npm-basics-june-2017-creating-an-npm-project.html"
},

  
  
  
  {
    "title": "ES6 Tips and Tricks June 2017: Imports, Functions, and More",
    "text": "I am writing this blog post because I am, again, using ES6 for my internship. I was first exposed to this variation of Javascript during my very first internship at Salesforce back in Summer 2015. It feels like a long time ago and I’ve come a long way since then. I am approaching ES6 with new awareness and sharper critical thinking. I felt it was useful to document some of the neat tricks I found with ES6 during my first month of my internship at Moat. A lot of this is partially review — a chance for me to shake the rust off and really solidify my skills in ES6. Concatenation One strange thing that I’ve noticed is that some ES6 linters do not allow you to concatenate Strings using the normal ‘+’ operation. They also don’t allow you use double quotes and force you to stick to single quotes when hard coding Strings. I’m not entirely sure why this is the case and I haven’t had time to look it up yet, but I think it has something to do with the way the compiler transforms the ES6 into static ES5 files for the browser. My guess is that the compiler needs to use double quotes and doesn’t want the code to mess with its compile scripts/process. Anyways, here’s a new way you can concatenate: const id = '154'; // Notice the single quotes // When concatenating, use the \"\\`\" quotation mark (normally shares the same key as the '~') // This works with any String convertible data type const link = `/data_table?id=${id}`; // Result: \"/data_table?id=154\" Updating a Few Properties in an Object This will allow you to return a deep copy of your object without having to write out every single property value. It’s really useful when you’re updating a state in React or Redux. return { ...previousState, propertyToUpdate: !previousState.propertyToUpdate }; Event Handler I came across this useful tidbit when using the React-Select library for my project at work. It is an open source, purely React dropdown list that I would definitely recommend to anyone in need of a dropdown. I was attempting to customize the main component and found a property called arrorRender with the usage description: “Renders a custom drop-down arrow to be shown in the right-hand side of the select: arrowRenderer({ onMouseDown, isOpen })” I’m familiar with event handlers, but I had never seen this style of documentation before. What this means, is that the arrowRenderer is a function that returns a DOM node to be used in place of the default arrow icon. The function takes an object input with the properties onMouseDown and isOpen so that there can be more complex renderings. Here was my rendering function: // Custom dropdown icon for React-Select arrowRenderer(event) { const dropdownArrow = '/path/to/image'; // Dropdown arrow const searchIcon = '/path/to/image'; // Magnifying glass const imgURL = event.isOpen ? searchIcon : dropdownArrow; // Determine which to use return ( &lt;span&gt; &lt;img src={imgURL} width=\"100%\" role=\"presentation\" /&gt; &lt;/span&gt; ); } In this function, I am using the isOpen state to choose which image icon to render in the select input. You may not have seen this notation before and it’s definitely useful to remember. Another useful event handler is the ‘input’ tag’s built in onBlur() event that triggers when the user removes focus from the input element. Like the onFocus() handler, onBlur() can be assigned to a custom function. // The event handler function const update = () =&gt; { console.log('I've been triggered'); } &lt;!-- The HTML --&gt; &lt;input type=\"text\" autoComplete=\"off\" autoCorrect=\"off\" spellCheck=\"false\" className=\"select2-input\" onFocus={update} onBlur={update} /&gt; Preserving 'this' When Using React Props In ES6, ‘this’ is not generally preserved which leads to some difficult workarounds when passing functions from one component to its children. Luckily, there is a technique that can be generally applicable to most situations that solves this issue. Many linters prevent the use of ‘.bind(this)’ so that is off the table. However, the block statement function ensures that ‘this’ pertains to the right scope. It is especially useful when you have to pass variables in as inputs. Here is an ES6 React example of this: import React, { Component } from 'react'; class SomeComponent extends Component { clicked(input) { // 'this' refers to the component rather than the window this.setState({ someState: input }); } render() { return ( &lt;div&gt; Good Example &lt;button id=\"button\" onClick={() =&gt; this.clicked(input)}&gt;I work&lt;/button&gt; This won't preserve 'this' and your component will crash &lt;button id=\"button\" onClick={this.clicked(input)}&gt; &lt;/div&gt; ); } }",
    "tags": "javascript es6",
    "url": "/web/2017/06/14/es6-tips-and-tricks-june-2017imports-functions-and-more.html"
},

  
  
  
  {
    "title": "Intro to Redux: Getting Started with State Containers in React",
    "text": "Overview of Redux Redux is a way of keeping all states consolidated in one master, global javascript object (called a Redux tree) and accessed using a store. In order to understand the basics, it is important to recognize the difference between pure and impure functions. Pure functions have no observable side effects on the database or server; in fact, the return values depend solely on the values of the arguments. If you put in the same arguments, you should get the exact same output every time. An impure function does not do this. It may modify the DOM or change a database. Sidenote: You can deep freeze your input variable to ensure that your function is pure State changes will result in a callback called the reducer function. It is imperative that this function be a pure function and it must return a new object, not a reference to the input. In most cases, you do not need to recreate the entire object. You can keep the references to the objects properties, but the master reference must be different — just change the variable(s) that need to be changed. Sidenote: You can use an expect(…).toEqual(…) to debug in Javascript. They act like Java assertion statements It is also important that the reducer functions consider all possible inputs of an action. By convention, undefined inputs will return the initial statement. A reducer accepts a state and an action. In the following implementation, here are a few important redux API’s to keep in mind: store = createStore(instanceVarToUpdate) lets Redux know which instance to watch store.getState() → get value of variable store.subscribe(() =&gt; { … }); // Callback when variable changes — does not run during the initial state store.dispatch() → A function call that triggers an action manually Implementation There are a few main pieces when implementing Redux with ReactJS. It centers around the ‘store’ or class that controls the global instance variables. In this explanation, we will use a simple counter as the example store. It simply tracks a number and has two API endpoint actions: increment by one, decrement by one. First, we must write out a simple React component so that we have something to connect our redux store to. Install the React NPM package so that we can use the framework. $ npm install --save react Now we must create the controller (written in ES6). import React from \"react\"; // Import the React NPM package // React Component export default class Counter extends React.Component { render() { // Rendering function return ( &lt;div&gt; &lt;h1&gt;Counter: {this.props.value}&lt;/h1&gt; &lt;button onClick={this.props.onIncrement}&gt;Add&lt;/button&gt; &lt;button onClick={this.props.onDecrement}&gt;Subtract&lt;/button&gt; &lt;/div&gt; ); } }; As we will see later, we will pass in the value of the counter and two functions (increment and decrement) from the store we will eventually create. To set up our store, we must first install redux and use the –save option to include it in our package.json: $ npm install --save redux Now we must write the code for the store itself. The store is actually an object type generated running the createStore() function in the redux package on a class. The code is included below. Notice how the function accepts an action and does not actually modify the state — it is a pure function. In this example, the state is the value of the counter and it is initially set to 0. It is written in ES6. // counterStore.js import { createStore } from \"redux\"; // Get the createStore export // Setup the Redux instance const counter = (state = 0, action) =&gt; { // Initially at 0 console.log(action.type); // Feedback switch (action.type) { // Use a switch to determine what action to take case 'INCREMENT': return state + 1; case 'DECREMENT': return state - 1; default: return state; } } // Use the function above as the callback and generate a store type const store = createStore(counter); // Export the store so that it can used in other files export default store; Next, we will link the store with our React class so that it can dynamically update the frontend. We include the store as a local variable in the file using the require() statement: import store from \"./counterStore\"; Side Note: In ES6, you can include exports from other JS files using brackets or no brackets. If there is a default export statement in the file, you do not have to use brackets and any import statement will simply load the default export as the variable name you specified. If you do not have a default export, want to access a number of different exports, or want to access a specific export, you must use the brackets and use the exact name of the export. (citation) Now we will create a rendering function, using ReactDOM to inject our HTML into the DOM. require(\"./style.css\"); // Include CSS stylesheet import React from \"react\"; // Include React import ReactDom from \"react-dom\"; // ReactDOM to load our component into the page import Counter from \"./content\"; // Get our Counter React component import store from \"./counterStore\"; // Don't use brackets because it is the default export // Render function so that we can set it as a callback every time the store variable instance is modified // We are also passing in the counter value and increment/decrement functions // The component is rendered in the element with the id: 'main' const render = () =&gt; { ReactDom.render( &lt;Counter value = { store.getState() } onIncrement = { () =&gt; store.dispatch({ type: 'INCREMENT' }) } onDecrement = { () =&gt; store.dispatch({ type: 'DECREMENT' }) } /&gt;, document.getElementById('main') ) } // Subscribe to the live updates // This will run the function 'render' every time the store encounters a change store.subscribe(render); // Call it once manually to push it into the DOM because it will only render on a change // If we don't manually call it, there can be no changes to put it in the dom in the first place render(); Closing Comments Hope you were able to follow this brief tutorial! It is loosely based on the free course on egghead.io on Redux and React. The full code can be found on my GitHub.",
    "tags": "reactjs redux javascript es6",
    "url": "/web/2017/06/13/intro-to-redux-getting-started-with-state-containers-in-react.html"
},

  
  
  
  {
    "title": "HackPrinceton 2017: SoFly — An iOS App to Scan Flyers on Campus",
    "text": "Introduction Earlier in April, a friend and I participated in HackPrinceton, Princeton University’s semi-annual hackathon that brings students from all around the country together for 36 hours. We built SoFly — an iOS app that scans flyers and lets the user share the event, create a calendar event, find the Facebook event, etc. The judges really liked it and it won runner up for the best app for Princeton Students! I was responsible for the design, frontend, and implementing the OCR (Optical Character Recognition) processing. My partner dealt with the natural language processing to extract the event name, date, etc. from the raw text. I used Sketch to design the UX and Xcode/Swift 3 to code the frontend. We used Tesseract — Google’s OCR engine. Check out the Devpost submission here. Video Demo Motivation The motivation for our application came when we realized how much our college uses flyers to advertise events. From dance recitals, to scientific talks, events are neatly summarized and hung on campus in visible areas. A huge part of our sense of community comes from these events, and as excursions into Princeton township have shown us, events planned in non-centralized communities rely on flyers and other written media to communicate activities to others. Both of us have fond memories attending community events growing up, and we think (through some surveying of our student body) that a cause of decreased attendance at such events is due to a few factors. People forget. Its not a flyer they can always take with them, and so what they think is instantaneously exciting soon fades from their memory. It is not digital – in a world where everything else is. Design The primary concerns for the design were largely speed and usability. Flyers are already something that people ignore because it takes too long to absorb and memorize the information. We had to create an experience that would be as painless as if you just glanced at the flyer and faster than it would take to add the event to your calendar manually. This goal made the design largely a user-experience challenge as opposed to simply making it look good. It was a lot of fun playing around with various user flows and animations. I think the finished product ultimately hit it on both the usability and aesthetic fronts. I put in a lot of effort into the animations (see the video above). Little things from the camera flash on the splash screen to the “scanning” loading animation took all my skill and creativity as an iOS developer to implement. It was really exciting when the finished product looked polished after only 36 hours! Screenshots Implementation The application uses Optical Character Recognition techniques (along with Otsu’s method to preprocess a picture, and an exposure and alignment adjustment algorithm) to extract a dump of recognized text. This text is error prone, and quite messy, and so we use canonical Natural Language Processing algorithms to tokenize the text, and “learn” which terms are important. The Machine Learning component in this project involves a Naive Bayesian Classifier, which can categorize and weight these terms for (as of now) internal use. This compared with a “loose NFA” implementation (we coined the term to describe an overly general regex with multiple matches) whose matches were processed using an algorithm that determined the most probable match. From the flyers we extract date, time, location, and our best guess at the title of the text. We made a design choice to limit the time our OCR took, which leads to worse holistic text recognition, but still allows us to extract theses fields using our NLP methods. Challenges There were a lot of challenges that we had to work through on this project. Optical Character Recognition, Machine Learning, and Natural Language Processing are all open fields of research, and our project drew on all of them. Not only was the debugging process brutal, but the implementation was not as seamless as we would’ve liked. Because Tesseract is not intended for mobile use and not built for images (it is used by Google to scan Google Books/PDFs — ie. “clean” documents), we ran into a lot of issues. In retrospect, Tesseract was not a great choice for an OCR library, but because of our time constraint, we didn’t have enough time or people to create an AWS server. Tesseract’s one huge advantage is that it works completely offline. For our next version, we are hoping to build an AWS server to access more powerful OCR services and only use Tesseract if the user doesn’t have an Internet connection. Another challenge we ran into was in the pre-processing of an image. I hadn’t worked with UIImages (Swift’s image data type) all that much before this project and it was really difficult manipulating images so that Tesseract could produce the best and most accurate results. The most helpful pre-processing ultimately ended up being the binary translation of the image. The algorithm would turn the image into black/white pixels based on the amount of color around each pixel. This technique worked really well because it allowed the text to be more readable against the background. Other problems we encountered include extracting the name of the event, extracting the organization involved, reading text against a busy background, and much more. We’re hoping that a lot of these issues are solved when we use a stronger OCR service. Conclusion All in all, it was a very successful hackathon! As we were both freshman, we were definitley the underdog in this hackathon and we made a name for ourselves! Some professors became interested in our project and want us to build it out so that students can actually use it! We will likely spend the summer completing the project so that come fall, it will be widely used on campus! It was really exciting and well worth the lack of sleep. Check out the Devpost submission here!",
    "tags": "swift hackathon project reflection designProcess userExperience",
    "url": "/ios/2017/04/09/hackprinceton-2017-sofly-an-ios-app-to-scan-flyers-on-campus.html"
},

  
  
  
  {
    "title": "Swift Tips and Tricks February 2017: UI Text Field Styling and Force Touch App Shortcuts",
    "text": "Useful UITextField Extensions One of the side projects I’m working on is very frontend focused and after spending a lot of time on my designs, I really wanted to give my app a custom look and feel. As a result, I had of modify a lot of UI elements to fit my specific purposes. Here is an extension for a UITextField that gives two functionalities. The first is a text field with just a bottom border (think material design). The second adds a done button to the keyboard like so: It’s very useful for the number pad input which doesn’t the native “Done,” “Return,” etc. buttons on the keyboard itself. extension UITextField { // Set border to none in Storyboard and then call this function to add just a bottom border func addBottomBorder() { let bottomBorder = CALayer() let width = CGFloat(1.0) // Border width bottomBorder.borderColor = Colors.red.cgColor // Border color bottomBorder.frame = CGRect(x: 0, y: self.frame.size.height - width, width: self.frame.size.width, height: self.frame.size.height) // Frame bottomBorder.borderWidth = width // Apply border width self.layer.addSublayer(bottomBorder) // Add to text field self.layer.masksToBounds = true } // Add done button to number keyboard // Source: https://gist.github.com/jplazcano87/8b5d3bc89c3578e45c3e func addDoneButtonOnKeyboard() { let doneToolbar: UIToolbar = UIToolbar(frame: CGRect(x: 0, y: 0, width: 320, height: 50)) // Create keyboard toolbar doneToolbar.barStyle = .default // Set style let blankFlexSpace: UIBarButtonItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil) // Add blank spacing item to left of done button let doneButton: UIBarButtonItem = UIBarButtonItem(title: \"Done\", style: .done, target: self, action: #selector(self.doneButtonAction)) // Add done button doneToolbar.items = [blankFlexSpace, doneButton] // Create array of the items and add to toolbar doneToolbar.sizeToFit() // Fit to screen size self.inputAccessoryView = doneToolbar // Add toolbar to keyboard } // Function called when done button pressed // Put manually put under action func doneButtonAction() { self.resignFirstResponder() // Desselect } // MARK - End of adding done button to number pad } One of the things on my bucket list is to build and publish my own libraries. This would not only improve my own development and production speed, but also give you tools/UI tweaks that you might find useful. I don’t typically use libraries in my projects, but I do see their benefit. Because I’m focusing on the learning right now, I’ve been building my own “libraries” from scratch as a teaching tool for myself. Hopefully I can push one of those out to you all soon! Force Touch Shortcuts First you must setup your Info.plist file to give your app permission to use Force Touch app shortcuts. Here is a useful tutorial for doing just that: developer.apple.com // Launch a specific screen as initial VC private func launchInitialVC(viewController identifier: String) { self.window = UIWindow(frame: UIScreen.main.bounds) let storyboard = UIStoryboard(name: \"Main\", bundle: nil) let initialViewController = storyboard.instantiateInitialViewController() as! UINavigationController self.window?.rootViewController = initialViewController self.window?.makeKeyAndVisible() // Perform required segues and navigations if (identifier == Storyboard.editEventDetails) { // If launching edit details screen initialViewController.pushViewController(storyboard.instantiateViewController(withIdentifier: Storyboard.categorySelection), animated: false) let categorySelection = initialViewController.topViewController as! CategorySelection categorySelection.newEventNoCategory(self) } } Here are some other useful tools for giving your app Force Touch capabilities: Useful tutorial: http://samwize.com/2016/04/25/tutorial-on-creating-app-shortcut-with-3d-touch/ Design guidelines on shortcut icons: https://developer.apple.com/reference/uikit/uiapplicationshortcuticontype Hope this was useful! Sorry my blog posts have been fairly minimal in writing. I haven’t had a lot of time this semester because of my heightened work load. Hope I’ll catch a break soon so I can put some more time and thought into my pieces. Thanks!",
    "tags": "swift tutorial",
    "url": "/ios/2017/02/28/swift-tips-and-tricks-february-2017-ui-text-field-styling-and-force-touch-app-shortcuts.html"
},

  
  
  
  {
    "title": "Swift Camera Basics: Image Pickers and Action Sheets",
    "text": "I am designing and implementing a profile screen into Breathometer’s new app and one of the key components of many profile screens is a profile picture. I’m continuing to add to my toolbox of Swift skills so I set about learning how to get pictures from either the camera app or phone’s photo library. We need to build some basic frontend components so that we can have control over our code: ImageView: A view that our image from the camera/photo library will populate Button: To control when we want to upload the image Setup View Controller Class In order to use photos from the device, you must use the UIImagePickerControllerDelegate and the UINavigationControllerDelegate. These will give you the necessary functions to be able to retrieve your first image. The UIImagePickerControllerDelegate is responsible for initiating an image picker controller which then piggybacks with the UINavigationControllerDelegate that allows you to present the image picker using presentViewController() and dismissViewControllerAnimated(). Your view controller class should look like this: class ProfileScreen: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate { override func viewDidLoad() { super.viewDidLoad() } } Connect Storyboard to Code Create an outlet for the imageView and an action outlet for the button: @IBOutlet weak var profilePictureImageView: UIImageView! // Image view we want to display the image in @IBAction func selectProfilePicture(sender: AnyObject) { } Setup Image Picker Initialize the UIImagePickerController under the UIImageView outlet we created earlier: let imagePicker = UIImagePickerController() // Initialize an image picker view controller type Now we can create a function that will serve up the image picker. It accepts a sourceType as an input so that the image picker knows whether to show the actual camera interface or the photo library interface. There are three main parts in displaying an image picker: editing, source type, and presenting. Source type can be from the camera, the camera roll, or the photo library. The presentation component is what actually presents the imagePicker controller. func pickImage(sourceType: UIImagePickerControllerSourceType) { imagePicker.allowsEditing = false // Prevent editing // Three sources: .PhotoLibrary, .Camera, .SavedPhotosAlbum self.imagePicker.sourceType = sourceType // Type of image selection // Presenting image picker view controller on top of stack self.presentViewController(self.imagePicker, animated: true, completion: { print(\"Opening image picker view controller\") }) } Create Action Sheet We want the user to be able to specify if they want to use their camera or the photo library to select an image. We give them this option by creating an action sheet. An action sheet looks like this: Because we want this action sheet to appear when the button is pressed, we place this bit of code in the action outlet. The code is straightforward and intuitive: let imageSourcePicker = UIAlertController(title: \"Select Profile Picture\", message: \"Please select an image picker method\", preferredStyle: .ActionSheet) // Initialize action sheet type let cameraAction = UIAlertAction(title: \"Take a picture\", style: .Default, handler: { action in self.pickImage(.Camera) // Presents picker }) let cameraRoll = UIAlertAction(title: \"Choose from camera roll\", style: .Default, handler: { action in self.pickImage(.PhotoLibrary) // Presents picker }) // Add actions imageSourcePicker.addAction(cameraAction) imageSourcePicker.addAction(cameraRoll) presentViewController(imageSourcePicker, animated: true, completion: nil) Setup the UIImagePickerControllerDelegate Methods We must set the imagePicker delegate to self in viewDidLoad(): imagePicker.delegate = self // States that this view controller will also handle the events Now we can write the methods. There are two image picker functions are essential: imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) This function is triggered when you return a valid image. The selected image is passed in as part of the info object. func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) { if let pickedImage = info[UIImagePickerControllerOriginalImage] as? UIImage { // If returned a valid image profilePictureImageView.contentMode = .ScaleAspectFit // Set content setting profilePictureImageView.image = pickedImage // Set image } // Dismiss the image picker controller dismissViewControllerAnimated(true, completion: { print(\"Dismissed image picker controller\") }) } imagePickerControllerDidCancel(picker: UIImagePickerController) This is triggered when the image selection flow is cancelled func imagePickerControllerDidCancel(picker: UIImagePickerController) { // Dismiss the image picker controller dismissViewControllerAnimated(true, completion: { print(\"Cancelled image picker flow\") }) } Final Code: The complete source code looks like this: // Created by Kevin // Copyright © 2016 KevinHou. All rights reserved. // import Foundation import UIKit class ProfileScreen: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate { // Image picker controller delegate allows you to select an image from the camera or the photo library // Navigation controller delegate allows image picker to appear and dissapear like a normal view controller @IBOutlet weak var profilePictureImageView: UIImageView! // Image view we want to display the image in let imagePicker = UIImagePickerController() // Initialize an image picker view controller type override func viewDidLoad() { super.viewDidLoad() imagePicker.delegate = self // States that this view controller will also handle the events } @IBAction func selectProfilePicture(sender: AnyObject) { let imageSourcePicker = UIAlertController(title: \"Select Profile Picture\", message: \"Please select an image picker method\", preferredStyle: .ActionSheet) // Initialize action sheet type let cameraAction = UIAlertAction(title: \"Take a picture\", style: .Default, handler: { action in self.pickImage(.Camera) // Presents picker }) let cameraRoll = UIAlertAction(title: \"Choose from camera roll\", style: .Default, handler: { action in self.pickImage(.PhotoLibrary) // Presents picker }) // Add actions imageSourcePicker.addAction(cameraAction) imageSourcePicker.addAction(cameraRoll) presentViewController(imageSourcePicker, animated: true, completion: nil) } func pickImage(sourceType: UIImagePickerControllerSourceType) { imagePicker.allowsEditing = false // Prevent editing // Three sources: .PhotoLibrary, .Camera, .SavedPhotosAlbum self.imagePicker.sourceType = sourceType // Type of image selection // Presenting image picker view controller on top of stack self.presentViewController(self.imagePicker, animated: true, completion: { print(\"Opening image picker view controller\") }) } // MARK: - UIImagePickerControllerDelegate Methods func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) { if let pickedImage = info[UIImagePickerControllerOriginalImage] as? UIImage { // If returned a valid image profilePictureImageView.contentMode = .ScaleAspectFit // Set content setting profilePictureImageView.image = pickedImage // Set image } // Dismiss the image picker view controller dismissViewControllerAnimated(true, completion: { print(\"Dismissed image picker view controller\") }) } func imagePickerControllerDidCancel(picker: UIImagePickerController) { // Dismiss the image picker view controller dismissViewControllerAnimated(true, completion: { print(\"Cancelled: Dismissed image picker view controller\") }) } } Hope you found this helpful! You can find the source code on GitHub. Another Example of an Action Sheet Here’s another example of two different types of action sheets in case the first example was difficult to grasp. Text Input Dialogue: // Create text modal for adding an event name prediction let newCategoryAlert = UIAlertController(title: \"Enter Location\", message: \"Manually add a location suggestion\", preferredStyle: .alert) // Add text field item newCategoryAlert.addTextField { (textField) in textField.text = \"\" // No placeholder textField.autocapitalizationType = UITextAutocapitalizationType.words // Capitalization rules } // Add cancel action newCategoryAlert.addAction(UIAlertAction(title: \"Cancel\", style: .default, handler: nil)) // No action if cancelled // Add submit action newCategoryAlert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { [weak newCategoryAlert] (_) in // Get text field content let textField = newCategoryAlert?.textFields![0] // Force unwrapping because we know it exists self.currentCategory.locationFreq[(textField?.text)!] = 0 // New event name frequency entry with frequency of 0 // Update category data with new markov model DataManager.updateOneCategory(with: self.currentCategory, index: self.selectedIndex) // Refresh the table view on this page self.refreshData() })) self.present(newCategoryAlert, animated: true, completion: nil) // Present the alert // Regular Action Sheet let actionSheet = UIAlertController(title: \"Reset Predictions\", message: \"Are you sure you want to reset predictions? This cannot be undone.\", preferredStyle: .actionSheet) // Create alert action sheet // Create actions let resetAction: UIAlertAction = UIAlertAction(title: \"Reset Predictions\", style: .default, handler: { (alert: UIAlertAction!) -&gt; Void in // User pressed reset all predictions print(\"Reseting predictions\") self.currentCategory = Category(name: self.currentCategory.name, eventNameFreq: [ : ], locationFreq: [ : ]) // Reset predictions data DataManager.updateOneCategory(with: self.currentCategory, index: self.selectedIndex) }) let cancelAction: UIAlertAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: { (alert: UIAlertAction!) -&gt; Void in // User pressed cancel }) // Add actions actionSheet.addAction(resetAction) actionSheet.addAction(cancelAction) self.present(actionSheet, animated: true, completion: nil) // Present action sheet to user Hope you found this helpful!",
    "tags": "swift tutorial",
    "url": "/ios/2017/02/23/swift-camera-basics-image-pickers-and-action-sheets.html"
},

  
  
  
  {
    "title": "Data Types December 2016: Dictionaries and Symbol Tables",
    "text": "Recently, I’ve been learning a lot about different data structures to use in programs. Many of the common, most applicable, include linked lists, stacks, queues, double linked lists, and symbol tables. In this post I will give a brief overview of symbol tables, also known as dictionaries or hash maps, and provide some instances where symbol tables can greatly improve the quality of your code. When implemented correctly, this simple data type can improve efficiency, code readability, and run time. What are dictionaries and symbol tables? In a nutshell, a dictionary is a data type where a key and a value are matched. In order to access a value, you provide a key. To store a value, you map a key to a value. To cycle through all values in the array, you again must use keys. The easiest analogy for understanding how a dictionary works is to use just that: a dictionary. At it’s most basic form, a dictionary is a database of words that are assigned a definition. To find the meaning of a word, you must first look up the word. The word and its definition serve as the key and its value, respectively. In code, the value can be any data type. In some languages (i.e. Java), the data type is immutable and consistent across all values. In other languages (i.e. Javascript), the data type can vary from key to key and from word to word. In both cases described above, both the key and the value can take on any data type. For example, the analogy of a dictionary describes Strings mapped to Strings; however, that’s not always the case. For example, the best data structure for storing birthdays, is a String (the person’s name) mapped to a date type (the person’s birthday). For a frequency table of letters, the letter can be either a character, integer, or String and its values take on the form of integers. Example Syntaxes Javascript: var dictionary = []; // Create an empty array dictionary.push({ // Add an value to the dictionary key: \"keyName\", value: \"the value\" }); Swift: let dictionary = [ // New dictionary \"keyName\" : \"the value\", \"keyName\" : \"the value\" ] dictionary.append(\"keyName\" : \"the value\") // Add new item to dictionary Java: Source: arshajii at stackoverflow.com // Using hashmap Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(\"dog\", \"type of animal\"); System.out.println(map.get(\"dog\")); Python: dict = { 'Name' : ‘Kevin’, ‘School’. : ‘Princeton University’, ‘Year’. : 1 } print dict['Name'] # prints “Kevin” General Use Cases and Benefits I’ve found more and more use cases in the past couple of weeks for dictionaries. It’s often very useful when you have to store a potentially uncapped number of items that aren’t easily mapped to an index of an array. Unlike searching for items within traditional arrays which take linear time, dictionary calls are of constant time. Sometimes, items either simply cannot be matched to an integer index or prove too complicated to map to an ordered list of integers. Instead, it can be much easier to call values based off of their keys. Examples Here are a variety of instances where they can used: Retrieving data that doesn’t have an order Storing data that is faster with a reference key instead of an index Matching two different data types - connecting a enum value to an object type Pairing opposites so that you can use one to reference the other (“[“ matches to “]”)",
    "tags": "javascript swift java",
    "url": "/programming/2016/12/18/data-types-december-2016-dictionaries-and-symbol-tables.html"
},

  
  
  
  {
    "title": "Swift Core Data Basics: Storing App Data",
    "text": "Core Data is an important component of many complex apps. An app’s lifecycle is a complicated topic, but data management can be articulated as such: When you kill an app (or shut down your phone), any data that isn’t designed to persist between sessions will be deleted. The solution is to either use persist data with NSUserDefaults or by using Apple’s Core Data. Again, Core Data is another incredibly complex topic, but this blog post should give you the necessary tools to start using it. Setting Up Core Data First, create a page based application and check the Core Data options. This will initialize a Core Data stack in the AppDelegate.swift file as well as create a .xcdatamodeld file in your project’s parent folder. The heart of Core Data lives in this .xcdatamodeld file. Selecting the file will expose a powerful Xcode editor for creating entity types that you can use to store data between app sessions. You can double click the entity name to change its label and add attributes, relationships, and fetched properties. Here’s an overview of these three vocabulary words: Entity — specifies the name of the things you are creating. If you are creating a Core Data structure to store different people, the entity would be “People” Attributes — defines characteristics of an entity. If you again use the analogy of people, the attributes would be age, birthdate, etc. Relationships — connections between multiple entities. They can be “to-many” or “to-one.” For example, an employer would have a “to-many” relationship with his or her employees whereas an employer would have a “to-one” relationship with his/her boss. The Core Data editor is relatively intuitive. Create an entity by pressing the “Add Entity” button in the bottom left and add attributes and relationships using the corresponding plus buttons. Like objects and classes, the entity name is uppercase whereas attributes are camel case. Saving to Core Data Import the CoreData module in whichever file your view controller lives in. Core Data objects are returned as a variety of object types, but the most basic is a “NSManagedObject.” Below is an example of how you would retrieve Core Data: // Entity: “Person” // Attribute: “name” var people = [NSManagedObject]() let person = people[i] let name = person.valueForKey(\"name\") as? String // Xcode doesn’t know what type the value is Writing to Core Data This function is how to save a “name” String attribute to an entity, “Person.” func saveName(name: String) { let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate // Access the app delegate in order to save to Core Data let managedContext = appDelegate.managedObjectContext // Get managed object context let entity = NSEntityDescription.entityForName(\"Person\", inManagedObjectContext: managedContext) // Identify the entity // Create a new instance of Core Data and store temporary on the managedContext let person = NSManagedObject(entity: entity!, insertIntoManagedObjectContext: managedContext) person.setValue(name, forKey: \"name\") // Set an attribute do { try managedContext.save() // Save the temporary data to Core Data people.append(person) // Also add to local data so don't have to be constantly reading Core Data } catch let error as NSError { print(\"Could not save \\(error), \\(error.userInfo)\") } } Reading Core Data let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate // Get App Delegate let managedContext = appDelegate.managedObjectContext // Get the managed object context let fetchRequest = NSFetchRequest(entityName: \"Person\") // Get the entity objects from Core Data do { let results = try managedContext.executeFetchRequest(fetchRequest) // Fetch results people = results as! [NSManagedObject] // Store locally } catch let error as NSError { // Catch errors print(\"Could not fetch \\(error), \\(error.userInfo)\") } Those are the basics to Core Data! This is obviously a very simple example, but it’s integral to anyone learning to build iOS apps.",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/10/31/swift-core-data-basics-storing-app-data.html"
},

  
  
  
  {
    "title": "Design Tips and Tricks August 2016: Optimizing and Animating SVG Images",
    "text": "Overview Codepen is useful for rapid SVG development SVG's are really just markdown and can be manipulated as a chunk/contained element, or individual shapes Good Practices Good practice to name your shapes different things in Sketch — prevents styling issues if some had the same IDs Good practice to ungroup the SVG SVG doesn't really use shadows — generally stay away from them SVG's support consistent radiuses, but do not support individual points having different radius's in the same shape. If you want this, you have to flatten the shape into a path Optimizing SVGs Sketch and other vector generators generate a lot of extraneous text. Use SVGEditor online to optimize SVGs and remove the extra Sketch attributes, round decimal points to make the file smaller. Can also get rid of the artboard page tag. Group elements in the SVG a element so that you can apply classes&lt;/li&gt; &lt;/ul&gt; Types of Animations Can modify the SVG however you’d like using CSS — 2D transform, scale, rotate, skew (shears them), motion path (moving along a non-linear path), morphing (changing the actual shape itself. Same shape, but different appearance), line drawing (can draw closed SVG paths), clipping and masking Most basic: animate styling Advanced: filters, effects, distortions Looping animations, constantly doing its own thing Dynamic, animating based on some parameter Interaction, animate based on interaction — so delightful Design Tips Avoid the technical limitations, forget the CSS, etc. What would it make you love? What is attention grabbing? What’s a clean subtle way of animating something? Animating Using CSS Create animations using CSS Good practice to make the container really big initially so that nothing ever gets cropped Change the SVG tag ID to classes. So it’s better compatible with CSS. Good to put this in the beginning so you can see what’s going on: svg { transform-origin: top left; transform: scale(2); } When rotating: transform: rotate(27deg), remember SVGs have their own coordinate system. Make sure you set transform-origin: center. Transform-origin is a very finicky system. It’s best to use: transform-origin: 50% 50% instead of transform-origin: center If you want to transform around a specific point, set the transform-origin to that point. Best practice to use pixels so that older browsers can understand it. Can group elements together in css by doing: class1, class2, class3 { ... } Ways of Applying Animations Use the transition: 1s; property to animate a hover style change. You can also use Javascript to apply a class if you don’t wanna use the hover state. Can use @keyframes Makes animations very easy so that you’re just declaring the default style and the end style on hover. CSS automatically animates the transition. Create custom timing functions using cubic-bezier.com Transition: .8s cubic-bezier(.85, .02, .3, .82); Resources Video tutorial: https://www.creativelive.com/courses/icon-design-with-sketch-peter-nowell#class-info Simple example: https://codepen.io/pnowell/pen/wMYjZN Complex examples: Many complex types of animations: https://codepen.io/pnowell/pen/QyZVro Line drawing animations: https://css-tricks.com/svg-line-animation-works/ Morphing: http://codepen.io/chriscoyier/pen/DpFfE Tools mentioned: cubic-bezier.com https://petercollingridge.appspot.com/svg-editor Animations in Swift Tangential side note: How to create a really cool Uber-style splash screen animation on iOS: https://www.raywenderlich.com/133224/how-to-create-an-uber-splash-screen?utm_campaign=iOS+Dev+Weekly",
    "tags": "graphicDesign userExperience userInterface tutorial",
    "url": "/design/2016/08/28/design-tips-and-tricks-august-2016-optimizing-and-animating-svg-images.html"
},

  
  
  
  {
    "title": "A Summer’s Journey: What I’ve Learned and How I Should Keep Growing",
    "text": "This past summer (2016) I worked at a startup called Breathometer as an iOS frontend developer. Going into the summer, I was looking to work on a smaller team and get some real world experience building with Swift. What I Did Onboarding My big project was to design and develop the on-boarding experience for the company’s new app. With an estimated 20,000 projected users, my project would truly be making an impact right out of the box. I did a lot of research using various tools such as useronboard.com, a website that tears down onboarding flows, and Dribble (see my design inspirations here). I spent a lot of days simply researching and taking notes on what made certain mobile onboarding flows better than others. I learned a lot, including permission priming, clarity, the effect of animations, and much more. It was the culmination of my summer learning Swift 3.0, taking advantage of a lot of the new animation features that offered. I designed the onboarding flow in Sketch and coded the project itself in Xcode. User Analytics Another one of my projects was to integrate user analytics into one of the current apps, Mint. Originally, I was only supposed to set up remote push notification capabilities, but I ended implementing both Carnival, a push notification service, as well as Google Analytics. I learned a lot about user behavior tracking and audience segmentation. It was fascinating being able to crunch a massive amount of information and simplify a person’s data into human-readable categories. This project also required a lot of research, especially since I had to balance cost and features between nearly ten different push notification/analytics services. I presented my findings at many points during the research process. This included slideshows and even mini app demos. I learned how to articulate my ideas in the business world. Although there were many similarities to school, I noticed that a key difference was in the execution of a presentation. Because I was essentially pitching my opinions, I had to be prepared to not only back up my ideas, but also answer questions that I couldn’t plan for ahead of time. It really helped me become a better team member and software engineer. App Localization Finally, one of my smaller-scale projects was to internationalize Breathometer’s mobile app to expand the products internationally into five countries, including China. This involved localizing language, units, and media assets for each country. It was my first project and although it was anticipated to take a majority of my summer, I was able to complete it in only a week. It was my first time touching the Swift code base and helped me learn my way around Xcode. It was really neat learning the power of Xcode and the guidelines Apple has for localization. I watched a lot of WWDC videos and did a lot of research on various app translation platforms in order to successfully execute this project. I also learned how to write documentation so that other members of the team could replicate my work and add more localizations if needed. Other Small Projects I had an ongoing project mocking up screens for Breathometer’s new app. I also spent a couple of days doing app testing and reviewing documentation. What I Learned Learning Swift With the release of Swift 3.0, it was a opportune time to get my feet wet in the latest and greatest of iOS development, especially how to create cool animations. I became well versed with Xcode, Cocoapods, and other third party services (push notifications, analytics, localizations, etc.). I also got my first exposure to code efficiency. Working in a Smaller Company I had worked at Salesforce in summer of 2015 as a web developer and designer, gaining a lot of experience working in a large company setting. I also got a lot of experience with GitHub pull requests/issues and code readability/commenting. Design I did a lot of work in Swift building screens for both my onboarding experience and other aspects of the app. I ended up doing a lot of research on medical app UX and how to best implement animations. Non-Technical Skills Among the various technical skills I picked up, I also spent a lot of time writing documentation, reviewing other people’s code, testing, and researching. What I'll Do Moving Forward Given my new tools, both technical and non-technical, I will do a handful of things moving forward. I hope to continue teaching myself Swift 3.0 and always have at least a bit of iOS development in my life just so I can keep the rust off. I’m planning on using the research that I did to help me make decisions with my own apps in the future. Now that I have a good footing in animations, app design, and general Swift code structure, I can build better apps. I also hope to implement what I learned with user analytics into my personal website. Now that I can see the power of audience segmentation and data collection, it’d be really cool to see what types of people are accessing my site and from where. I’m a fan of internet privacy so I definitely won’t be collecting sensitive information, so for anyone reading this, don’t worry. In general, this was a great summer for me as a coder and as a team member. I learned a lot of both tangible and intangible skills that I’ll keep with me for a while and met a lot of interesting people from all walks of life. I owe it to my mentor and my manager at Breathometer, both of whom are incredible people and will do great things in the future. Thanks to everyone at Breathometer for making it a great summer and I look forward to applying what I’ve learned in the future!",
    "tags": "reflection internship",
    "url": "/life/2016/08/24/a-summers-journey-what-ive-learned-and-how-i-should-keep-growing.html"
},

  
  
  
  {
    "title": "Swift Navigation Basics: How to Setup a Tab Bar App",
    "text": "The Basics Setting up the Project Choose the Tab Bar template when prompted to create a new Xcode project Obviously it’s very easy to do this completely from scratch, but why go to the trouble if Xcode does it for you. Selecting this will set you up with a single storyboard file and two view controllers. Within the main.storyboard, you will find a “Tab Bar Controller” with two tabs already created. For learning purposes, delete the two view controllers so that you simply have a tab bar controller left. The “Main” Storyboard Even if you decide to diffract your storyboards into multiple files, you must always have a storyboard named “main.storyboard.” Xcode automatically looks for this file when it loads so it is imperitive that it can find it, otherwise your app won’t compile and/or could crash. Within that file you must have an initial view of some sort — this will be the first view that’s loaded in your project. Diffracting Into Multiple Storyboard Files Create storyboard in new file (new -&gt; iOS -&gt; User Interface -&gt; Storyboard) If you anticipate not using the navigation controller functionality, you can skip steps 3 and 4. Instead, drag a view controller onto the canvas and drag the “Tab Bar Item” onto the view. Drag a navigation controller onto the canvas and delete the Root Navigation Controller that it comes with. This tab bar navigation controller acts as a sort of placeholder for the tab bar controller in our main.storyboard file. Set this controller as the initial view controller. Now drag a view controller onto the canvas and connect it to the navigation controller using the ctrl/click drag feature. Drag from the navigation controller onto the view controller and select the “Root View Controller” relationship. Drag a reference object onto the main.storyboard and in the right sidebar, make sure to connect it to the correct storyboard file. A reference is like a collection of views and can be treated as such. It does not necessarily need to be connected to a tab bar controller and can be segued to like you would any view controller. Basically what a reference is doing is segueing to a completely different storyboard file. The reason why you need an initial view controller on each “.storyboard” file is because when you segue to the file, you need to know which view controller within the file to start on. Connect the Tabs to the Storyboard Navigate back to your second storyboard file and ctrl-click drag from the Tab bar controller view to the reference and choose: Relationship Segue: view controllers. This will connect the storyboard reference to the toolbar in the tab bar controller. You will see a new item appear on the tab bar controller nav bar at the bottom of the view. The nav bar items here are somewhat irrelevant. Because we are using multiple view controllers, we must set the tab bar items using the navigation controller we created in the referenced storyboard file. To set the image icon, label, etc., go to the storyboard file for that specific section of the app. If you used a navigation controller follow these nested steps. If you used a simple view controller, skip to the next step. Find the root view controller that we connected to the navigation controller and select the tab bar item element that’s found just below “View.” Drag this element into the “Navigation Controller Scene” under the group “Navigation Controller” so that it’s nested next to “Navigation Bar.” Now the icon will appear on all screens in this storyboard file. Select the “Tab Bar Item” that you dragged into the view controller. Use the options toolbar on the right to set the badge number, title, image, tag, and label position. You can also choose from default, iOS items like “Favorites,” “Contacts,” and “History.” Your final main.storyboard should look like this: Connect the Storyboard Controller to the Swift View Controllers Create a new Swift file for each of the UIViewController’s you’ve created, excluding the Tab Bar Controller. The reliable, minimum amount of code in this file is something like this: class FavoritesViewController: UIViewController { // Name of view controller override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } Use the options sidebar on the right to connect the UIViewController to a custom class. Select the name that you chose when creating the UIViewController class in your Swift file. Now, you should be set. You should have a set number of sections within your app. Each section has a “.storyboard” file, a single view controller within that storyboard marked as the initial view controller, a Swift UIViewController file connected to the storyboard view controller, and an icon in the toolbar. This is a bare bones example of an app with tab bar style navigation and defracted view controllers. My final product looked like this: Below are some additional customizations you can choose to add to your tab bar. Setting a Custom Icon When setting a custom icon, you basically have two images: one for an unselected state and one for the selected state. The selected state is generally filled whereas the unselected state is an outline. Using Sketch or a similar graphic design tool, create the PNG files with these sizes for both icons: image.png (1x version) is 30px x 30px image@2x.png (2x version) is 60px x 60px Some good guidelines: Removed all white from the image so that it was just a black image with a transparent background. Stay away from fills and use a 1 or 2px outline One for when you’re selected and one for when you’re not Allows you to have custom colors in the toolbar Import these images into Assets.xcassets. If you don’t want your icon color to change make sure you set “Render As” to “Original Image” located in the sidebar. Otherwise, it’ll use the default blue. Navigate to the tab item in your main.storyboard that you wish to add your custom image for. In the right sidebar, under options, there is a section called “Bar Item.” In this section, set the title (ie. the label) of your tab and select your image. Large Center Icon in Tab Bar A lot of apps have a toolbar with a large center button that appears over the rest of the toolbar. It’s often a different shape and emphasizes the importance of that center tab. I recently figured out how to do this. Essentially you are creating a custom class for the tab bar and overlaying a button on top of the middle tab item. It creates a UIButton that blocks and replaces the functionality of the normal middle item. Here is the class: class CustomTabBarController: UITabBarController { // Remember to the Tab Bar Controller custom class on your storyboard override func viewDidLoad() { // Called when tab bar loads super.viewDidLoad() self.setupMiddleButton() // Sets up button } func setupMiddleButton() { let menuButton = UIButton(frame: CGRect(x: 0, y: 0, width: 64, height: 64)) var menuButtonFrame = menuButton.frame menuButtonFrame.origin.y = self.view.bounds.height - menuButtonFrame.height menuButtonFrame.origin.x = self.view.bounds.width/2 - menuButtonFrame.size.width/2 menuButton.frame = menuButtonFrame menuButton.backgroundColor = UIColor.whiteColor() menuButton.layer.cornerRadius = menuButtonFrame.height/2 menuButton.setImage(UIImage(named: \"white-geo-flame\"), forState: UIControlState.Normal) // 450 x 450px menuButton.contentMode = .ScaleAspectFit menuButton.addTarget(self, action: #selector(CustomTabController.menuButtonAction(_:)), forControlEvents: UIControlEvents.TouchUpInside) self.view.addSubview(menuButton) self.view.layoutIfNeeded() } func menuButtonAction(sender: UIButton) { self.selectedIndex = 2 } } Conclusion A more decorated example of all of this can be found at: https://github.com/khou22/Swift-App-Templates/tree/master/SampleTabProject. A bare bones tab navigation app template can be found at https://github.com/khou22/Swift-App-Templates/tree/master/TabBarTemplate.",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/08/10/swift-navigation-basics-how-to-setup-a-simple-tab-bar-app.html"
},

  
  
  
  {
    "title": "Swift Tips and Tricks August 2016: App Navigation and Dates",
    "text": "Dates Dates can be pretty difficult to deal with sometimes simply because they’re technically numbers, but at the same time you have to worry about localization, converting to strings, etc. In the project I was working on for my summer internship, I had to deal with a lot of date-related algorithms so I came up with three functions that I figured could be useful to others. These three are in my NSDate extension so calling them is very simple Removing the time from a date so that all dates are from midnight that day. func dateWithoutTime() -&gt; NSDate { let dateFormatter = NSDateFormatter() dateFormatter.dateStyle = .MediumStyle // Doesn't include time component let dateToPrint: NSString = dateFormatter.stringFromDate(self) as NSString // Format into medium style string let dateNoTime = dateFormatter.dateFromString(dateToPrint as String) // Get a date from midnight that day return dateNoTime! } Usage: let currentDateNoTime = NSDate().dateWithoutTime() Returning the date from “x” days ago: func daysAgo(daysAgo: Int) -&gt; NSDate { let result = -24 * 60 * 60 * Double(daysAgo) return self.dateByAddingTimeInterval(result) } Usage: let sevenDaysAgo = NSDate().daysAgo(7) Sort an array by time: // recentSample is an array of HKQuantitySamples with the property: startDate recentSample?.sortInPlace({ $0.0.startDate.timeIntervalSinceNow &gt; $0.1.startDate.timeIntervalSinceNow // Sort by time }) View Navigation Navigation between different screens in your app can be confusing, with many different options, methods, and structure to choose from. There are four main types of navigation: Modal UIViewController — this is the simplest and most straightforward solution. It simply presents another view controller over the previous. UIPageControl — this is the familiar side swiping style in which multiple views are presented side-by-side and can be accessed by swiping left or right. I covered the basics in an old blog post UITabBarController — this is the structure of many multi-page, multi-sectioned apps like Facebook, Instagram, Photos, Music, and Twitter. They allow you to have multiple sections in your app and provide you with a simple, intuitive way of navigating via a tool bar. Custom — you really have to know what you’re doing if you want to create a custom navigation controller. It can be great for certain use cases, but it’s real pain if you’re collaborating with others because nothing is standardized. A quick, one-line command that has been very useful in my work so far is: self.navigationController?.popViewControllerAnimated(true) It essentially takes the user back to the previous screen. I don’t swear to know exactly what’s going on behind the scenes, but I think this works because of the way Apple organizes views. Views are arranged in a stack with the topmost being visible. This view is then “popped” and removed — revealing the view beneath that. That’s the general idea and this command is very versatile and widely-used. For more on view controllers, I found this site very useful: https://makeapppie.com/2014/09/15/swift-swift-programmatic-navigation-view-controllers-in-swift/. One last trick I learned with view controllers is how to pass information from one to another. A good example is to think about the Amazon app. When you browse for a product and finally click on one, you are taken to another page that reveals details about that specific product you chose. Obviously, they’re not going to make a new view controller for every single product — they’re simply using a template which they then populate according to the product details. They pass the product ID number from the browsing view controller to the detail view controller, then pull the detailed information from the server. In order to know which product you choose, the view controller you browsed in must pass some sort of ID to the detail view controller to indicate which product you chose. This type of interaction (passing information from the parent view controller to the child view controller) is very common and is very simple to do if you are navigating using segues. When segueing, the function exposes the upcoming view controller as a parameter called “segue”: override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) { if (segue.identifier == \"StepsToGraphSegue\") { let destinationVC = segue.destinationViewController as! GraphScreen destinationVC.title = “Hello World” } } The view controller we are segueing to is the “GraphScreen” and has the property, “title” as a String. Just before segueing, you can pass any data from the first view controller into the second by setting a variable in the second view controller. I would like to do a blog post exclusively on app navigation techniques in the future. I hope you found this blog post helpful! See you in the next one.",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/08/03/swift-tips-and-tricks-august-2016-app-navigation-and-dates.html"
},

  
  
  
  {
    "title": "Swift Segmented Control Basics: How to Setup and Utilize Segmented Controls",
    "text": "Introduction I’m beginning to dive deeper and deeper into Swift and iOS development, but I came to the realization a couple days ago that my summer internship at Breathometer is already drawing to a close. My goal for the summer was to be able to develop my own apps from scratch by the time I leave. I’m slowly but surely gaining the confidence the and the technical prowess to be able to make more and more complex apps. I’ve already learned some of the key parts of most apps like views, outlets, structures, pagination, table views, animations, 3rd party integration, threading, push notifications, graphing, localization, and more. Another basic piece of any app is segmentation. Everyone’s used an app with the familiar segmented control bar — many of Apple’s stock apps use this component: In this blog post, I will be covering the basics of segmented controls and how to use them within an app. Like I’ve mentioned in other blog posts, the intent of these posts is not only to instruct others, but also to help me internalize what I’ve learned and give me a place that I can reference later. I guess I’ll call it my “modern” notebook. So, without further ado, here are some of the key parts of segmented controls. Setup Storyboard Drag a “Segmented Control” component into the main view and apply constraints if needed. Use the right sidebar options to name the different segmented buttons. Initiate the Segmented Control Open up the Assistant editor and pull up the view’s View Controller. Ctrl click and drag to create an outlet (object, not action) for the segmented control component. Name it whatever you want (in this case we’ll call it “segmentedControl”) and use the type UISegmentedControl, storage weak. @IBOutlet weak var timeFrameControl: UISegmentedControl! Adding Functionality Using the same window setup, ctrl click and drag to create an outlet Action with the event: “Value Changed.” Again, give it a name (here I’ll be using “indexChanged”) and set type to UISegmentedControl and arguments to sender. This action function will be triggered every time the index is changed. In order to get the value it was changed to, you must call the “segmentedControl” object we created earlier and call the “selectedSegmentIndex.” Here’s an example: @IBAction indexChanged(sender:UISegmentedControl) { switch segmentedControl.selectedSegmentIndex { // Get the selected index case 0: print(“Picked first segment”) case 1: print(“Picked second segment”) default: Break; } } That’s about all there is to it! They’re very simple and straightforward, but can be very useful and powerful in the right situation. I’ve noticed that a common use case is when you want to apply different filters onto data sets. In my project right now, I am segmenting data by time into “Week,” “Month,” and “Year.” Those three options serve as my segments and my UITableView updated every time my index changes. Other use cases include contact filtering, segmenting information into categories on the same view controller, etc. Hope you found this helpful! Tutorial primarily from: http://www.ioscreator.com/tutorials/segmented-control-tutorial-ios8-swift",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/07/26/swift-segmented-control-basics-how-to-setup-and-utilize-segmented-controls.html"
},

  
  
  
  {
    "title": "Persist Data: Storing Values Locally Using Swift",
    "text": "Overview One of the benefits of iOS development that I wasn’t entirely used to being a web developer, is the ability to store data locally. Apple allows apps to store data on the device in the form of persist data. Persist data can be read between app sessions and is only deleted when you remove the app from the device. This information is one of the many things the uninstall app prompt is referring to when it asks if you would like to delete the app and all its data. It is primarily used for small things like strings, boolean, integers, etc. and not for serious things like images (for that, you should use core data). Reading and writing persist data is remarkably simple, but this blog post contains some tips that will prevent crashes and improve your coding structure. There are three basic elements to persist data: keys, writing, and reading. Keys Keys are string phrases or words that reference a specific value or set of values in persist data. Information is stored with a key reference and can be retrieved and written using that same key. These keys are incredibly important and any typo can quickly cause bugs or crashes in your app. As highlighted in my blog post in the “Preventing Code-Breaking Typos with Structures” section, it is best practice to include keys as constants in a structure. This will ensure that your keys are all only explicitly typed out in one place. It makes debugging significantly easier. Here is what your keys structure will look like when storing persist data: struct Keys { static let calorieGoal = \"calorieGoal\" } Writing NSUserDefaults (aka Persist Data) are stored using the NSUserDefaults.standardUserDefaults() initializer. Instead of calling this every time you wish to use persist data, it’s easier to simply create another structure within your Constants.swift file containing the following: struct Constants { static let defaults = NSUserDefaults.standardUserDefaults() } Now, instead of writing NSUserDefaults.standardUserDefaults() every time, you can simply type Constants.defaults. To write data locally into persist data, simply use this command: let value = 2000 // Dummy data Constants.defaults.setInteger(value, forKey: Keys.calorieGoal) // Writing an integer value for a key Reading Reading data is also very simple, but there is one thing to keep in mind. If you have no written any data yet, attempting to read that nil value will result in a crash. It’s good practice to add a conditional before retrieving your persist data to prevent such conundrums from occurring. The code is shown here: if (Constants.defaults.objectForKey(Keys.calorieGoal) != nil) { // Ensure the data exists caloriesGoal = Constants.defaults.integerForKey(Keys.calorieGoal) // Reading data for key } That’s pretty much all there is to it. Now you can store data between app sessions! Hope you found this helpful.",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/07/25/persist-data-storing-values-locally-using-swift.html"
},

  
  
  
  {
    "title": "Swift TableView Basics: How to Create and Populate Tables",
    "text": "Project Objectives I was instructed to integrate HealthKit information — specifically pulling steps data — into Breathometer’s upcoming app. I’m realitively new to Swift having only started a month ago, so this project was a way for me to get more familiar with the language and IDE. My task was to pull the data from HealhtKit then populate a table within a page of the app. This data could then be used for visualizations, analysis, etc. Here are my main learning goals for this project: Learn how to integrate with HealthKit and pull data from a “3rd party” source (see last post) Learn the fundamentals of table views, populating views, etc. so that I can develop a better understanding of Swift frontend Setting Up the Table Create a table view property @IBOutlet weak var tableView: UITableView! // Connect to the storyboard element Initialize the class and connect it to the storyboard. class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { ... } Setup different UITableView properties // Imperative func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 0 } // Imperative func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { return UITableViewCell() } func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { // Triggered when you select the row at indexPath } Connect dataSource and delegate You must also link the table view dataSource and delegate to the view controller like so: Register Cell Class In the view controller/tableviewdelegate/datasource class, you must register the class for the table view: override func viewDidLoad() { super.viewDidLoad() self.tableView.registerClass(UITableViewCell.self, forCellReuseIdentifier: \"cell\") // tableView.setup(scrollable: false) // Turn off scrolling } Adding Data to Display First step is to declare the data. In this case we’re going to use dummy data: var items: [String] = [\"Hello\", \"World\", \"Swift\"] Using this data, we can now set the number of rows in our table view by calling the function: func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return items.count } Create the Cell func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cell:UITableViewCell = self.tableView.dequeueReusableCellWithIdentifier(\"cell\") as UITableViewCell cell.textLabel?.text = self.items[indexPath.row] return cell } Handling Cell Selection func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { println(\"You selected cell #\\(indexPath.row)!\") } Final code class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { @IBOutlet var tableView: UITableView var items: [String] = [\"We\", \"Heart\", \"Swift\"] override func viewDidLoad() { super.viewDidLoad() self.tableView.registerClass(UITableViewCell.self, forCellReuseIdentifier: \"cell\") } func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return self.items.count; } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cell:UITableViewCell = self.tableView.dequeueReusableCellWithIdentifier(\"cell\") as UITableViewCell cell.textLabel?.text = self.items[indexPath.row] return cell } func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { println(\"You selected cell #\\(indexPath.row)!\") } } Custom Cell Layout By default, all table view cells have the text label and detail label values. To create a custom cell with more than just those two labels, follow these steps: Drag a Table View Cell onto your UITableView. This will automatically generate a cell labeled “Prototype” that contains a nested content view. Treat this content view as any other view and drag UI elements like text fields, images, etc. onto the content view. Now, create a new Swift file for the UITableViewCell class to connect your Table View Cell to some code. Initialize the class like so: class StepsCell: UITableViewCell { // IB Outlets go here: override func awakeFromNib() { super.awakeFromNib() // Initialization code } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Configure the view for the selected state } } Hook up the UI elements in the content view with IBOutlets in your UITableViewCell class. It’s identical to how you would do this for any other view controller. You can add constraints, stack views, etc. Just treat the content view as you would a blank view controller. Now to access those UI elements in your main Table View Controller, you must use the “dequeueReusableCellWithIdentifier” command. Dequeue basically describes the manner in which data loads and unloads. If you imagine the scrolling items as a wheel, as the topmost item disappears, it reappears on the bottom. The table view is endlessly recycling the same x number of cells. This is a good approach for memory management especially when dealing with 100+ cells. Once you’ve stored the cell, you can then modify the various UI elements and return the cell to populate the table view. func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cell = self.tableView.dequeueReusableCellWithIdentifier(\"StepsCell\")! as! StepsCell // Same identifier as class name cell.dateLabel.text = \"January \\(indexPath)\" cell.textLabel?.text = String(indexPath) return cell } Other Helpful Topics For populating table views with data from asynchronous requests, it can be helpful to reload your table view once you know all your data is complete // Reload in main queue dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in self.tableView.reloadData() // Reload }) Tutorial from: https://www.weheartswift.com/how-to-make-a-simple-table-view-with-ios-8-and-swift/",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/07/22/swift-tableview-basics-how-to-create-and-populate-tables.html"
},

  
  
  
  {
    "title": "Introduction to HealthKit: Reading Steps, Weight, Height, and More",
    "text": "Project Objectives I was instructed to integrate HealthKit information — specifically pulling steps data — into Breathometer’s upcoming app. I’m realitively new to Swift having only started a month ago, so this project was a way for me to get more familiar with the language and IDE. My task was to pull the data from HealhtKit then populate a table within a page of the app. This data could then be used for visualizations, analysis, etc. Here are my main learning goals for this project: Learn how to integrate with HealthKit and pull data from a “3rd party” source (not really a 3rd party but it's an API all the same) Learn the fundamentals of table views, populating views, etc. so that I can develop a better understanding of Swift frontend (see next post) Authorizing and Integrating with HealthKit Nested within the authorizeHealthKit function: func authorizeHealthKit(completion: ((success:Bool, error:NSError!) -&gt; Void)!) { } Get Healthkit information to read let healthKitTypesToRead = NSSet(objects: HKObjectType.characteristicTypeForIdentifier(HKCharacteristicTypeIdentifierDateOfBirth)!, HKObjectType.characteristicTypeForIdentifier(HKCharacteristicTypeIdentifierBiologicalSex)!, HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeight)!, HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBodyMass)! ) Healthkit information to write let healthKitTypesToWrite = NSSet(objects: HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBodyMass)! ) To actually get data from healthkit, create a function within the class. This one, for example, gets your birthdate from health kit: func getBirthdateFromHealthKit() -&gt; AnyObject { var birthdate: AnyObject! do { birthdate = try healthKitStore.dateOfBirth() } catch { print(\"No birthday listed, or permission denied\") birthdate = \"Not Set\" } return birthdate } More complex example Pulls steps from Healthkit (x number of days) and show it in a table view by creating a new function within the HealthKitManager class. Returning steps by per day for x number of days: func readStepsByDay(sinceDaysAgo: Int, completion: (([HKQuantitySample]!, NSError!) -&gt; Void)!) { let type: HKQuantityType = HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierStepCount)! let currentDate = NSDate().dateWithoutTime() // Get current date var stepData: [HKQuantitySample] = [] for daysAgo in 1...sinceDaysAgo { let startDate: NSDate = currentDate.daysAgo(daysAgo) // Set start date let endDate: NSDate = currentDate.daysAgo(daysAgo - 1) // Next day let predicate = HKQuery.predicateForSamplesWithStartDate(startDate, endDate: endDate, options: .None) // Set parameters // Getting all step counts within that day let sampleQuery = HKStatisticsQuery(quantityType: type, quantitySamplePredicate: predicate, options: [.CumulativeSum], completionHandler: { (sampleQuery, result, error ) -&gt; Void in if let queryError = error { completion(nil, queryError) // End the master function print(\"Completion nil\") return } if completion != nil { // Create KHQuantitySample for this day let units = HKUnit.countUnit() var quantity: HKQuantity = HKQuantity(unit: units, doubleValue: 0.0) if let value = result?.sumQuantity()?.doubleValueForUnit(HKUnit.countUnit()) { quantity = HKQuantity(unit: units, doubleValue: value) } let currentData = HKQuantitySample(type: HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierStepCount)!, quantity: quantity, startDate: startDate, endDate: endDate) // Initiate HKQuantitySample stepData.append(currentData) // Add data to array if stepData.count == sinceDaysAgo { // If got all data // If all days are properly fetched -&gt; return [HKQuanitity] sample to master function stepData.sortInPlace({ // Sort by time $0.0.startDate.timeIntervalSinceNow &gt; $0.1.startDate.timeIntervalSinceNow }) completion(stepData, nil) // Return error free } } }) self.healthKitStore.executeQuery(sampleQuery) // Fire the call } } Extensions Used extension NSDate { func daysAgo(daysAgo: Int) -&gt; NSDate { let result = -24 * 60 * 60 * Double(daysAgo) return self.dateByAddingTimeInterval(result) } func dateWithoutTime() -&gt; NSDate { let dateFormatter = NSDateFormatter() dateFormatter.dateStyle = .MediumStyle // Doesn't include time component let dateToPrint: NSString = dateFormatter.stringFromDate(self) as NSString // Format into medium style string let dateNoTime = dateFormatter.dateFromString(dateToPrint as String) // Get a date from midnight that day return dateNoTime! } } Usage: HealthKitManager().readStepsByDay(100, completion: { (mostRecentSteps, error) in // Catch error if( error != nil ) { print(\"Error reading weight from HealthKit Store: \\(error.localizedDescription)\") // Feedback return // End function } for dayCount in mostRecentSteps { print(dayCount.quantity.doubleValueForUnit(HKUnit.countUnit())) } })",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/07/22/introduction-to-healthkit-reading-steps-weight-height-and-more.html"
},

  
  
  
  {
    "title": "Xcode Best Practices July 2016: Troubleshooting, Pull Requests, Cocoapods, and More",
    "text": "Troubleshooting Xcode Xcode can be a great IDE with powerful tools like autocompletion, but sometimes it does have a tendency to “break.” Errors that pertain to linking are often examples of Xcode glitching out and temporarily self-imploding. These issues can be solved by following these steps: Clean: Command + Shift + K Deep Clean: Command + Option + Shift + K Delete derived data: These are like Xcode’s caches and builds. Each project has a derived data file. To wipe these clean, go to your finder. Hold option, click “Go” in the taskbar, and select “Library.” Next, go to Developer/Xcode/DerivedData/. Select all the files within that folder and delete them by moving them to the trash. Quit Xcode (Attempt to) rebuild your project Pull Requests Git and other version control systems can be confusing things. I, along with most of the developers I know, use GitHub for version control and collaboration on projects. I use GitHub on the daily (I have almost a 300 day commit streak on GitHub right now) and am still intimidated by pull requests. From what I understand, they’re essentially clean ways of merging two branches and grouping commits together. When working in groups settings, this is incredibly useful both in a developer sense and a moderator sense. The code is branched so it does not accidentally break the master branch (good when you’re updated a popularly used repo or working on a group project). Usually pull requests are significant features or builds. All commit made during a pull request are also grouped together and can easily be reviewed all together by the person who is reviewing the pull request. On GitHub, you can comment on pull requests do other discussion-based actions until the code meets satisfaction and can be integrated into the main branch. A helpful tool I just learned to see more details about a contribution or the owner of a commit is to add “.patch” to the end of any commit URL. It will show information about who made the commit, when, the differences, etc. — essentially all the raw data associated with a commit. Check it out here one of my recent commits: https://github.com/khou22/khou22.github.io/commit/0e0a5649775f46eb0a856b54a410216c634e8631.patch. (Updated June 26, 2017) Using Structures for Global Constants In addition to using structures to store file names as I mentioned in an earlier blog post, it is good practice to create a file, usually named “Constants.swift”, containing global structures to store values. These constants are usually accessed by multiple view controllers and make it easier to standardize. It’s similar to the difference between CSS and SASS. In CSS, you must re-type the values every time, but in SASS you can create and use variables. It makes modifying values much, much easier. Here is an example of standardized colors: Declaration struct Colors { static let mainColor = UIColor(red: 225.0/255.0, green: 105.0/255.0, blue: 15.0/255.0, alpha: 1.0) static let darkGrey = UIColor(red: 100.0/255.0, green: 100.0/255.0, blue: 100.0/255.0, alpha: 1.0) static let grey = UIColor(red: 230.0/255.0, green: 230.0/255.0, blue: 230.0/255.0, alpha: 1.0) static let lightGrey = UIColor(red: 207.0/255.0, green: 207.0/255.0, blue: 207.0/255.0, alpha: 1.0) } Usage Instead of typing in the same RGB values every instance you need a specific color, you can simply call: let backgroundColor = Colors.mainColor // It's very easy to change an entire projects theme color simply by modifying a single value in the Constants.swift file Other Application Other useful things to store in structures in the Constants.swift file include: screen size (SCREEN_WIDTH = UIScreen.main().bounds.size.width), device types, file names, image names, API keys, storyboard IDs, segue IDs, and any other global constants. It’s good practice to do this and I encourage you to try it out. It’ll make your life signficantly easier in the long run. Commenting on Code and Readability Commenting code is one of those practices that is well known, yet not well performed. It’s incredibly important in both personal and team settings. While most people at least understand the necessity, fewer strive for code readability. It is better practice to write readable code with fewer comments using function names, variable names, etc. than to write confusing code with paragraphs of comments. If you’ve ever looked at my code, I am obviously guilty of this and I think the majority of developers could be more conscious about it. Code readability also includes code refactoring — the process of a restructuring existing code but not changing it’s actual function. To a user, refactoring code should go unnoticed with the exception of maybe load times, speed, etc. It is important to make sure your code is concise as well as well commented and readable. Avoid hard coding and use “for” loops when you can. Another element of this (I’m not sure if this is technically considered refactoring because it’s not so much resturcting) is to remove all print statements and breakpoints once the specific feature is completed and working properly. Cocoapods Cocoapods are good and bad depending on who you are. For those that don’t know, cocoapods are libraries built by third parties that you can integrate in your Xcode project with minimal difficulty. They’re similar to Node packages, Python modules, etc. When developing web apps, I love using libraries, especially Node packages; however, there is a danger in using third party code. Even though it makes your life much easier, in the long run, it could break your app or website. For example, one developer broke thousands of projects by changing 11 lines in their package. It’s a hilariously realistic and daunting story that could apply to your app. The reason why some are opposed to Cocoapods (including one of my coworkers), is exactly that. If you have too many third party libraries, one mess up could break your project and it would be an ordeal to sift through hundreds of libraries and thousands of files in order to find what was responsible for bringing down your app. In my opinion, I think you should strike a balance. Cocoapods and other package managers are very useful and take a lot of the heavy lifting out of tasks for developers, but at the same time it’s dangerous to become ultra-reliant on them. You do not want your precious project to be held up entirely by code that you don’t have control over. A quick note to self that’s somewhat technical: when using Cocoapods, you must open the .workspace file in Xcode not the .xcodeproject file! I hope you found this post useful. I’m learning a lot about Xcode and especially about how to work in teams. There’s always room for growth and everyone can get better at it. Talk to you in the next one!",
    "tags": "swift xcode packageManager github",
    "url": "/configuration/2016/07/20/xcode-best-practices-july-2016-troubleshooting-pull-requests-and-more.html"
},

  
  
  
  {
    "title": "Swift Tips and Tricks July 2016: Extensions, Structures, and Outlet Collections",
    "text": "Extensions Extensions are a great way of creating custom, and most importantly, global, functions attached to certain variable types. For example, a good example of this is when you want to use a UIColor derived from a hex value as opposed to an rgb value. Another (less useful) example is if you want to create a function that deletes the second letter of a string or returns the number of 2’s in a number. These types of functions can be accomplished through extensions. They essentially allow for custom functions and properties, but their real strenth is that they’re global. They’re lightweight and make your code very readable. Here is the hex example and usage: Declaration extension Int { // Can attach it to any Int value func hexToColor() -&gt; UIColor { let netHex = self // ‘self’ refers to the value the function is attached to let red = Float((netHex &gt;&gt; 16) &amp; 0xff) let green = Float((netHex &gt;&gt; 8) &amp; 0xff) let blue = Float(netHex &amp; 0xff) return UIColor(colorLiteralRed: red / 255.0, green: green / 255.0, blue: blue / 255.0, alpha: 1.0) } } Usage: let backgroundColor: UIColor = 0x222222.hexToColor() Structures Structures operate similarly to extensions in the sense that they’re globally accessible. They allow the user to create global functions and variables, but unlike extensions, they do not have to be attached to a specific variable type. It is simply called by the name of the structure and the ensuing variable/function name. Here is a simple example: Declaration struct MyData { static var exampleVal: string = “Hello world” static func greet(name: string) { print(“Hello \\(name)”) } } Usage: let val = MyData.exampleVal // Hello World let name = “Kevin” // Kevin MyData.greet(name) // Hello Kevin Preventing Code-Breaking Typos with Structures A common, and easily preventable, mistake in coding is to misspell image names, file paths, and other strings that could break your code. My coworker taught me this simple trick using structures to diminish the likelihood that this would happen. Essentially, you create a structure called “Images” or “FileNames” that contains all the file name strings. Instead of typing out the string every time, which can result in typos, call the variable within the structure that contains that specific file name. This way, all the strings are in one place and can easily be checked for misspellings. Here’s an example of the situation described above: Declaration struct Images { // It can be useful to line them up in columns static let onboardingBackgroundImg = \"onboarding-background-img\" static let filledPlotPoint = \"filled-plot-point\" } Usage: let exampleImage = UIImageView() // Initialize the image view exampleImage.image = UIImage(named: Images.onboardingBackgroundImg) // Set the image Outlet Collections This is a small feature in Xcode that helps you refactor your code, making it look cleaner and more readable. In the app I was building, I had five UIImageViews that I essentially treated the same — mass editing their properties. Initially, it took five lines of code, one for each image, to modify them. As an experienced coder, this felt wrong and looked wrong. The lines were basically all the same except for the names of the variables. I discovered you could group different storyboard elements together in an outlet collection — an array of UI elements. Now I could cycle through the array using a ‘for’ loop and easily make mass edits. Here’s an example: Declaration @IBOutlet var flyingIcons: [UIImageView]! // Right-click and drag from this outlet to the UIImageView you would like to include in this array Usage for icon in flyingIcons { icon.alpha = 0.75 } }",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/07/20/swift-tips-and-tricks-july-2016-extensions-structures-and-outlet-collections.html"
},

  
  
  
  {
    "title": "WWDC 2015: Mysteries of Auto Layout",
    "text": "Mysteries of Auto Layout, Part 1: https://developer.apple.com/videos/play/wwdc2015/218 Auto Layout Definition: Constraints lead to equations that layout your views automatically Maintanable Layouts Stack View - new to iOS 9 Arrange views linearly, vertically Manages constraints of your subviews Horizontal or vertical Stack Views are basically for grouping elements together Distribution property - can distribute across the axis Example: Fill, fill equally, fill proportionally, etc. Stack View options: Axis: Vertical/horizontal Alignment: Fill (spread itself across entire space)/leading/center/leading Spacing (spacing between elements) Can stack within Stack Views After everything is stacked within the same Stack, can add constraints so it correctly fills the superview Control drag from Stack View to superview to add new constraints that will pin it to the screen edge New options: Content hugging priority, content compression resistance priority Can resist changing sizes (useful for things like tab menus, buttons, etc.) Start with Stack View, use constraints as needed Changing Constraints Don’t add/remove constraints Instead, activate and deactivate constraints Never deactivate self.view.constraints Weird things will happen Keep references to constraints you need, don’t just blindly deactivate all of them Can animate constraints Use self.view.layoutIfNeeded Create size constraints programmably intrinsicContentSize = automatically makes the size constraint the same size as the content within the view Use proportions — will likely be more successful Don’t use points Constraint Priorities Don’t set a constraint as “required” Don’t use equal priorities Set priorities a little higher or lower than the defaults: Scale from: 1-1000 Low: 250 High: 750 This is good for localization — stretching UILabels, etc.",
    "tags": "swift xcode",
    "url": "/ios/2016/07/01/wwdc-2015-mysteries-of-auto-layout.html"
},

  
  
  
  {
    "title": "Digital Design: The Process from Concept to iOS App",
    "text": "This is my second week working at Breathometer, a startup that builds breath analysis devices to help users better understand their health. We are nearly finished with Mint — a device that measures various chemical levels in your breath to give you an overall oral hygiene report. Another device, called Slim, measures the amount of acetone in your breath and uses it as a metric to calculate the amount of fat your body is burning. The development stages of Mint are essentially complete, but Slim is still in the development process. As a frontend developer and designer, I’ve been assigned the role of creating the onboarding user flow. Because I’ve never had any formal training or business-level experience in design, my design process can most definitely be improved. I met with my manager and mentor today to discuss this project, and we’ve decided that the most valuable course of action for me is to go through the entire design process correctly, so that I can internalize it for the future. I’ve done some preliminary research, and the steps are as outlined below. Low Fidelity In order to conceptualize and put thoughts into something tangible, I used low-fidelity designs. Low-fidelity prototyping is often the first step when designing and allows you to quickly explore ideas. According to the site, usability.gov, low-fidelity communicates are typically either sketches or wireframes. These are intended to lay out potential ideas to pursue while also conveying the structure and overall flow. These two stages are often considered the ideation and concept validation points in the design process. High Fidelity After many cycles of low-fidelity designs, I finally arrive at an overall idea that resonates with me. I can now take the quick, generally black and white, as well as conceptual-focused sketches and wireframes, migrating them over to what are called high-fidelity designs. The designs still evolve, but the overall motif remains largely the same. High-fidelity designs are meant to add “color” to your designs in both a literal and figurative sense. They are no long static, one-pagers. Instead, they accurately represent the entire product — every screen is generally accounted for and a functional UI is sometimes implemented. While buttons and API calls are likely not active, the general user flow and UX can be seen. High-fidelity designs begin in software programs like Sketch, then move to other rapid prototyping tools to gain that barebones functionality. From experience, it is very important that nearly every aspect of the design be reflected in your high-fidelity designs, at the very least in Sketch. As both a designer and software developer, it is much easier to collaborate and quickly build an MVP when all the frontend components are laid out in full view. Rather than coming up with hex values, widths, etc. on the fly, all properties should be known by the end of the high-fidelity design stage. It not only makes the engineer’s life much easier, but also the designer’s. Visual Here is a chart that appropriately sums up the progression from low to high-fidelity designs in relation to functionality. Animations Animations are the final step in the digital design process. There’s many different methods in approaching animations — mainly the timing in which the designing takes place. Animations can be a part of the high-fidelity stage or simply a part of the development process. My coworker explained it to me from the lens of a developer and designer. Based on his experience, it’s easier to implement animations while he is building the app, rather than when he is designing. Many of the complex and intriguing animated designs you see online are generated in animation software with little regard to the capabilities of the developer. This is both good and bad in the sense that it allows for free creative thinking, but it can be next to impossible to correctly build in the actual app. He recommended to me that I do the same as him. As someone who both designs and codes, it makes more sense for me to throw in the animations during the building process. It will not only save time and effort, but also ensure that I don’t design a next to impossible animation that isn’t realistic. Conclusion Overall, design is a very complex and time-consuming process. It often seems unnecessary to go through all the steps I’ve listed above, but it’s incredibly important if you wish to design an engaging user experience. If you’re still not a believe that design is the centerpiece of anything and everything, I encourage you to watch Tony Fadell — designer of the first iPod and CEO/designer of Nest — during his Ted Talk on the Secret of Design. Hope you enjoyed this post!",
    "tags": "designProcess userExperience userInterface",
    "url": "/design/2016/07/01/digital-design-the-process-from-concept-to-ios-app.html"
},

  
  
  
  {
    "title": "WWDC 2016: Advances in UIKit Animations and Transitions",
    "text": "Video (must be played in Safari): https://developer.apple.com/videos/play/wwdc2016/216/ New animations with UIKit in iOS 10 Create natural, smooth feeling, responsive animations Interpolation and Pacing Dotted = actual position Solid = final/goal position Timing function: Linear Ease in Ease out Ease in and out Springs: Overshoot the value and come back to the goal position It affects the pacing of the animation iOS 8 (WWDC 2014) introduced interruptible animations If you interrupt an animation, the object no longer jumps or switches velocities so abruptly UIVIewPropertyAnimator new features in iOS 10 Interruptible animations Scrubbable animations Reversible animations Broad availability of timing functions (not just the usual four) Rolling animations can be modified Animations as Objects Can get the state and position of an animation at any point state: .inactive, .active, .stopped isRunning: true, false isReversed: true, false Animations are now objects, not just API calls That way you can store, modify, and get values from it Can also stop an animation: animator.stopAnimation (false) Pass false in so that the object can stay right where it is in its path Can do something with it later If you pass in true, it still stays in its place, but the animation is over for all intensive purposes To scrub an animation: animator.fractionComplete = fraction Like the Interpolation library The fractionComplete doesn’t involve time So the timing function doesn’t affect it The fractionComplete relates to the position Reversing animations brings an object back to its start position Animation will be as if it never started → .start Can also add an animation that brings it back to its start position But the animation will be complete → .end iOS 10 can set custom your own timing functions UICubicTimingParameters(animationCurve: .linear) // For linear UICubicTimingParameters(controlPoint1: CGPoint(x: 0.0, y: 1.0), controlPoint2: CGPoint(x: 1.0, y: 0.0)) // For custom timing curve Also changed UISpringTimingParameters UISPringTimingParameters(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity velocity: CGVector) Keyframe animations Basically regular animations, but with multiple points Example: Can add multiple x/y positions to an animation to create a complex path instead of just from point A to point B Can do point A → B → C → … → Z External References https://medium.com/swift-and-ios-writing/a-quick-look-at-uiviewpropertyanimator-a107fb9da5b5#.2y9t95ixn https://developer.apple.com/reference/uikit/uiviewpropertyanimator https://developer.apple.com/reference/uikit/uiviewanimating",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/06/29/wwdc-2016-advances-in-uikit-animations-and-transitions.html"
},

  
  
  
  {
    "title": "Making a Simple Page Based Application in Swift",
    "text": "Introduction I’ve been starting to hunker down and learn the basics of Swift. Because my current project at work is to build an onboarding screen, there will likely be some sort of side scrolling element to it — similar to an iPhone homescreen. Because I knew no Swift-specific data structures, principles, etc. going into this, I was learning from the ground up. It was initially really challenging because I had no basic knowledge to go off of. The intent of this side project was to learn the fundamentals of Swift, especially how Views work. Like all programmers, I googled my way through this project. This tutorial turned out to be a gold mine, but there were plenty of visits to StackOverflow and Apple’s developer documentation. Tutorial I started by creating a single view application. Instead of selecting the “Page-Based Application” template, I decided it would be best to start from scratch so that I could really understand the meat of what was going on. I created a simple landing page with a button that would connect to the “Pager” — the page view controller that houses all of the screens that would populate the side-scrolling view. Next, create the “Pager” by dragging a “Page View Controller” next to the main “View Controller”. You also should create a file named “Pager.swift”, import the UIKit module, and create a UIPageViewController class like so: Import UIKit class Pager: UIPageViewController { } Go to your Main.storyboard, select the Page View Controller, and using the options on the right side, set the class to “Pager.” This connects the storyboard pager view controller element to your Pager.swift code. Also ensure that the “Transition Style” is set to “Scroll.” To reach the “Pager” in the user flow, right click (or control click) the button on the “View Controller” and drag it over the the “Pager.” This will generate a list of potential segue options. Segues are essentially roads between views. In this case, I went with a Show Detail (e.g. Replace) segue. If you build and run this application and press the button, you will be greeted by a blank screen. Don’t worry, we’ll now populate the pager screen. Create two more swift files named “PageOne.swift” and “PageTwo.swift”. Create a view controller in each: import UIKit class PageOne: UIViewController { // For the second page name it ‘PageTwo’ override func viewDidLoad() { print(\"First page did load\") } } Create two view controllers in your Main.storyboard. They do not need to have a segue from any other page. Just change the class to PageOne or PageTwo so that they connect to your swift files. You should also change the Storyboard ID to match the class name for each View Controller. Now, we will be working in the Pager.swift file to build the actual page-based functionality. In order to access the PageOne and PageTwo views, we create two shortcut functions that significantly condense our code in the future. Create these functions inside of your Pager class: func getPageOne() -&gt; PageOne { // Retrieve the view return storyboard!.instantiateViewControllerWithIdentifier(\"PageOne\") as! PageOne } func getPageTwo() -&gt; PageTwo { // Retrieve page two return storyboard!.instantiateViewControllerWithIdentifier(\"PageTwo\") as! PageTwo } We want to set our default page to page one. In our viewDidLoad() function for the class Pager, set the first page to page one. // Loads the first page immediately after the pager loads setViewControllers([getPageOne()], direction: .Forward, animated: false, completion: nil) To populate our pager, we must create an extension of the Pager with type: UIPageViewControllerDataSource. A Page View Controller relies on the dataSource to allow users to not only swipe between/access pages, but also to create the famous page control dots that iPhone users have grown accustomed to. Your Pager extension should look like this: extension Pager: UIPageViewControllerDataSource { } To allow users to swipe, you must set up the prebuilt functions viewControllerAfterViewController and viewControllerBeforeViewController. It essentially recognizes which way you are scrolling to, and sets the new page. Add these two functions to your Pager extension: func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -&gt; UIViewController? { // Swiping forward if viewController.isKindOfClass(PageOne) { // If you're on page one // We want to swipe to page two return getPageTwo() } else { // If on page two // End of all pages return nil } } func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -&gt; UIViewController? { // Swiping backward if viewController.isKindOfClass(PageTwo) { // If on page two, can swipe back to page one return getPageOne() } else { // If on the first page, can't swipe back return nil } } Right below those functions, we want to create the page control dots: func presentationCountForPageViewController(pageViewController: UIPageViewController) -&gt; Int { // The number of dots in the page control dots return 2 } func presentationIndexForPageViewController(pageViewController: UIPageViewController) -&gt; Int { // On the first dot when you first load the OnboardingPager // Swift automatically handles switching pages and updating the page control dots // Updates when setViewControllers is called return 0 } Lastly, we want to connect the dataSource to the extension by calling: // Set dataSource: incorporates the pages dataSource = self // Refers to the Pager extension of type UIPageViewControllerDataSource I also recommend setting a background color to the Pager so that the page control dots can be visible. Do this inside of your class Pager: UIPageViewController’s function viewDidLoad(). view.backgroundColor = .lightGrayColor() // Set background color to white Source Files Here are some of the key, completed source files (note: I named the Pager “OnboardingPager” instead of “Pager” as I stated in the tutorial): ViewController.swift OnboardingView.swift PageOne.swift PageTwo.swift",
    "tags": "swift xcode tutorial sourceCode",
    "url": "/ios/2016/06/28/making-a-simple-page-based-application-in-swift.html"
},

  
  
  
  {
    "title": "WWDC 2016: Internationalization Best Practices",
    "text": "Video (must be played in Safari): https://developer.apple.com/videos/play/wwdc2016/201/ Formatters for Dates/Times Don’t use a set date format Chinese and English are opposite for example Can’t have a fixed format Use the predefined .shortStyle/.mediumStyle/etc. Works for both dates and times Automatically formats it for each language Can use a template for custom things But use .setLocalizedDateFormatFromTemplate(“mYd”) Will try and make it correct when it’s a different language https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/ Formatters for Names: Show names the correct way with PersonNameComponents() Ask for the .long/.medium/.short/.abbreviated format Will support different langauges Name parsing → full name to a set of components Uses a statistical model Not parsing based on a formula Supports multiple languages Other: In labels, don’t clip lines — must have the entire character showing Multi-line labels, consider changing the line spacing UIFont.preferredFont(forTextStyle: UIFontTextStyleBody) Automatically adjusts line height for different languages Icons are really important Avoid using words/numbers in icons “Photos” is a good example of an icon that doesn't tie it to a specific language Not left to right or right to left Good for all languages Create dedicated artwork for right to left languages But if you just want to flip the image, you can use the existing API App Store Names Users are most likely to download apps in their language Don’t always assume users will type in English They might run OS in English, use keyboard from another language Must test this before deploying Localized Screenshots Localized content/keyboard Want to see the experience they will have in their language Custom features — examples: Support for lunar calendar Templates for non-English/non-Western cultures Types of Formatters: ByteCountFormatter DateFormatter DateComponentsFormatter DateIntervalFormatter NumberFormatter PersonNameComponentsFormatter MeasurementFormatter",
    "tags": "swift xcode reflection",
    "url": "/ios/2016/06/22/wwdc-2016-internationalization-best-practices.html"
},

  
  
  
  {
    "title": "Internationalizing Your iOS App in Xcode 7",
    "text": "Localization in Swift XCode 7.3.1 ** This is a blog post in progress ** Prepare XCode Project Go to the project page → Localizations → Add a new language and select all the resources Sometimes the storyboards aren’t all localized. If that’s the case, you must manually localize storyboards. To do this, on the info panel on the right, can press localize and add the languages you want. Prepping Code This is for hard coded strings in the code You can wrap them in: NSLocalizedString(String, comment: String) For instances where you have hard coded strings and variables within the hard coded strings, you must use the String format setup. For example: // Old setup: let localizedString = NSLocalizedString(“Test Results - (interval)”, comment: “Test results”) // New setup: let localizedString = String.localizedStringWithFormat(NSLocalizedString(“Test Results - %@”, comment: “Test results date string”), interval) The “%@” represents a placeholder in the String that will not be translated into another language, and can therefore be used as a bookmark to inject a variable into a localized string. Adding in translations To Export: Delete Localizable.strings in parent so that there’s no duplicate Change the .xliff file (found it useful to use a simple IDE like Atom or Sublime to quickly change text. I added in ‘French: ‘ at the beginning of every translation so that I would know when the app recognizes a NSLocalizedString type) To Import: Import the .xliff file Add the newly created Localizable.strings file (in the parent) to the build phases (Target –&gt; Build Phases –&gt; Copy Bundle Resources –&gt; Add) — http://fullscreensoftware.blogspot.co.il/2011/09/xcode-4-and-localizablestrings-issue.html Build and run To add other languages: Localize the “Localizable.strings” file and replace the content with the translations for that specific language ** For Line Breaks ** Typically denoted by a “\\n” in the code It doesn’t format correctly in the .xliff file When you import it back into the project, it won’t recognize your translation. Instead, modify the Localizable.strings file directly. Syntax as such: “{Original…}\\n{Original…}”=“French: {Original…}\\n{Original…}” You must add in the “\\n”s because Swift exports the “\\n”s as actual line breaks, but doesn’t convert the line breaks back into “\\n”s on import Solution: Change ‘\\n’ to another placeholder like ‘[[n’ Before it is injected into the frontend, replace all instances of ‘[[n’ to ‘\\n’",
    "tags": "swift xcode",
    "url": "/ios/2016/06/20/internationalizing-your-ios-app-in-xcode-7.html"
},

  
  
  
  {
    "title": "Making a Wood Turned Segmented Bowl with Inlaid Letters",
    "text": "** Blog post is currently unfinished ** I recently finished what is probably my last major wood turning project in high school. As this is my last semester at Lick-Wilmerding, I anticipated the need to end my high school career in the shops on a strong note. For that reason, I decided on an ambitious project: building a segmented bowl with my nickname, “KHou,” inlaid on the side of it in a different type of wood. I had come across a video on YouTube of someone who used the scroll saw to inlay letters of a different type of wood.",
    "tags": "",
    "url": "/wood/2016/05/20/making-a-wood-turned-segmented-bowl-with-inlaid-letters.html"
},

  
  
  
  {
    "title": "Designing My YouTube Channel Artwork",
    "text": "I finally got around to designing my own YouTube channel artwork. Similar to a Facebook cover photo, YouTube’s channel artwork is the second most important image to your YouTube brand. I had just released my first “high quality” video and I wanted to improve the rest of my YouTube channel as well. Click here to visit my YouTube channel. Design Process I found a template online that detailed the dimensions for each YouTube platform. For every YouTube client (ie. mobile, TV, computer, etc.), there is a specific cropping method. I used the dimensions to create a design that would look good on all possible devices. I wanted to go for a minimalistic look — flat and simple seems to be the trend these days among digital design. At first, I wanted to incorporate some aspect of woodshop in my channel artwork. I tried many different methods, both subtle and blaring, to weave in my passion for woodshop. After trying and failing to add things like a wood background to my design, I decided to leave it out entirely. It would be evident for anyone looking at my channel to know that I loved woodshop. I didn’t feel like I could produce a design that I was proud of if I tried to incorporate woodworking — it would be clear I was forcing it. I looked at the channel artworks of some of my favorite tech and wood YouTubers. I found that YouTubers that loved wood used more image based, “stack”-style cover photos; however, my tech YouTubers favored the a cleaner look. Being a web developer and digital designer, I was in favor of the latter. Finished Product Desktop Browser This is typically what a YouTuber user would see. This is the crop size for a desktop browser. A mobile device would be the same height as this, but the side edges would be trimmed inward a tiny bit. Full Size (For TV Clients) This is the full resolution image. The only time a user would see this entire image would be on the TV.",
    "tags": "graphicDesign",
    "url": "/design/2016/05/07/designing-my-youtube-channel-artwork.html"
},

  
  
  
  {
    "title": "GitHub Octocat Design Challenge Winner",
    "text": "I designed a logo for a project of mine that took a unique spin on the GitHub Octocat mascot. I entered it into a hackathon challenge and it was picked as the best overall design. GitHub Education has hosted this design competition many times for various hackathons. At the MenloHacks hackathon a couple weekends ago, my group and I built Execute Order 66, a Chrome extension that automatically censors vulgar language in GitHub repos. Design Process I took inspiration from the name of our Chrome Extension: Execute Order 66. For those out there who are not Star Wars fans, Execute Order 66 was the directive that commanded the assassination of all the Jedi. Similarly, our extension orders the destruction of all curse words in your repositories. It was easy decision to include the Octocat mascot in my design since we were creating a GitHub developer tool. Because of the dark nature of the phrase “Execute Order 66,” I felt that the overall design should reflect this. As a result, I designed with largely a black color palette and a Sith lightsaber to add a red highlight. For the background, I used the iconic “light speed” design from Star Wars. Overall, I was pretty happy with my design. For one, because this was our second project, I had to design this logo in about 10 minutes. Secondly, I got a lot of exposure for it on Twitter! It was nice to know that people out there appreciated my design. It strengthened my confidence in my design skills and I’m beginning to now identify as a designer as well as a programmer. If I were to do this logo again, I would increase the resolution of my design. It’s a little low resolution, but it’s not noticeable on the Chrome app store. Feel free to download the Chrome Extension. Competition Results Below are screenshots and links of the various Twitter announcements. About 15 people “liked” my design and I even got a couple retweets! GitHub Education Announcement Major League Hacking Shoutout My Original Tweet",
    "tags": "hackathon graphicDesign",
    "url": "/design/2016/05/01/github-octocat-design-challenge-winner.html"
},

  
  
  
  {
    "title": "Uber Scheduler: Calling Ubers Alarm Clock Style",
    "text": "This past week, a group of friends and I attended a hackathon, MenloHacks ñ an MLH (Major League Hackathon) sponsored event. This was my first hackathon and was also for one of my two partners. Our group of 3 high schoolers built an Uber scheduling app for both iOS and Android. Our app would essentially allow users to schedule uber rides ahead of time at a set date/time. Another core segment of our app was the recurring schedule component: an alarm-clock-style feature that could automatically call you an Uber on specific weekdays (i.e. every Monday, Wednesday, and Friday at 5:45 PM). We were able to complete our product within the allotted 24 hour time period. We even had time to build another project - a Google Chrome extension that censors your vulgar GitHub commits (see Execute Order 66). I worked as the primary front end engineer and also designed the UI/UX from scratch. We built our app in Ionic using AngularJS for the front end and Python for our Google Cloud Engine backend. We wanted to have discipline when building the app so we concentrated on maintaining good coding practices such as commenting code, building in a scalable fashion, as well as programming code that was organized and efficient. Due to the nature of Google Cloud Engine, our app is potentially scalable to millions of users. Design Scroll down for images of my designs This was one of my first times designing an app from ground zero. Often times I would design pages as I went or only design a single component. Because I realized the importance of the role of UX/UI design in app development, I decided to take the time to plan each page out down to the pixel. While the rest of my group coded the backend on Google Cloud Engine, I spent about 5 hours working with Sketch to come up with a simple and streamlined user flow as well as a beautiful UI. I even mocked up different variations and iterated upon my designs. I used Google Material Design as inspiration and a starting block because we enjoyed its styling methodology. While many of our components were variations of existing components (a small percentage were directly copied), some of the icons and components were of my own creation that I designed to mimic the overall Material Design feel. Building the App After spending about a quarter of the 24 hours designing, I began to transition to building the front end. One of my group members had already built a somewhat functional landing page, so I set about building the other pages. I found it significantly easier to build the front end when I had an accurate design to go off of. In fact, the time I saved likely outweighed the 6 or so hours it took to create the designs. I created Angular services for everything relating to global variables or functions. By doing this from the beginning, it made my group member’s job of connecting the front end to the backend significantly easier. I used some open source Angular packages that sped up the coding process. the two packages I used were for the date selection modal and for the time selection modal. They can be found here: Time Picker Modal: https://github.com/rajeshwarpatlolla/ionic-timepicker Date Picker Modal: https://github.com/rajeshwarpatlolla/ionic-datepicker Overall, the development process went very smoothly and our group worked together well. Because this was my first hackathon, I was both happy and pleasantly surprised when we were chosen as the best overall hack that day. What's Next? We’re all pretty excited about the app and we feel it has a lot of potential. We are currently polishing up the front end and working on authorizing our app with Uber. The app has many bugs (as expected) that we’re hoping to clear up so that we can begin user testing at our high school. We hope to release it on the app store soon. In the long term, we think our app could integrate with other ride-sharing services, such as Lyft, and automatically request from the service with the cheapest rate, fastest pickup time, etc. Stay tuned! External Links: Go to our Devpost project page to see what we submitted for the Hackathon. It contains screenshots, a narrative of our build, and more. For our complete source code see our GitHub Repo. Design Mockups (Created with Sketch) I created multiple designs and iterated on previous versions. Due to the 24 hour time restriction, I only created two major versions. Below are some designs that show the evolution of the app design. I used Sketch to create the designs. Version 1 Version 2 (Final Designs) App Screenshots (Working MVP)",
    "tags": "hackathon ionic javascript html css python project designProcess userExperience userInterface",
    "url": "/ios/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html"
},

  
  
  
  {
    "title": "First Hackathon: 24 Hours Straight of Coding",
    "text": "The Experience On the weekend of April 16 and 17, I attended my first ever hackathon: MenloHacks. Located at the Menlo School in Menlo, California. It was a high school hackathon sponsored by Major League Hacking (MLH) - the official sponsor for high school hackathons. I was a little bit nervous largely because I didn’t know what to expect. Part of my anxiety stemmed from the fact that I had no real baseline as to how good of a coder I really was. I had an incredibly successful summer at Salesforce where I was coding alongside other college students, but I wasn’t sure how I’d fare with the added time pressure, constraints, etc. at a hackathon. I have a group of four friends at school who I work on and Independent Study with. We’ve been working together for the semester (about 4 or 5 months now) and we decided to enter this hackathon together as a group. Unfortunately, one of our group members was unable to attend due to logistical issues, but he was an important part of our group nevertheless. So in the end, it was me (a senior), a freshman, and a junior. With the exception of the junior, the freshman and I had never attended a hackathon before. We both had the same mixed feelings coming in, but I think it’s safe to say that those feelings were alleviated almost immediately. The general atmosphere was great and the excitement was palpable. For many, this was also their first hackathon so I did not feel alone. Furthermore, my group had a great idea and an incredible team of three that we already knew had great chemistry. We each had our own roles and had worked together enough before that we knew our tasks already. I was the frontend developer and the designer. The Projects Our project idea coming in was to build an Uber scheduling app - an iOS and Android app that would allow a user to schedule rides ahead of time or on a recurring schedule. If you would like to know more, I encourage you to see my blog post on the Uber Scheduler. We finished this project about 3 hours before the hacking period ended so we decided to build a fun Chrome Extension called Execute Order 66. This nifty extension cleans up your GitHub repository, hiding all curse words or vulgar language that would potentially be harmful (ie. recruiters, Hackathon judges, etc.). If you would like to know more, please see the Project Page. We worked extremely hard on our two projects for the duration of the Hackathon. The official hacking period began at 12 PM on April 17th and it ended at 12 PM on April 18. It was so much fun having a full 24 hours to code that I ended up not sleeping a wink that night. I took occasional stretch breaks, but for the most part I was dialed in. I actually stayed up for 39 hours that weekend without so much as a minute napping between April 17 and April 18. I had an admitted students reception on the 18th directly after the hackathon and luckily, the adrenaline from the hackathon still carried over. Results The event was very well run and did a good job at providing the creature comforts that make any high schooler’s day: food and snacks. The 24 hour period went by incredibly quickly and the overall experience was very memorable. As an added bonus, our main project - the Uber Scheduler - won the first overall prize. I also won a personal award for my logo design for Execute Order 66 (see blog post).",
    "tags": "project reflection hackathon",
    "url": "/life/2016/04/18/first-hackathon-24-hours-straight-of-coding.html"
},

  
  
  
  {
    "title": "Introduction to Services in AngularJS",
    "text": "What Are Services? In a nutshell, services are a way of making functions and variables global. They can be injected as dependencies in any controller and its functions/variables can be accessible across controllers. Creating the Service Create service file angular.module(‘moduleName’, ['ionic', 'ngCordova']) .factory(‘serviceFunction’, function() { var testVariable = \"Kevin\" return function() { console.log(testVariable) }; }) .factory(‘serviceVariable’, function() { var testVariable = \"Kevin\" return testVariable }) Make sure the names are consistent Add ‘geocoding’ (the module name) to the module’s dependency angular.module('scheduledRidesCtrl', ['ui.bootstrap', 'geocoding']) The way I explained this to a friend is basically using the 'ui.bootstrap' analogy. Bootstrap in its most basic form is a a compilation of CSS styling and Javascript for functionality. When we include the 'ui.bootstrap' dependency, we are essentially including that Javascript file to be used in this controller. It's not different when we create our own services. A service is basically a group of Javascript functions. If the services is included as a dependency, it will load all those Javascript functions and make them available to use in that controller. It's a good way of selectively loading specific Javascript files so that not all of your Javascript files have to load for every page. Include the name of the service function in the controller’s function(…, …) .controller('scheduledRidesCtrl', function ($scope, $ionicPopup, $timeout, serviceFunction, serviceVariable) { } Can now use the functions and variables in any controller that you included the dependency for. Simply call: serviceFunction(); // Runs the service function console.log(serviceVariable); // Uses the service variable as a regular variable",
    "tags": "ionic javascript angularjs",
    "url": "/web/2016/03/13/introduction-to-services-in-angularjs.html"
},

  
  
  
  {
    "title": "Getting Started with the CNC Router",
    "text": "Cutting Topographical Maps on the CNC Router This blog post is primarily for my own notes. It's a work in progress. As my project progresses and I encounter more challenges, I will write about them here. Process Import map from Google Earth plugin on SketchUp Geo-location → Add location Select show terrain Export from sketchup as a .3ds Import on Rhino as “Component / 3D Model” Set size Set Toolpath Cut “3D Rough Toolpath” first Cut “3D Finishing Toolpath”",
    "tags": "",
    "url": "/wood/2016/03/06/getting-started-with-the-cnc-router.html"
},

  
  
  
  {
    "title": "Installing and Getting Started with Python",
    "text": "Downloading and Installing Python First download Python from the Python website. After installing, you can install other helpful tools including Pip. Save the file as a Python file (extension: “.py”) and navigate to the file in your terminal. Run the Python script using your terminal to install: $ python get-pip.py so In order to install globally you may to run a “sudo” install: $ sudo python get-pip.py Installing Python Modules $ sudo pip install requests The entire Python setup was surprisingly easy. I had never programmed in Python before and only knew that it was good for backend scripts. I really wanted to expand my coding knowledge so I decided to take up Python. Here are some useful “projects” that got me going: Web Scraping Simple math formulas Using cool modules Calling API's like iTunes and YouTube Encoding and decoding JSON data Downloading files and making a progress bar Dynamic Progress Bar This project helped me gain a better understanding of how Python can communicate with the user via the Terminal interface. Reference: http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console for i in range(100): time.sleep(1) sys.stdout.write(\"\\r%d%%\" % i) sys.stdout.flush() Constructing and Interpreting JSON data This was great way for me to learn how Python data structures worked. It helped me gain a good foundation in simple variable types as well as how to communicate between different programming languages. For example, Javascript often sends data in the form of a JSON object. By doing this project I was able to pass data from my Javascript into my Python script and vice versa. Reference",
    "tags": "python",
    "url": "/programming/2016/01/31/installing-and-getting-started-with-python.html"
},

  
  
  
  {
    "title": "Getting Started with Ionic: First Impressions, Tips, and Notes to Self",
    "text": "Working on the Project Open server: dev_appserver.py Uber Run the Project To run a project locally. This will automatically reload when a file is saved/modified. ionic serve To run in xcode simulator. This will automatically start the iPhone 6 simulator and run your app. ionic run ios -l -c -s To get it on “Ionic View” for my iPhone. This will upload your project to your online account and make it accessible via your iPhone “Ionic View” app. ionic upload Opening the Project in Xcode Open the xcode project on xcode. Will allow you to build and sync it to your device. /Users/KevinHou/Documents/Programming/UberScheduler/UberScheduler/platforms/ios Then click run Logging Into Ionic (Command Line) To log in to Ionic. This will allow you to upload your app to Ionic view. ionic login #Starting a New Ionic Project Good reference for starting a new Ionic project: Link",
    "tags": "ionic",
    "url": "/ios/2016/01/28/getting-started-with-ionic-first-impressions-tips-and-notes-to-self.html"
},

  
  
  
  {
    "title": "How to Build a Dropdown Menu Using Pure HTML and CSS",
    "text": "Here is how to make a bare bones dropdown navigation menu using only CSS and HTML. There are more complicated ways of doing this using JQuery, but I’ve found this method a lot easier. I pulled code from a variety of sources — the CSS mostly came from here. Source Code HTML &lt;ul class=\"nav-ul\"&gt; &lt;li class=\"nav-li\"&gt; &lt;a class=\"nav-a\" href=\"#\"&gt;Work &amp;#9662;&lt;/a&gt; &lt;ul class=\"nav-ul dropdown\"&gt; &lt;li class=\"nav-li\"&gt;&lt;a href=\"#\"&gt;Apps&lt;/a&gt;&lt;/li&gt; &lt;li class=\"nav-li\"&gt;&lt;a href=\"#\"&gt;Projects&lt;/a&gt;&lt;/li&gt; &lt;li class=\"nav-li\"&gt;&lt;a href=\"#\"&gt;School Projects&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"nav-li\"&gt;&lt;a class=\"nav-a\" href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; CSS CSS: .nav-ul{ /*padding: 0;*/ list-style: none; background: #f2f2f2; } .nav-ul .nav-li{ display: inline-block; position: relative; line-height: 21px; /*text-align: left;*/ } .nav-ul .nav-li .nav-a{ display: block; padding: 8px 25px; color: #333; text-decoration: none; } .nav-ul .nav-li .nav-a:hover{ color: #fff; background: #939393; } .nav-ul .nav-li .nav-ul.dropdown{ min-width: 125px; /* Set width of the dropdown */ background: #f2f2f2; display: none; position: absolute; z-index: 999; left: 0; } .nav-ul .nav-li:hover .nav-ul.dropdown{ display: block; /* Display the dropdown */ } .nav-ul .nav-li .nav-ul.dropdown .nav-li{ display: block; } Hope this helps!",
    "tags": "html css sourceCode",
    "url": "/web/2016/01/14/how-to-build-a-dropdown-menu-using-pure-html-and-css.html"
},

  
  
  
  {
    "title": "OS X Shortcuts and Productivity Hacks",
    "text": "Happy holidays everyone! Here are some useful OS X tips and tricks that I thought I would share: 1) Command Line Shortcut: Aliases Aliases in a traditional desktop UI are essentially shortcuts to other directories or files in your system. In general, they’re used to access objects hidden deep within your file structure or when you want a file in two seperate locations and you don’t want to copy it over. Aliases in your Terminal are similar in the sense that they provide shortcuts to files, but unlike in a traditional desktop UI, the aliases can be used at any level in the file system. An alias is not a shortcut file or folder. Instead it is a command that can be typed at any point. For example, if I access the folder ‘myFolder’ often, I would create an alias to basically trigger the function ‘cd /Users/Kevin/Documents/myFolder.’ To do this, open ‘~/.bash_profile’ and add the following line: alias myFolderShortcut='cd /Users/Kevin/Documents/myFolder' The .bash_profile file is a customizable list of user-contributed functions, aliases, etc. In some cases, the .bash_profile is loaded automatically when the Terminal starts, but I’ve found that mine doesn’t do this. Instead I type: source .bash_profile whenever I first open a Terminal session. Now, you can type alias myFolderShortcut anywhere in your Terminal session and you will be directed to myFolder. 2) Faster Mac Dock Productivity The Mac Dock is a great and simple way to quickly access your favorite applications without having to open your Applications folder; however, the half a second it takes to trigger the Dock reveal and then the extra second it takes for the Dock to slide into view can waste precious time. I don’t like having the Dock visible on my desktop because it takes up previous screen real estate. I found this video on Flipboard that explains how to “correclty” use the Mac Dock in the fastest and most efficient way possible: Here is a screenshot of my setup: 3) Creating and Converting Plain Text Files on the Mac Plain text files (ext. ‘.txt’) are fantastic ways to remove styling on text, share information between apps, etc. I realized I didn’t know how to create plain text files on my Mac. I researched it and found the solution to be quite simple. The stock Text Edit application on OS X has a native function to convert text files into plain text. In TextEdit, navigate to Format-&gt;Make Plain Text. The keyboard shortcut command is: Command + Shift + T. It works similarly when converting Plain Text to Rich Text (ext. ‘.rtf’). If there is existing text, the application will prompt you with a warning before it converts. Hope this helped!",
    "tags": "terminal unix osx",
    "url": "/configuration/2015/12/25/os-x-shortcuts-and-productivity-hacks.html"
},

  
  
  
  {
    "title": "TheaterJS: How to Add and Use Javascript Libraries",
    "text": "I am working on getting some neat, open-source Javascript libraries ported into my website. I’m trying to teach myself how to incorporate the pleathorea of user contributed libraries into my site. Over the summer, I taught myself how to use NPM dependencies — elegeant packages of Javascript code that would perform preset functions. With the millions of NPM packages out there, I wanted to use it in my own site. Unfortunately, I haven’t been able to build a compiler that would allow me to use NPM dependencies in my code. I’m still interested in using other people’s code in my apps so I’ve resorted to Javascript libraries. I came across a really cool one called TheaterJS. Here’s a quick demo Turns out, the steps to import Javascript libraries are very straightforward and simple. Download the library Move the file into your source code. It doesn't matter where. Link the '.min.js' file in the &lt;\\head&gt; of your HTML file like so: &lt;script src=\"path/to/library/TheaterJS-2.0.1/dist/theater.min.js\"&gt;&lt;/script&gt; &lt;!-- TheaterJS --&gt; Now you can use the library by calling the functions defined in the documentation. TheaterJS mimics a human chat transcript. An actual demo can be found on my landing page. Here's how to use TheaterJS's functions (this is the actual code I used on my landing page): theater .addActor('kevin', { speed: 0.6, accuracy: 0.7 }) .addScene('kevin:Kevin Hou', 2000) .addScene('kevin:Welcome!', 1000) .addScene('kevin:Kevin Hou', 2000) .addScene(theater.replay.bind(theater)) Hope this helped!",
    "tags": "javascript",
    "url": "/web/2015/11/29/theaterjs-how-to-add-and-use-javascript-libraries.html"
},

  
  
  
  {
    "title": "Text Analysis App: How Do You Talk To People on Facebook Versus In An Engineering Report?",
    "text": "A couple weeks ago I downloaded by my Facebook user data. By law, Facebook is required to package and send you your raw Facebook data…including every message you’ve ever sent. It was shocking how much personal information was available at my finger tips just from my Facebook profile. I was intrigued that all my Facebook messages were in once place. I decided to program an app that would sort through my messages and pick out the messages that I send. I also added in the ability to read simple text files such as my essays, emails, etc. The app can be found here: Text-Analysis App I created options to: FIlter out other people's messages to isolate your own data Filter out messages only between you and specific person(s) Because it’s first semester senior year (college apps are in full swing) I haven’t had as much time as I’d like to work on this app. I’ve spent about a week on it and I’m currently working on adding new features. Right now it works for any text file and any Facebook message file (detailed instructions in the app). I’ve learned so much in the past couple week while programming this app, the most significant being memory management. I’m dealing with millions of lines of user data (my message file was a whopping 30 mb of pure text) and my computer has crashed a lot under the strain. I’ve managed to fix most of the issues and it’s so interesting learning how to efficiently go through such massive amounts of data without overloading the browser. One of the neat options I added in was a ‘big data’ option. If checked it will filter out any word that doesn’t occur over the specified number of times, therefore decreasing the load on the browser. I encourage you to give it a try! You might learn something neat about the way you speak. I’ll be adding more analysis in the coming weeks including writing grade level (according to US standards), readability, emotional state, etc. It’ll be interesting! If you have any suggestions or comments feel free to let me know!",
    "tags": "project javascript reactjs html css nodejs",
    "url": "/web/2015/11/01/text-analysis-app-how-do-you-talk-to-people-on-facebook-versus-in-an-engineering-report.html"
},

  
  
  
  {
    "title": "NodeJS Basics - Setting Up A Local Web Server",
    "text": "I’m starting a new project with a group of kids to program a plagiarism app for my school. After debating between PHP and Node.js, we decided to use Node.js as our primary ecosystem. After a bit of research and a couple of YouTube videos, I set up my own simple web server. My repository can be found here. Here are the basics: Node.js in a nutshell runs Javascript locally from your terminal It takes Chrome’s V8 engine and uses it on the client side rather than attaching it to an HTML document (Javascript doesn’t have ‘document’ or ‘window’) Node.js can easily create a local server to compile, build, and emulate your web-based code I worked briefly with Node.js over the summer at Salesforce.com when I was a UX Engineer, but I had never truly dove into the compiler I was using. I was under a lot of time pressure and was behind the learning curve, so I simply accepted what came out of it. It’s all coming back to me now and I’m realizing that I actually do understand a great deal of what’s going on. Here are some basics that I used over the summer that people should know: Node.js and NPM Node.js also built NPM - Node Package Manager - which is the default package manager for Node.js. It is responsible for downloading, importing, and including open-source packages, or libraries if you will. These packages are largely user-contributed and can be downloaded and included like so: Terminal $: npm install [packageName] Javascript var package = require([packageName]); //Includes the package content as an object Packages are a super easy way to install predefined functions that can do common things. They’re incredibly simple and easy to pick up. You never want to include packages themselves in repositories. They take up space and are simply non-essentials. Because of the nature of open-sourced code, packages are mostly all available online to be installed by anyone. To share dependencies, you need to create a ‘package.json’ file — a file that specifies which packages should be included. To create the ‘package.json’ file type, type (in Terminal): $: npm init To log a dependency in the ‘package.json’: $: npm install [packageName] -S If you wish to install all the packages specified in the ‘package.json’ file, simply type: $: npm install This will install all the required modules. This sytem makes sharing code incredibly elegant and easy! Including Other JS Files in Your Code It’s very easy to include other Javascript files in your code. In fact, it’s almsot identical to including a package dependency. Simply include: var m2 = require(\"./module2\"); //Assumes js file Must export your data in module2 otherwise it just reads an empty object: //In module2.js var a = 10; module.export.data = a; //Will export an object //To access in other JS files, a will be stored as data.a Creating a Simple Local Web Server It’s very easy to start your own web server to run compiled code. It’s great for prototypes and running web apps locally. Here’s a simple web server that highlights the basic functionality: var server = http.createServer(function(request, response) { //Every time server hears something at port 3000, will respond with this: console.log(\"Got a request\"); //Returns in the terminal response.write(\"Hi\"); //Sends the window content. The browser will display \"Hi\" response.end(); }); server.listen(3000); //Specifies the port at which it will be served Hope this helps! I’ll be updating my site with various Node.js content and updates on the Plargiism App. In the meantime, if you have any questions feel free to reach out",
    "tags": "nodejs javascript",
    "url": "/web/2015/10/25/nodejs-basics-setting-up-a-local-web-server.html"
},

  
  
  
  {
    "title": "Reading a Text File Using HTML and Javascript",
    "text": "I just started working on a project that will analyze the user’s text and look for patterns, word usage, etc. My first hurdle was creating a system in which the user can upload a text file and have the server read it as a string. After a lot of piecing together research online, I think I’ve found the answer. Start with a simple HTML form input. This form will accept a tag and, when submitted, will run the function “loadFile.” I am using ReactJS so I had to bind the function to the parent. &lt;form onSubmit={this.loadFile.bind(this)}&gt; Select text file: &lt;input type=\"file\" id=\"selectedFile\" name=\"text\" accept=\".txt\" /&gt; &lt;input type=\"submit\" /&gt; &lt;/form&gt; React requires closing slashes on the inputs because it only recognizes “complete” tags. Now here’s where the fun happens: loadFile: function() { console.log(\"Loading file\"); //Feedback var selectedFile = document.getElementById('selectedFile').files[0]; //Identifying the selected file using the id of the form tag console.log(selectedFile); //Feedback to make sure the file is loaded correctly var reader = new FileReader(); //Create a document reader (built into HTML5) reader.onload = function(e) { //Declare the asyncronous callback for when a file is loaded into the reader var text = reader.result; //The contents of the text file console.log(text); //Spits back the contents of the text file } reader.readAsText(selectedFile); //Calls the reader to read our selected text file //The reader goes to its \"onload\" function and executes that code return false; //Prevents the page from auto-refreshing } That’s it! It was so satisfying once it worked. Hope this helps! Main Sources: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api http://www.htmlgoodies.com/beyond/javascript/read-text-files-using-the-javascript-filereader.html#fbid=imWj_l2wfU6 http://www.w3schools.com/tags/att_input_type.asp",
    "tags": "html javascript",
    "url": "/web/2015/10/17/reading-a-text-file-using-html-and-javascript.html"
},

  
  
  
  {
    "title": "Jekyll On El Capitan (OS X 10.11)",
    "text": "I upgraded to OS X 10.11, officially called El Capitan, this past week and discovered a concerning bug when building my site. My terminal was unable to recognize the initiator term: “jekyll.” $: jekyll zsh: command not found: jekyll I believe this is due to a new system security setting that prohibits ruby gems from being downloaded in the traditional way. For anyone wondering how to fix this, I found the solution after poking around online: In your terminal, simply type in: $: sudo gem install -n /usr/local/bin jekyll Hope this helps! Now you can continue enjoying Jekyll while embracing the new OS X operating system.",
    "tags": "macos",
    "url": "/web/2015/10/09/jekyll-on-el-capitan-osx-1011.html"
},

  
  
  
  {
    "title": "Visualizing a Javascript Callback",
    "text": "Ever wondered what technical sounding words like “asyncrhonis” or “event-loops” meant? It took me a while to figure out all the complicated terminology associated with code execution, but basically these words all relate to the order in which lines of code are run. I came across a neat web app that one of my LinkedIn connections posted called Loupe. According to their website, “Loupe is a little visualisation to help you understand how JavaScript’s call stack/event loop/callback queue interact with each other.” Here is a brief overview of the concept: If you are at all curious or just want a new perspective on things, I encourage you check out Loupe!",
    "tags": "reactjs javascript",
    "url": "/web/2015/10/01/visualizing-a-javascript-callback.html"
},

  
  
  
  {
    "title": "React Syntax Highlighting in Sublime Text Editor (Babel Sublime)",
    "text": "Since I’m working with the Javascript framework, React, I would like to have a syntax highlighter in my Sublime IDE. Babel-Sublime is just what I’m looking for - it is integrated with Sublime and provides syntax highlighting for JSX code. You can install it using Package Control and feel free to check out my blog post to see how that’s done. Here’s the link to Babel-Sublime: https://github.com/babel/babel-sublime I highly recommend this for anyone working in ReactJS on Sublime!",
    "tags": "reactjs",
    "url": "/configuration/2015/09/12/react-syntax-highlighting-in-sublime-text-editor-babel-sublime.html"
},

  
  
  
  {
    "title": "Comparison Operators: ‘==’ vs. ‘===’",
    "text": "For the longest time, I didn’t realize that ‘===’ was a comparison operator in Javascript. I just recently learned what the difference between them was. The double equal signs tell the comparison statement to convert the two values into the same type before comparing them. The triple equal signs do not convert the values before coimparing. If the two values do not share the same type, it will simply return false. For example: var num = 1; var str = \"1\"; if (str == num) //Will return true if (str === num) //Will return false This is a super short post, but I figured I should write it down since it was interesting and something I should remember.",
    "tags": "javascript",
    "url": "/programming/2015/09/08/comparison-operators-vs.html"
},

  
  
  
  {
    "title": "Cropping Square Images in Mac Preview",
    "text": "A discovered another Mac OS trick that uses the option key. To crop a picture in Preview into a square, hold the option key and the shift key while dragging with your mouse. This causes the selection to scale proportionally. There are two possible outcomes: If you have an existing selection, it will keep the same aspect ratio. If you have no selection, it will create a square selection.",
    "tags": "macos",
    "url": "/computer/2015/08/17/cropping-square-images-in-mac-preview.html"
},

  
  
  
  {
    "title": "CSS Filters and Effects",
    "text": "Since most of the site (as of now) does not use Bootstrap as a default style tool, I’ve been doing a lot of custom CSS from scratch. My landing page is meant to mimic a sheet of glass with a semi-transparent background and border. Here’s some quick and simple CSS that can turn any div into a piece of glass. I’ve found that it works well for modals and elements that you want to give an extra emphasis on: .glass { background-color: rgba(255, 255, 255, .2); border-bottom: 2px solid; border-bottom-color: #ccc; border-bottom-color: rgba(255, 255, 255, 0.2); box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3); } This setup can easily be customized by changing the values of the background-color, border-color, etc. For example, my component background is not actually transparent white. My white text was a little too hard to see against the white background, so I changed it to have a tint of grey: background-color: rgba(100, 100, 100, .2); Another cool CSS3 trick is to apply filters on images. This is similar to iPhone filters or filters you would see on Instagram. Here’s an example of a greyscale filter with a blur. I was originally planning on using this for my landing page, but I ended up scrapping the idea because I liked seeing the vibrant colors of my pictures, especially the woodworking ones. Simply apply this to your CSS class: -webkit-filter: grayscale(0.5) blur(10px); or as an inline style using ReactJS: var backgroundBlur = { WebkitFilter: 'grayscale(0.5) blur(7px)' } //As an inline style - syntax Hope this helps.",
    "tags": "reactjs css",
    "url": "/web/2015/08/17/css-filters-and-effects.html"
},

  
  
  
  {
    "title": "Small Lessons: Disabling Scrolling, Extra Screen Sizes, Mirroring and Screen Arrangement Tricks",
    "text": "I’ve been dealing with some really weirdly-sized images for my project and this have given me all sorts of issues in terms of scaling, cropping, and scrolling. There are many instances where I don’t have any content off the screen, but there is still a side scroll. I’ve tried inspecting my elements to see which part of my code is responsible for the extra white space, but to no avail. I settled with just disabling the side scroll for this app. Here’s how you do it: Simply add this to your CSS: html, body { max-width: 100%; overflow-x: hidden; } Another cool little Mac OSX tip that I learned this week was how to show hidden screen sizes/aspect ratios for monitors. If you hook up your monitor and go to the display prefernces, you should only see a few possible screen sizes. There’s a trick to get more specific resolutions. Simply hold option when clicking on “Scaled.” It works like a charm! You can also choose to mirror a select screen by holding option and dragging a screen over another screen in display arrangement system preferences. For example, you can have a 3 display setup with your third display mirroring your second display. You can still use your second display as an additional monitor, but your third display will now be mirroring your second. It’s cool to see what holding option does when clicking! Wonder what else Apple has hidden from us using the “option” key…",
    "tags": "macos css",
    "url": "/web/2015/08/16/small-lessons-disabling-scrolling-extra-screen-sizes-mirroring-and-screen-arrangement-tricks.html"
},

  
  
  
  {
    "title": "First Blog Post on Github",
    "text": "Hello world! This is my first blog post using Jekyll on Github Pages! I’ve been maintaining a website and blog, but I thought it was about time I transitioned to a real, coded website. One of my mentors for my summer internship at Salesforce.com, Seimith Suth, recommended I use Github Pages to host my website and use Jekyll to power my blog. I just got it set up earlier today and I’m ready to start porting my content over! A big shoutout to Seimith for her help not just on this, but with all my questions throughout the summer. She’s spent hours and hours helping me through my projects even if she has a lot on her plate. Thanks a bunch :) I think I’m going to do a brain dump of everything Seimith taught me just so that I can remember it for personal reference. Lots of markup tricks, Jekyll tips, etc. Anyways, I’m really excited to get this going and I’ll be following up with more blog posts soon so stay tuned! /* Note: Full list of supported languages: http://pygments.org/languages/ */",
    "tags": "reflection",
    "url": "/life/2015/08/04/first-post.html"
},

  
  
  
  {
    "title": "React Lifecycle Event: componentWillReceiveProps",
    "text": "I discovered a pretty useful lifecycle event in React. I’ve typically only stuck to getInitialState, componentWillMount, and Render, but I jsut discovered componentWillReceiveProps. This essentially gets called every time the component will receive a new or updated prop. This is really useful when you want to set a state equal to prop more than once in its lifecycle. The syntax is: componentWillReceiveProps(props) { ... } Try this out when you can! It’s really useful.",
    "tags": "reactjs",
    "url": "/web/2015/08/03/react-lifecycle-event-componentwillreceiveprops.html"
},

  
  
  
  {
    "title": "Setting a Background Image with HTML and CSS",
    "text": "Here is how you set a background image to cover the entire screen using HTML and CSS. The image will adjust based on the size of your browser window. It’s very useful and I figured I should make note of it here. HTML: &lt;div class=\"background\"&gt; &lt;/div&gt; CSS: .background { height: 100%; background-image: url(\"imageURL\"); background-repeat: no-repeat; background-size: cover; background-attachment: fixed; background-position: 50% 0%; position: relative; top: 0rem; bottom: 0rem; margin-top: 0rem; } The background-size trait is uniqe in that the values I used were either contain or cover. Cover will fill the entire div and will scale/zoom in order to accomplish that. Contain will fit the image to either the width or height, whichever is the limiting agent. The extra space will be filled with the background color.",
    "tags": "html css",
    "url": "/web/2015/08/03/setting-a-background-image-with-html-and-css.html"
},

  
  
  
  {
    "title": "Intro to Media Queries",
    "text": "I just met with Brandon, from the UX Engineering department, to figure out font sizing using media queries. Media queries are essentially ways of setting thresholds within the CSS to change fonts, widths, etc. based off a given criteria. Here’s an example I used: @media (min-width: 640px) { font-size: 1.1rem; }; @media (min-width: 1024px) { font-size: 1.3rem; }; The code above essentially takes in a criteria, in this case the width, and changes the font size accordingly. It triggers the CSS nested within the media query and applies it if the criteria is met. This block of code goes within the class like so: .className { ... @media (...) { ... } } This is very helpful when dealing with mobile, desktop, tablet, etc. users.",
    "tags": "css html",
    "url": "/web/2015/08/03/intro-to-media-queries.html"
},

  
  
  
  {
    "title": "Best Way to Customize Terminal",
    "text": "I just did a post on customizing your Terminal look and feel using manual commands in your .bash_profile file, but I just came across a puggin called “oh-my-zsh” that makes it so much easier. I literally just installed it and my terminal came alive. It looks loads better! It recognizes github directories, color codes different file types, and does countless other things. You can actually probably just scrap everything that I said in my previous blog post (I’m older and wiser now) and just use oh-my-zsh. I installed oh-my-zsh on iTerm 2 — the terminal client that I use (and strongly recommend). Oh-my-zsh is located here: https://github.com/robbyrussell/oh-my-zsh To install, simply use one of the following methods and type the command: Curl Method $: sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" or Wget Method $: sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" Themes You can download terminal themes and color schemes from their GitHub. The files for color presets can be imported from `./schemes/”. You can browse screenshots of all the color schemes here.",
    "tags": "terminal",
    "url": "/configuration/2015/08/02/best-way-to-customize-terminal.html"
},

  
  
  
  {
    "title": "Changing Your Terminal Prompt",
    "text": "I just learned how to customize my Terminal shell to my liking. My latest customization was to change the Terminal prompt. Typically, my prompt looked like: Computer-Name: User-Name ~ This was just too long and cluttered my screen far too much. I set about to change this. Here are the steps to remove your user name: Go to your route directory Find the customizer file named “.bash_profile”. This is a hidden file so it can only be seen by using “$ ls -a”. If it is not there, do not worry, step 3 will both open and create it. Type: “$ nano .bash_profile” Type: “export PS1=”\\h: \\w “ Now type: control + O, return, control + x Restart your terminal Your prompt should now look like: Computer-Name: ~ For the cleanest look, use: “export PS1=”\\W “ It will render: ~ For a complete list of customizations, see this link: http://www.ibm.com/developerworks/linux/library/l-tip-prompt/ Here’s a way of changing colors in your terminal: http://it.toolbox.com/blogs/lim/how-to-fix-colors-on-mac-osx-terminal-37214",
    "tags": "terminal",
    "url": "/configuration/2015/08/02/changing-your-terminal-prompt.html"
},

  
  
  
  {
    "title": "Accessibility: Enabling Voiceover on Buttons and Links",
    "text": "Today, I discovered accessibility and assistive technology. It’s really an intriguing topic and is something I’ve never really thought about. I think it’s important in this day and age to be cognicant of who owns what technology and who has access to what. I did a paper earlier this year on the digital divide, but I took the lense of age, gender, location, etc..not of ableness. My web app is almost ready to be packaged and shipped so it’s time to start putting on the finishing touches. One of these is enabling voiceover. Assistive Text I’m sure a lot of people have tabbed through webpages before. It’s great for forms, but it can be a huge pain tabbing through a web app. In order to make things more accessible, Salesforce.com has a premade class called “assistive-text” that hides the enclosing text within the tag, but still allows it to be voiced over. I have an ‘&lt;a&gt;’ tag in my web app, and because it was an image, the voiceover function on the Mac couldn’t read a label. To solve this, I added this right above the image inside of the parent div: &lt;span className=\"assistive-text\"&gt;Close&lt;/span&gt; Like I said earlier, the class keeps the text “Close” hidden from the UI. However, if you were to tab over to the image, the voiceover would speak “Close”. It’s a very useful tool to make your website more accessible to those visually impaired. To use voiceover, use the keyboard shortcut: Command + F5. Tab Index Another trick for accessibility is prioritizing the tab order. To change the order in which users tab through actionable items, add the property: tabIndex. The starting value is 0. For example to tab through these two things out of order, but starting with the second one, you would do: &lt;button tabIndex=1&gt;Button 1&lt;/button&gt; &lt;button tabIndex=0&gt;Button 2&lt;/button&gt; If you pressed tab, you would first highlight button 2 and then button 1. I hope whoever reads this really takes this to heart and learns to appreciate something so remarkable as vision or health. It’s important that we move forward as a society allowing the greatest number of people to effectively use technology. I am considering posting my paper of the digital divide since it’s really a remarkable topic.",
    "tags": "html",
    "url": "/web/2015/07/31/accessibility-enabling-voiceover-on-buttons-and-links.html"
},

  
  
  
  {
    "title": "Clearing Timeouts and Intervals Before They Trigger",
    "text": "I’ve been working a lot with time and animation and one of the things that I had to overcome was preventing an existing timeout from triggering. I had already declared a timeout with setTimeout, but I wanted to cancel it midway. My solution was to first declare an empty variable at the top of my React code. This line goes even before you create your class: var myTimeout; module.export = React. createClass({ ... }); Next, I set my interval equal to a global variable like so: myTimeout = setTimeout(functionName(), 500); My interval is now set to ‘myTimeout’ and because I declared this variable globally, it can be accessed at any scope. If I want to cancel my timeout before it has triggered I use the clearTimeout function: clearTimeout(myTimeout); That’s it! It’s really simple. This works with intervals as well. Simply set the inveral globally using the same method as described above and clear the interval with clearInterval(myInterval). Hope this helps!",
    "tags": "javascript",
    "url": "/web/2015/07/31/clearing-timeouts-and-intervals-before-they-trigger.html"
},

  
  
  
  {
    "title": "Restarting a CSS3 Animation with Javascript in React",
    "text": "I’ve been working on animation in my project at Salesforce.com and I came across a challenge with animation. It’s very easy to trigger animation using react props and states, but reseting animations are a different beast. In non-React Javascript, the solution would be: document.getElementById(\"tagID\").classList.remove(\"animationClass\") document.getElementById(\"tagID\").classList.add(\"animationClass\") This would essentially just remove the class and then re-add it, effectively creating a “new” animation and reseting the cycle. However, React outsmarts this and doesn’t recognize the toggled class. To overcome this obstacle use a setTimeout to delay adding the class. After it has been removed for a few milliseconds, re-add it. Example: document.getElementById(\"tagID\").classList.remove(\"animationClass\") setTimeout(function() {document.getElementById(\"tagID\").classList.add(\"animationClass\");}, 50); This will outsmart react into thinking the animation was indeed removed. It will reset the animation before you start it again. Hope this helps!",
    "tags": "javascript",
    "url": "/web/2015/07/31/restarting-a-css3-animation-with-javascript-in-react.html"
},

  
  
  
  {
    "title": "Making a Bare Minimum Modal in HTML and CSS",
    "text": "Here is the code for a bare minimum popup modal: HTML: &lt;div aria-hidden=\"false\" role=\"dialog\" className=\"modal\"&gt; &lt;div className=\"modal__container\"&gt; &lt;div className=\"modal__header\"&gt; Header &lt;/div&gt; &lt;div className=\"modal__content\"&gt; Content &lt;/div&gt; &lt;div className=\"modal__footer\"&gt; Footer &lt;/div&gt; &lt;/div&gt; &lt;div className=\"modal-backdrop\"&gt; &lt;/div&gt; &lt;/div&gt; CSS: .modal { position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 9001; &amp;__container { position: relative; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-pack: center; justify-content: center; margin: auto; padding: 3rem; border-radius: .25rem; width: 50%; max-width: 40rem; min-width: 20rem; height: 100%; } &amp;__header { flex-shrink: 0; border: 1px solid black; } &amp;__content { padding-top: 2rem; padding: 1rem; overflow: hidden; overflow-y: auto; border: 1px solid black; } &amp;__footer { border-top: 2px solid grey; border-bottom-right-radius: .25rem; border-bottom-left-radius: .25rem; padding: .75rem; text-align: right; border: 1px solid black; } &amp;-backdrop { position: fixed; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%; z-index: 9000; visibility: visible; opacity: 1; } }",
    "tags": "html css sourceCode",
    "url": "/web/2015/07/31/making-a-bare-minimum-modal.html"
},

  
  
  
  {
    "title": "Creating a Roll Style Number Counter that Mimics a Slot Machine",
    "text": "I found a really cool way of making a number counter engaging. A co-worker at Salesforce, named Amy Lee, created a simple React component designed to mimic a slot machine. Instead of simply changing the number, the function “animates” the change and rolls up to that number. The cool thing about this is that it works for any number and it requires no CSS3 animation. It looks neat, especially with huge numbers! Calling Component: &lt;AnimatedNumber number={this.state.number} time={300} frameRate={20}/&gt; //Total time: 300ms //One frame every 20 ms Component: const AnimatedNumber = React.createClass({ getInitialState() { return { number: this.props.number } }, componentWillReceiveProps(props) { if (this.state.number !== props.number) { // If different number if (this._interval) { //If theres an interval clearInterval(this._interval) // Clear the existing interval } let framesLeft = this.props.time/this.props.frameRate; //Determine frame rate let increment = (props.number - this.state.number)/(framesLeft + 1); //Determine increment per frame this._interval = setInterval(() =&gt; { if (framesLeft &gt; 0) { //If there are frames this.setState({ number: this.state.number + increment }); //Set new number framesLeft--; //Subtract a frame } else { //If done clearInterval(this._interval); //Clear the interval this._interval = null; //Set to null this.setState({ number: props.number }); //Set the final value to the exact value just in case } }, this.props.frameRate); //How often it repeats } }, render() { return ( &lt;span&gt; {Math.round(this.state.number)} //Round if you don't want a decimal &lt;/span&gt; ) } });",
    "tags": "reactjs es6 javascript sourceCode",
    "url": "/web/2015/07/29/creating-a-roll-style-number-counter-that-mimics-a-slot-machine.html"
},

  
  
  
  {
    "title": "Installing Packages on Sublime Text 2",
    "text": "It’s actually very easy. I tried to install SublimeHighlight so that I could export/copy portions my code as a rich text files (RTF - Rich Text Formal) instead of plain text. Steps: Install Package Control by opening up Sublime's consol (View --&gt; Show Console) and paste the following: import urllib2,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') Press enter. Open Package Control under Sublime Text 2 --&gt; Preferences --&gt; Package Control Select \"Package Control: Add Repository\" Copy the github repository link. I used https://github.com/n1k0/SublimeHighlight/tree/python3 Open Package Control again Select \"Package Manager: Install Package\" Select corresponding package. In my case it was \"SublimeHighlight\" Done! You can now use the package. SublimeHighlight can be found here",
    "tags": "packageManager",
    "url": "/configuration/2015/07/29/installing-packages-on-sublime-text-2.html"
},

  
  
  
  {
    "title": "Using Javascript Variables From Another File in ReactJS",
    "text": "The project I’ve been working on requires data entry that isn’t always easy to organize if they are kept locally in my React code. I’ve been declaring my data as a getInitialState() which is both inconvienient and messy. To work around this, I’m keeping my data in a seperate Javascript file called “file.js.” I keep my data in a JSON format, but as a string: var text = \"Hello world!\"; //In file.js Below this line, I must export this variable so that it can be imported in the React code: module.exports = {data: text} //In file.js I store my string as an object called “data.” I then import the contents of “file.js” in my main “App.jsx” file: import file from './file.js'; //In App.jsx The contents of the object I exported in the other file is being stored as the variable “file” here. I can then convert the contents of “file” to an object: var str = file.data; //\"data\" is the object within \"file\" Convert this into a usable Javascript object: var finalData = JSON.parse(str); Your string, “Hello world!”, is now stored within the variable finalData. Hope this helps!",
    "tags": "javascript reactjs es6",
    "url": "/web/2015/07/24/using-javascript-variables-from-another-file-in-reactjs.html"
},

  
  
  
  {
    "title": "Quick, Short If/Then Statement",
    "text": "As a lot of you guys know, a proper if/then statement looks like this: if (condition) { ... } else { ... } Or something along those lines. If you want to set a value for a variable, it can take at least 6 lines of code. In a long file, adding 6 lines of code every time you want to set a variable based on an if-statement can make your code very messy. For example, to set a simple yes/no off of a boolean takes this: var str = \"\"; if (condition) { str = \"yes\"; } else { str = \"no\"; } An efficient, concise alternative is to use this format condenses this code into one line: var str = condition == true ? \"yes\" : \"no\"; This is a very simple, easy trick to greatly increase the readabitlity of your code. Instead of having an incredibely long file with lots of short lines, you can work horizontally and make use of your horizontal realistate. This method is particularly useful when you need many if-statements in a row. Hope this help!",
    "tags": "javascript",
    "url": "/web/2015/07/21/quick-short-ifthen-statement.html"
},

  
  
  
  {
    "title": "React: Passing Information from Child to Parent while Mapping JSON Data",
    "text": "I’ve had a lot of issues in the past week trying to figure out how to pass information from the child component to the parent component while mapping JSON data. Here’s what it looks like to pass information from the child component to the parent component: module.exports = React.createClass({ handleClick(number) { ... //This runs when the child component clicks. Parent component now has access to Child component variable, 'number' }, render() { return ( &lt;Child handleClick={this.handleClick} /&gt; ) } }); const Child = React.createClass({ render() { return ( &lt;button onClick={this.props.handleClick.bind(this, number)}&gt;Click me&lt;/button&gt; ) }); Here’s what it looks like to map a JSON object: var contactNodes = this.props.contacts.map(function (contact) { var firstName = contact.firstName.toUpperCase(); var lastName = contact.lastName.toUpperCase(); var found = firstName.includes(str) + lastName.includes(str); return ( &lt;h1&gt;{firstName} {lastName}&lt;/h1&gt; ); } }); Unfortunately, it’s difficult to combine these two things because when using “this.handleClick”, “this” refers to the current object it is in. When you map data, “this” refers to contactNodes, not the component; therefore, you cannot refer to a function while mapping JSON data. I finally figured out a simple way around this issue. Instead of including all my HTML in the return while mapping, I used the map function to set states. Then I passed those states into the components in the regular render() function. This allowed me to use functions because the “this” would refer to the correct object. Example: module.exports = React.createClass({ getInitialState() { return { str: this.props.data.map(function (data) {return ( data.type )}), } }, handleClick() { console.log(\"Click\") }, render() { return ( &lt;GameAnswerChoices handleClick={this.handleClick} string={this.state.str}/&gt; ); } });",
    "tags": "reactjs es6 css html javascript sourceCode",
    "url": "/web/2015/07/20/react-passing-information-from-child-to-parent-while-mapping-json-data.html"
},

  
  
  
  {
    "title": "CSS3 Animation Basics and Callback Solutions",
    "text": "I’ve been working wtih CSS3 animations lately, primarily to add motion and excitement to my project. I’ve played around with them and I’ve figured out the basics with entrances, exits, transitions, scaling, etc. The method that I’ve been doing is essentially using a state as a boolean. If a button is clicked, the state is toggled and the animation class is added onto the div container. It looks something like this (most of this code is courtesy of Seimith Suth): React Code: module.exports = React.createClass({ getInitialState() { return { animate: false } }, buttonClick() { console.log(this.state) this.setState({ animate: !this.state.animate }) }, render() { var className = this.state.animate ? \"bump\" : \"\"; return ( &lt;div&gt; &lt;button onClick={this.buttonClick.bind(this)}&gt;Button&lt;/button&gt; &lt;div className=\"animation\"&gt; &lt;div className={\"truck \" + className}&gt; &lt;img src=\"http://gearscrm.com/wp-content/uploads/2015/04/Summer-release-logo.png\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) } }); Sass (SCSS): @-webkit-keyframes bounce { 0% { -webkit-transform: translateX(0px); } 30% { -webkit-transform: translateX(50px); } 60% { -webkit-transform: translateX(-45px); } } .animation { display: flex; position: fixed; /*top: 50%; left: 45%;*/ } .animation .truck { width: 50px; height: 50px; opacity: 1; transform: scale(1); box-shadow: none; transition: all 300ms ease-in-out; } .animation .bump { /*Need webkit for codepen here for some reason*/ -webkit-animation-name: bounce; -webkit-animation-iteration-count: 1; -webkit-animation-duration: 800ms; } The problem with this, is that the button simply toggles between true false. There is no ellegant way to set the state back to false after the animation is done. However, there are some alternatives: In my opinion, the easier solution would be simply to use a setTimeout function to automatically run a function that sets the state as false after a given amount of time. SImply set the interval to be equal to or longer than the animation and it should work. Simple! The second way is to use jQuery. I’m no expert on jQuery so I’ll let Google do the work for me. I know a lot of people were posting about it so I figured there is a solution. Hope this helped!",
    "tags": "reactjs es6 css html javascript sourceCode",
    "url": "/web/2015/07/17/css3-animation-basics-and-callback-solutions.html"
},

  
  
  
  {
    "title": "Creating a Spike on GitHub and a Good GitHub Branch Model",
    "text": "In programming, a spike a place to test out various methods before actually coding the finished project. For the past week, I’ve been practicing with a whole host of components that I will ultimately use in my final project such as modals, lists, animation, React components, JSON data, states, props…the list goes on and on and on. I didn’t want to lose this code because, believe it or not, it can actually be really helpful down the road. Sometime I’ll forget how I did something originally, and I’ll have to refer back to the previous file. To solve this issue, I created a Spike branch in Github. I essentially backed up my spike so that I could reference it later on. To be honest, I’m not entirely sure what I did, but my mentor told me that I was backing up my code so I’ll take his word for it. Originally, my spike was in my Master branch. I used this code in terminal to back it up: Here is a useful article about creating GitHub branches logically and neatly. It covers the importance of creating a good branch structure, especially when dealing with continuous development. Here is a cheat sheet: http://nvie.com/files/Git-branching-model.pdf Hope this helps! It’s a good way of storing your work so that you can reference it later. You might also want to store a local version of the spike by downloading the zip file just in case. Update July 4, 2017 Here’s a good way of untracking files (espeically those with sensitive information): $ git update-index --assume-unchanged &lt;file&gt;. This command simply stops tracking, it does not delete it so make sure there is no sensitive information before you add it to the repo. Use a placeholder like “API_KEY”. To rever this, use $ git update-index --no-assume-unchanged &lt;file&gt;. To get a list of all files that are assumed-unchanged, use: $ git ls-files -v|grep '^h'.",
    "tags": "github terminal unix",
    "url": "/programming/2015/07/17/creating-a-spike-on-github.html"
},

  
  
  
  {
    "title": "Salesforce Internship - Summer 2015",
    "text": "I’ve been interning at Salesforce.com for the past couple weeks this summer and I figured I would keep a section of my blog devoted to my thoughts, experiences, and anything that comes to mind! I’ve been working as an Engineer on the UX Design team. I started working at Salesforce on June 22nd and these past three weeks have been some of my favorite weeks of my life! I’ve met so many amazing people and learned a ton of new skills. It’s truly a blessing to have this opportunity and I intend to make the most of it. Here’s some background on the kinds of things I’m doing/using while I’m working here: Computer: Macbook Pro 15\" Retina from 2014 with 2.8 GHz Intel Core i7, 16 gb of ram, and a 512 gb SSD Applications: Sublime Text 2, iTerm 2, Sketch, Slack, Chrome Languages: HTML, CSS, SCSS, Vanilla Javascript, React, ES6, and a little bit of Angular in the beginning Websites: Github, Codeschool, Codeacademy, W3Schools, Codepen.io, Heroku, Gmail I am one of two high schoolers in the Futureforce intern program at Salesforce.com, so the learning curve is pretty steep. I’m doing my best and I’ve really learned a lot! I’ll be posting about various topics including bug solutions, life advice, and my perspective on what the corporate life is like (hint: free ice cream).",
    "tags": "internship reflection",
    "url": "/life/2015/07/16/salesforce-internship-summer-2015.html"
},

  
  
  
  {
    "title": "Common React Issue - Button Clicks",
    "text": "I’ve started to get the hang of React and ES6, but it’s only been three weeks and there are of course tons and tons of things I haven’t learned yet. I’ll go over a couple of things that I think anyone starting to learn React could benefit from. In this blog post I’ll go over Button Clicks. React works differently from plain old Vanilla Javascript in a couple of ways. One of which is the modular structure of the code. Each module has functions within it that can be accessed only by that specific module. You might be encountering a couple errors: onClick function triggering when button loads The onClick function doesn't recognize the function its supposed to trigger The function refreshes the page You can't pass parameters into the function See the corresponding number below for potential solutions and explanations. 1. Prevent onClick from automatically running The reason it automatically runs is because you are triggering the function when referencing it. Your code may look like this: &lt;button onClick={this.buttonClick()}&gt;Button&lt;/button&gt; The parentheses indicate that the function should be executed. When the page loads, it sees the parenthesis and runs the corresponding function. To fix the issue, simply remove the parenthesis. To pass parameters in, see the section below. 2. Force onClick to recognize function Use .bind(this) at the end of {this.buttonClick} See example below. 3. Prevent Auto-Refresh Simply use the: preventDefault() function module.exports = React.createClass({ buttonClick(e) { e.preventDefault(); //Prevents auto refresh }, render() { return( &lt;button onClick={this.buttonClick.bind(this)}&gt;Button&lt;/button&gt; ) } }); 4. Passing Parameters Add the parameters in the .bind(this) as seen below module.exports = React.createClass({ buttonClick(num) { console.log(num); }, render() { return( &lt;button onClick={this.buttonClick.bind(this, num)}&gt;Button&lt;/button&gt; ) } });",
    "tags": "reactjs javascript",
    "url": "/web/2015/07/16/common-react-issue-button-clicks.html"
},

  
  
  
  {
    "title": "Jubel - MusicViz Demo",
    "text": "I just published another video highlighting the functionality of my app, MusicViz. I used the song “Jubel” by Klingande both because it works well with the music visualizer and because I simply love the song. It’s a wonderful combination of electronic and instrumental music. Because the song doesn’t remain in “high gear” (doesn’t constantly trigger the visualizer) for the entire song, there’s some times where the music visualizer doens’t spawn any dots. Watching it create arcs across the circle was mesmerizing in itself and the contrast between these intense and non-intense periods was interesting. I fixed the issue of not recording in high definition by using one of the high-powered school computers. I was able to screen caputre at 1080p and then layer the song on top of the noiseless video. This method worked well and I think that’s what I will do for future videos. Stay tuned for more demos and explanatory videos!",
    "tags": "processing java",
    "url": "/programming/2015/03/11/jubel-musicviz-demo.html"
},

  
  
  
  {
    "title": "MusicViz Demo with Goooo by TNGHT",
    "text": "This is MusicViz. Often times music visualizers are created with Adobe Aftereffects for each individual song. Unlike these other “music visualizers,” I wanted to make something that works with any song or even any sound. I programmed this with Java and the Minim library. Features: Customizable animations (speed, fade time, sensitivity) Five color-coordinated themes and backgrounds Works with any “.mp3” file and many other common music file types Compatible with Mac, PC, and Linux Click to create a “firework” of dots Unfortunately, I could not find a good screen recorder online that was both free and could record high frame rates. I opted to mirror my display with a TV then record the TV with a camcorder. Sorry for the low quality, hopefully I’ll get that sorted out in the future. I will be uploading more songs with MusicViz soon. I am also working on an explanatory video about how the software works and what goes on behind the scenes. I coded this entirely with Processing. I also do not own rights to the song “Goooo” by TNGHT. No copyright infringement intended! (That’s what everyone says in their videos so I guess I’ll do that too) It’s a great electronic song that highlights MusicViz’s ability to detect beat drops, etc. Hope you enjoyed it! Project Portfolio I have galleries and blog posts that highlight my wood, electronics, programming, and metal projects.",
    "tags": "java processing",
    "url": "/programming/2015/03/10/musicviz-demo-with-goooo-by-tnght.html"
},

  
  
  
  {
    "title": "iPhone Made Out of 350 Math Functions",
    "text": "Background Last year, I made an iPhone using about 350 linear, conic, and piecewise functions. It took about 20 hours to make and was meant to model an iPhone home display. It is actually supposed to have animation, but due to the sheer number of equations, my browser would constantly crash if I tried it. I own a Mac with Retina display so I do not encourage you to try the animation. This is one of my favorite projects and definitely the one that I take the most pride in. I spent loads more time on it than was probably healthy, but I just had a lot of fun with it. Link Here is the link to the graph: https://www.desmos.com/calculator/b2qi05nasi My graph was actually featured as one of the “Creative Picks” for the Desmos site! My graph was sent out on one of the monthy Desmos newsletters to the tens of thousands of Desmos users. Screenshots Here is a screenshot of the final creation: Here are the different types of equations I used and the total times I used them. Below are images of the finsihed product with each function labeled. The number corresponds to the function on the Desmos file as well as the number on the list of all the functions. Circles: 2, 3, 4, 5, 6, 16, 17, 18, 19, 31, 32, 33, 34, 43, 44, 56, 57, 58, 61, 68, 69, 88, 89, 90, 91, 92, 93, 98, 100, 115, 117, 125, 126, 127, 128, 141, 142, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 176, 177, 181, 182, 184, 189, 190, 194, 195, 199, 200, 204, 205, 220, 224, 225, 230, 231, 253, 254, 260, 273, 274, 281, 282, 283, 284, 291, 192, 298, 299, 306, 307, 308, 316, 317, 318, 324. Ellipses: 7, 8, 27, 37, 38, 59, 62, 102, 103, 104, 105, 106, 107, 108, 109, 129, 133, 143, 185, 296, 310, 312. Hyperbolas: 9, 10, 20, 22, 25, 26, 29, 30, 35, 36, 39, 41, 42, 45, 48, 51, 52, 54, 55, 60, 66, 67, 86, 87, 99, 101, 113, 114, 116, 121, 122, 139, 140, 156, 157, 165, 166, 167, 168, 174, 175, 179, 180, 187, 188, 197, 198, 202, 203, 222, 223, 251, 252, 258, 270, 271, 272, 286, 287, 289, 290, 304, 305, 314, 315. Parabolas: 21, 23, 24, 70, 71, 72, 73, 96, 123, 134, 135, 267, 268, 275, 276, 277, 294, 302, 309. Lines (Linear Equations): 11, 12, 13, 14, 49, 50, 63, 64, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 94, 95, 111, 112, 124, 130, 137, 144, 145, 146, 147, 148, 149, 183, 215, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 256, 257, 259, 261, 263, 264, 265, 266, 278, 279, 285, 293, 295, 300, 301, 311, 319, 320, 321, 322, 325. Semicircles: 46, 47, 120, 131, 132, 192, 193, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 226, 227, 228, 229, 234. Sine Wave (Trig Functions): 118, 119, 120. Piecewise Function (Two Lines): 214. Animation Slider: 1. Place Holders: 15, 28, 40, 53, 65, 85, 97, 110, 138, 155, 164, 173, 178, 186, 191, 196, 201, 221, 250, 262, 269, 280, 288, 297, 303, 313, 323. Piston Animation (Also a Staff Pick) I also created a piston animation graph that was featured as one of the “Favorite Graphs of the Month.” Here is the link: https://www.desmos.com/calculator/o6zbu8pofe",
    "tags": "",
    "url": "/school/2015/03/08/iphone-made-out-of-350-math-functions.html"
},

  
  
  
  {
    "title": "Handwriting Font App (With Video and Source Code)",
    "text": "I recently programmed my own handwriting font app using Processing, a Java-based programming language. The program prompts the user’s handwriting, stores it locally, then allows the user to type in their own handwriting. I spent many hours on this project, and I had a lot of fun making it! I was really going for a program that would not only be a challenge programming-wise, but would also be a great tool to have. The features include: Functioning typing interface Font size Support of multiple users Line wrap and backspace Numerous special characters Export a PDF vector file to be laser cut/fabricated One of the coolest parts about this project is the ability to print out what you've typed on a Watercolor Bot. This is a CNC machine that uses a pen to draw out vector files. A video of the program in action. I was very proud of this program. I spent a great deal of time on it and I was thrilled when I finally got it to work. Because of the complex nature of this project, I learned a great deal about both programming in Processing (PShapes, etc.) and the Watercolor Bot. My attempt at programming a “simple” word processor also revealed how difficult and complex Microsoft Office is. If I had more time, I would add bold, italics, colored fonts, underlining, a curser, spell check, better line wrap, etc. The source code",
    "tags": "processing java",
    "url": "/programming/2014/12/07/handwriting-font-app-with-video-and-source-code.html"
},

  
  
  
  {
    "title": "Accentuating Your Wood Grain with Colored Wax Finish",
    "text": "I came across this video in my youTube “Recommended” playlist. I was intrigued by this video as it was such a unique concept and produced such an amazing result. Essentially, you add colored wax to your wood in order to highlight the grain. I really want to try this on one of my bowls (or even my next bat?) to see what it would look like. The steps are as follows: Sand your wood completely (400 grit)- any tearout or blemishes will be obvious after applying the wax. The video talks about how perfect and smooth it has to be. \"Best sanded piece you've ever done\" Rub on a clear, oil-based finish that seals the wood. This will prevent the wax from entering the non-grain areas in the wood. The man in this video used deft gloss lacquer on a paper towel. Use a brush to burnish the wood and remove any excess finish. Apply the wax thoroughly and use multiple coats using a cheese cloth. The result should be immediate and intrigueing. Wait about 15 minutes for it to dry. Make sure the wax is dry and doesn't smir. Apply another finish (this man used watco oil) to seal in the wax and remove the excess wax. Apply many times to remove all the wax that is not in the grain. The thinner in the finish wipes off the excess. Wipe dry. The wax, oil, and varnish should be sealed in the wood. I plan on using this method soon! I will most likely post pictures or even film the process. Below is a list of all recommended materials: DEFT Clear Lacquer Wood Finish Black Shoe Polish (Wax) Any Watco Danish Oil - Example",
    "tags": "",
    "url": "/wood/2014/10/05/accentuating-your-wood-grain-with-colored-wax-finish.html"
},

  
  
  
  {
    "title": "About",
    "text": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for the Jekyll new theme at: github.com/jglovier/jekyll-new You can find the source code for Jekyll at github.com/jekyll/jekyll Welcome to Jekyll Initial Blog Post: You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll’s dedicated Help repository.",
    "tags": "",
    "url": "/about/"
},

  
  
  
  {
    "title": "Articles by tag: AngularJS",
    "text": "",
    "tags": "",
    "url": "/blog/tag/angularjs"
},

  
  
  
  {
    "title": "Articles by tag: Animations",
    "text": "",
    "tags": "",
    "url": "/blog/tag/animations"
},

  
  
  
  {
    "title": "Articles by tag: Backend Server",
    "text": "",
    "tags": "",
    "url": "/blog/tag/backendServer"
},

  
  
  
  {
    "title": "Articles by category: computer",
    "text": "",
    "tags": "",
    "url": "/blog/category/computer/"
},

  
  
  
  {
    "title": "Articles by category: Developer Tools",
    "text": "",
    "tags": "",
    "url": "/blog/category/configuration/"
},

  
  
  
  {
    "title": "Articles by tag: CSS",
    "text": "",
    "tags": "",
    "url": "/blog/tag/css"
},

  
  
  
  {
    "title": "Articles by tag: Database",
    "text": "",
    "tags": "",
    "url": "/blog/tag/database"
},

  
  
  
  {
    "title": "Articles by category: Design",
    "text": "",
    "tags": "",
    "url": "/blog/category/design/"
},

  
  
  
  {
    "title": "Articles by tag: Design Process",
    "text": "",
    "tags": "",
    "url": "/blog/tag/designProcess"
},

  
  
  
  {
    "title": "Articles by tag: ES6",
    "text": "",
    "tags": "",
    "url": "/blog/tag/es6"
},

  
  
  
  {
    "title": "Articles by tag: Express Server",
    "text": "",
    "tags": "",
    "url": "/blog/tag/expressServer"
},

  
  
  
  {
    "title": "Articles by tag: GitHub",
    "text": "",
    "tags": "",
    "url": "/blog/tag/github"
},

  
  
  
  {
    "title": "Articles by tag: Graphic Design",
    "text": "",
    "tags": "",
    "url": "/blog/tag/graphicDesign"
},

  
  
  
  {
    "title": "Articles by tag: Hackathon",
    "text": "",
    "tags": "",
    "url": "/blog/tag/hackathon"
},

  
  
  
  {
    "title": "Articles by category: Hardware Projects",
    "text": "",
    "tags": "",
    "url": "/blog/category/hardware/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/testing/herokuAPI.html"
},

  
  
  
  {
    "title": "Articles by tag: HTML",
    "text": "",
    "tags": "",
    "url": "/blog/tag/html"
},

  
  
  
  {
    "title": "",
    "text": "Browse All Categories iOS Development Web Development Hardware Projects General Programming Developer Tools Design Woodshop School Life Computer Hacks Featured posts: Machine Learning Code Snippets&#58 June 2018 Getting Started with Login Sessions: Express, Client Sessions, and React React Redux Tutorial: Building Your Own Web App Swift Classes August 2017: Classes, Subclasses, and Protocols My Custom VIM Configuration: Installation, Usage, and Capabilities ES6 Tips and Tricks June 2017: Webpack Loaders, Regexes, and DNS Configuration HackPrinceton 2017: SoFly — An iOS App to Scan Flyers on Campus Swift Navigation Basics: How to Setup a Tab Bar App Xcode Best Practices July 2016: Troubleshooting, Pull Requests, Cocoapods, and More Digital Design: The Process from Concept to iOS App Uber Scheduler: Calling Ubers Alarm Clock Style Recent posts: Terminal Tips and Tricks June 2018: JSON Data, Caffeinate, and More Algorithm Best Practices June 2018&#58 Recrusive Tree Search Functions Machine Learning Code Snippets&#58 June 2018 Browse by Category Browse by Tag",
    "tags": "",
    "url": "/blog/category/"
},

  
  
  
  {
    "title": "KHou | Design",
    "text": "Design Portfolio UI/UX design, graphic design — often for my personal programming projects.",
    "tags": "",
    "url": "/design/"
},

  
  
  
  {
    "title": "Contact Kevin",
    "text": "",
    "tags": "",
    "url": "/contact/"
},

  
  
  
  {
    "title": "KHou | Photography",
    "text": "Photography Photos taken from my VSCO",
    "tags": "",
    "url": "/photography/"
},

  
  
  
  {
    "title": "Kevin’s Wood Portfolio",
    "text": "",
    "tags": "",
    "url": "/blog/wood/"
},

  
  
  
  {
    "title": "KHou | Woodshop",
    "text": "Wood Wood projects that can be found on my Flickr",
    "tags": "",
    "url": "/wood/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/blog/wallpapers/"
},

  
  
  
  {
    "title": "Search Results | KHou22",
    "text": "Blog Search",
    "tags": "",
    "url": "/blog/search/"
},

  
  
  
  {
    "title": "",
    "text": "Browse All Tags Xcode Swift Ionic Javascript NodeJS ReactJS Redux Database ES6 CSS HTML AngularJS Express Server Python Package Manager Java Processing Design Process User Experience User Interface Graphic Design Unix MacOS VIM Terminal GitHub Animations Backend Server Reflection Tutorial Source Code Internship Project Hackathon Featured posts: Machine Learning Code Snippets&#58 June 2018 Getting Started with Login Sessions: Express, Client Sessions, and React React Redux Tutorial: Building Your Own Web App Swift Classes August 2017: Classes, Subclasses, and Protocols My Custom VIM Configuration: Installation, Usage, and Capabilities ES6 Tips and Tricks June 2017: Webpack Loaders, Regexes, and DNS Configuration HackPrinceton 2017: SoFly — An iOS App to Scan Flyers on Campus Swift Navigation Basics: How to Setup a Tab Bar App Xcode Best Practices July 2016: Troubleshooting, Pull Requests, Cocoapods, and More Digital Design: The Process from Concept to iOS App Uber Scheduler: Calling Ubers Alarm Clock Style Recent posts: Terminal Tips and Tricks June 2018: JSON Data, Caffeinate, and More Algorithm Best Practices June 2018&#58 Recrusive Tree Search Functions Machine Learning Code Snippets&#58 June 2018 Browse by Category Browse by Tag",
    "tags": "",
    "url": "/blog/tag/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/stats-test-score-calculator/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/text-analysis/"
},

  
  
  
  {
    "title": "",
    "text": "*** Page Content/Design in Progress *** Inspiration Emotions run high when coding and there is always member of the team that swears a little too much in github commits. Normally this is ok, but when you have hackathon officials or potential partners reviewing it, those vulgar swear words might not give off the gold impression you're striving for. What it does It simply executes order 66. It cleanses the entire repo of all the jedi, I mean curse words. How we built it A google chrome extension that replaces all curse words you see on github. Challenges we ran into We initially found it challenging to find and replace the words. Accomplishments that we're proud of Well, it works. So we're proud of that. Also it allows us to feel the satisfaction of expressing our feelings towards stupid bugs accurately without harming our professional appearance. What we learned Google extensions are fun and straightforward to build. What's next for Execute Order 66 If history tells us anything, they curse word rebellion will fight back. *for those who don't know what \"execute order 66\" it's the order from Star Wars that was given by the sith lord to kill all Jedi's. In our case the curse words are the Jedi's. Built With: javascript Try it out on the Chrome App Store Insert pictures and twitter links here It won the contest for the best Octocat Design at the hackathon! See the Twitter announcement",
    "tags": "",
    "url": "/programming/Execute-Order-66/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/Uber-Scheduler/"
},

  
  
  
  {
    "title": "",
    "text": "Wood Club I am the co-leader of Wood Club at my high school. Here is the progression of the club since the beginning of school until now. Historically, wood club hasn't been a very active club, but I wanted to change that this year! My co-leader is Nathan Craik, a junior at my school who is also a wood turning enthusiast. First Meeting Out of the 60 sign ups, we had 7 people show up...which doesn't sound like a lot, but is actually really good relative to some other clubs! There were 5 freshman and 1 sophomore so we had a relatively young crowd. Club Faire We got around 60 sign ups which I was really happy about! We handed out candy to whoever signed up and used our wood projects to attract the attention of passers by.",
    "tags": "",
    "url": "/programming/wood-club/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/random-number-assignment/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/presidential-election-forecast-2016/"
},

  
  
  
  {
    "title": "",
    "text": "",
    "tags": "",
    "url": "/programming/time-calculator/"
},

  
  
  
  {
    "title": "KHou | Programming",
    "text": "Programming Programming projects from the past couple of years written in a variety of languages and for a variety of purposes. Most are released to the public while some remain as algorithms or proofs of concept.",
    "tags": "",
    "url": "/programming/"
},

  
  
  
  {
    "title": "KHou | Portfolio",
    "text": "",
    "tags": "",
    "url": "/categories/"
},

  
  
  
  {
    "title": "Articles by tag: Internship",
    "text": "",
    "tags": "",
    "url": "/blog/tag/internship"
},

  
  
  
  {
    "title": "Articles by tag: Ionic",
    "text": "",
    "tags": "",
    "url": "/blog/tag/ionic"
},

  
  
  
  {
    "title": "Articles by category: iOS Development",
    "text": "",
    "tags": "",
    "url": "/blog/category/ios/"
},

  
  
  
  {
    "title": "Articles by tag: Java",
    "text": "",
    "tags": "",
    "url": "/blog/tag/java"
},

  
  
  
  {
    "title": "Articles by tag: Javascript",
    "text": "",
    "tags": "",
    "url": "/blog/tag/javascript"
},

  
  
  
  {
    "title": "Articles by category: Life",
    "text": "",
    "tags": "",
    "url": "/blog/category/life/"
},

  
  
  
  {
    "title": "Articles by tag: MacOS",
    "text": "",
    "tags": "",
    "url": "/blog/tag/macos"
},

  
  
  
  {
    "title": "Articles by tag: NodeJS",
    "text": "",
    "tags": "",
    "url": "/blog/tag/nodejs"
},

  
  
  
  {
    "title": "Articles by tag: Package Manager",
    "text": "",
    "tags": "",
    "url": "/blog/tag/packageManager"
},

  
  
  
  {
    "title": "Articles by tag: Processing",
    "text": "",
    "tags": "",
    "url": "/blog/tag/processing"
},

  
  
  
  {
    "title": "Articles by category: General Programming",
    "text": "",
    "tags": "",
    "url": "/blog/category/programming/"
},

  
  
  
  {
    "title": "Articles by tag: Project",
    "text": "",
    "tags": "",
    "url": "/blog/tag/project"
},

  
  
  
  {
    "title": "Articles by tag: Python",
    "text": "",
    "tags": "",
    "url": "/blog/tag/python"
},

  
  
  
  {
    "title": "Articles by tag: ReactJS",
    "text": "",
    "tags": "",
    "url": "/blog/tag/reactjs"
},

  
  
  
  {
    "title": "Articles by tag: Redux",
    "text": "",
    "tags": "",
    "url": "/blog/tag/redux"
},

  
  
  
  {
    "title": "Articles by tag: Reflection",
    "text": "",
    "tags": "",
    "url": "/blog/tag/reflection"
},

  
  
  
  {
    "title": "Articles by category: School",
    "text": "",
    "tags": "",
    "url": "/blog/category/school/"
},

  
  
  
  {
    "title": "Articles by tag: Source Code",
    "text": "",
    "tags": "",
    "url": "/blog/tag/sourceCode"
},

  
  
  
  {
    "title": "Articles by tag: Swift",
    "text": "",
    "tags": "",
    "url": "/blog/tag/swift"
},

  
  
  
  {
    "title": "Articles by tag: Terminal",
    "text": "",
    "tags": "",
    "url": "/blog/tag/terminal"
},

  
  
  
  {
    "title": "Articles by tag: Tutorial",
    "text": "",
    "tags": "",
    "url": "/blog/tag/tutorial"
},

  
  
  
  {
    "title": "Articles by tag: Unix",
    "text": "",
    "tags": "",
    "url": "/blog/tag/unix"
},

  
  
  
  {
    "title": "Articles by tag: User Experience",
    "text": "",
    "tags": "",
    "url": "/blog/tag/userExperience"
},

  
  
  
  {
    "title": "Articles by tag: User Interface",
    "text": "",
    "tags": "",
    "url": "/blog/tag/userInterface"
},

  
  
  
  {
    "title": "Articles by tag: VIM",
    "text": "",
    "tags": "",
    "url": "/blog/tag/vim"
},

  
  
  
  {
    "title": "Articles by category: Web Development",
    "text": "",
    "tags": "",
    "url": "/blog/category/web/"
},

  
  
  
  {
    "title": "Articles by category: wood",
    "text": "",
    "tags": "",
    "url": "/blog/category/wood/"
},

  
  
  
  {
    "title": "Articles by tag: Xcode",
    "text": "",
    "tags": "",
    "url": "/blog/tag/xcode"
},

  
  
  
  {
    "title": "Fonts",
    "text": "# Fonts Apply class to use font for that component: * Ling Wai SC: `font-handwritten` --> Natural looking font to mimic handwriting # SEO for Pages/Posts The tags in the liquid header for posts create SEO tags. See docs: https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md",
    "tags": "",
    "url": "/DevNotes.html"
},

  
  
  
  {
    "title": "",
    "text": "Last Updated: May 12, 2017 # To Do: * Add ability to search blog posts. Possible [library](http://jekyll.tips/jekyll-casts/jekyll-search-using-lunr-js/) * Redo project portfolio page * Finish contact me page * Redesign the portfolio page * Port over portfolio content from Wix website for woodshop * Add Dribble profile to external links # Things to Try * CSS \"will-change\" attribute to help optimize responsive/dynamic animations # Blog Posts * Redux and React Overview - 6/12/17 TODO: More to add # Useful Resources * [GitHub Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)",
    "tags": "",
    "url": "/TODO.html"
},

  
  
  
  {
    "title": "simpleWeather Changelog",
    "text": "# simpleWeather Changelog For a more complete changelog you can always check out the [commit log](https://github.com/monkeecreate/jquery.simpleWeather/commits/master). ## v3.1.0 - January 29 2016 * Fixed location errors due to Yahoo removing geo.placefinder from their API. It has been replaced with geo.places. [#174](https://github.com/monkeecreate/jquery.simpleWeather/issues/174) * Fixed error callback to correctly return an error message. [#101](https://github.com/monkeecreate/jquery.simpleWeather/issues/101) ## v3.0.2 - June 2 2014 * Fixed result issue when more than one location was returned. [#90](https://github.com/monkeecreate/jquery.simpleWeather/issues/90) ## v3.0.1 - May 22 2014 * Fixed forecast thumbnail and image bug. [#88](https://github.com/monkeecreate/jquery.simpleWeather/issues/88) ## v3.0 - May 17 2014 * Complete rewrite! Removed over 100 lines of code without losing functionality. * Now < 4.0 kB in size. * Added forecast thumbnail image. * Removed tomorrow in favor of forecast. * Fixed http/https issue on API call [#79](https://github.com/monkeecreate/jquery.simpleWeather/pull/79) and images. * Hat tip to [@defvayne23](https://github.com/defvayne23) for a quick code review. ## v2.7 - April 17 2014 * Added gulp and a build/release process. * Fix for 3200 (not available) condition code and related image [#77](https://github.com/monkeecreate/jquery.simpleWeather/issues/77). * Fixed my assumption of query being present [#72](https://github.com/monkeecreate/jquery.simpleWeather/issues/72). Hat tip to [@rjackson](https://github.com/rjackson). * Some general code cleanup. ## v2.6 - February 26 2014 * Encoding URI for API call. * Fixed formatting issues. * Fixed alt temps bug. * Hat tip to [@defvayne23](https://github.com/defvayne23) for the suggestions. ## v2.5 - February 5 2014 * Removed deprecated weather.search YQL table. * Added geo.placefinder YQL table for searching locations. This allows you to get your location in a more forgiving format than before including latitude and longitude. * Removed `options.zipcode` as `options.location` now accepts any combination of city, state, and zipcode. * Removed `timeOfDay` as it was buggy and wouldn't return correctly anyways. Currently there is not a method to make this work accurately. See [#66](https://github.com/monkeecreate/jquery.simpleWeather/issues/66) for info. * Removed `http:` from api call and image source to allow for https. ## v2.4 - January 22 2014 * Added four day forecast with recent Yahoo Weather API update. ## v2.3 - June 16 2013 * Added `timeOfDay` for custom day/night icons. * Fix for new Yahoo API error result. ## v2.2 - April 20 2013 * Added high and low alt temps. * Added alt temp unit. ## v2.1.2 - January 25 2013 * Just a version bump for jQuery plugin directory. ## v2.1 - November 18 2012 * Added WOEID location param for all. ## v2.0.1 - January 26 2012 * Plenty of code cleanup but no additions, fixes, or deletions. ## v2.0 - November 23 2011 * Added forecast condition code. ## v1.9 - October 3 2011 * Added alt temp. ## v1.8 - May 15 2011 * Fixed wind direction. * Added calculations for the heat index. ## v1.7 - May 8 2011 * Added condition code. ## v1.6 - December 16 2010 * Fixed `windDirection` bug. ## v1.5 - June 29 2010 * Fixed errors in wind direction calculations. ## v1.4 - June 4 2010 * Fixed issue of a location returning multiple results. ## v1.3 - May 26 2010 * Fixed bug with trailing commas for IE. * Added `$.getJSON()` instead of `$.ajax()`. * Added better error message if the location is invalid. ## v1.2 - May 18 2010 * Added location param for those outside the US. * Changed `thumbnail` to a hardcoded url. ## v1.1 - May 17 2010 * Added `thumbnail` image. ## v1.0 - May 16 2010 * Initial commit.",
    "tags": "",
    "url": "/libraries/SimpleWeatherJS/CHANGELOG.html"
},

  
  
  
  {
    "title": "TheaterJS",
    "text": "# TheaterJS Typing effect mimicking human behavior. * [CodePen Demo](http://codepen.io/Zhouzi/full/JoRazP/) * [Installation](https://github.com/Zhouzi/TheaterJS#installation) * [Documentation](https://github.com/Zhouzi/TheaterJS#documentation) * [Change Log](https://github.com/Zhouzi/TheaterJS#change-log) * *Path from v1.x to v2 (coming soon)* * *Contribute (coming back soon)* ## Installation * via bower: `bower install theaterjs` * via npm: `npm install theaterjs` * via a cdn: `//cdn.jsdelivr.net/theaterjs/latest/theater.min.js` * [direct download](https://github.com/Zhouzi/TheaterJS/releases) Link the `theater.min.js` file and you're done: `` ## Example ```html ``` ## Documentation To get started, you'll first need to create a new TheaterJS object by eventually providing some options. **Example** ```javascript let theater = theaterJS({ locale: 'fr' }) ``` **Usage** ```javascript theaterJS() ``` Param|Default|Description -----|-------|----------- options|`{autoplay, locale, minSpeed, maxSpeed}`|Options *(see below)*. Breakdown of the available options: Option|Default|Description ----|-------|----------- autoplay|`true`|If true, automatically play the scenario as it's constructed. locale|`detect`|Used to determine which keyboard to use when typing random characters (for mistakes). Note: `\"detect\"` is an option to detect the user's locale and use if it's supported. minSpeed|`80`|Minimum delay between each typed characters (the lower, the faster). maxSpeed|`450`|The maximum delay between typed characters (the greater, the slower). TheaterJS objects have two public (read only) properties: * `theater.options`: object's options. * `theater.status`: object's status (\"playing\" or \"ready\"). ### addActor Add an actor to the casting. **Example** ```javascript let theater = theaterJS() theater .addActor('vader') .addActor('luke', 0.8, '.luke-selector') .addActor('yoda', { accuracy: 0.4, speed: 0.6 }, function (displayValue) { console.log('%s said yoda', displayValue) }) ``` **Usage** ```javascript theater.addActor(, , ) ``` Param|Default|Description -----|-------|----------- name||Name used to identify the actor. options|0.8|Actor's options **(see below)**. callback|**(see below)**|A function to call when actor's display value changes. Actors have two options: * `accuracy` (number between 0 and 1): used to determine how often an actor should make mistakes. * `speed` (number between 0 and 1): used to determine how fast the actor types. Note: the delay between each typed character varies to \"mimick human behavior\". An actor callback is a function that is called when its display value is set. It can also be a string, in such case TheaterJS will assume it's a DOM selector and will look for the corresponding element. It's then going to set the element's innerHTML when the value changes. You can safely ignore this argument if you gave the target element an id with the name of the actor, i.e: ```javascript theater.addActor('vader') ``` In this situation, TheaterJS will look for an element that matches the selector `#vader`. Also note that the actor will have an additional `$element` property referring to the DOM element when using one of those approaches. ### getCurrentActor Return the actor that is currently playing. **Example** ```javascript let theater = theaterJS() theater .addActor('vader') .addScene('vader:Luke...') .addScene(function (done) { let vader = theater.getCurrentActor() vader.$element.classList.add('dying') done() }) ``` **Usage** ```javascript theater.getCurrentActor() ``` ### addScene Add scenes to the scenario and play it if `options.autoplay` is true. **Example** ```javascript let theater = theaterJS() theater .addActor('vader') .addScene('vader:Luke... ', 'Listen to me!', 500) .addScene(theater.replay) ``` **Usage** ```javascript theater.addScene() ``` A scene can be of 5 different types: ```javascript theater .addScene('vader:Luke... ') // 1 .addScene(800) // 2 .addScene('I am your father!') // 3 .addScene(-7) // 4 .addScene('mother!') .addScene(function (done) { // do stuff done() }) // 5 ``` 1. `.addScene('vader:Luke... ')` erase actor's display value and set it with the new value. 2. `.addScene(800)` make a break of `800` milliseconds before playing the next scene. 3. `.addScene('I am your father!')` append value to the current actor's display value. 4. `.addScene(-7)` erase `7` characters. 5. `.addScene(fn)` call fn which receives a done callback as first argument (calling `done()` plays the next scene in the scenario). Note that addScene actually accepts an infinite number of arguments so you could just do: ```javascript theater .addScene('vader:Luke... ', 800, 'I am your father!') .addScene(-7, 'mother!') .addScene(fn) ``` ### play Play the scenario. **Example** ```javascript let theater = theaterJS({ autoplay: false }) theater .addActor('vader') .addScene('vader:Luke...') document.querySelector('button').addEventListener('click', function () { theater.play() }, false) ``` **Usage** ```javascript theater.play() ``` ### replay Replay the scenario from scratch (can be used as a callback to create a loop). **Example** ```javascript let theater = theaterJS() theater .addActor('vader') .addScene('vader:Luke...') .addScene(theater.replay) ``` **Usage** ```javascript theater.replay() ``` ### stop Stop the scenario after the current playing scene ends. **Example** ```javascript let theater = theaterJS() theater .addActor('vader') .addScene('vader:Luke... ', 'I am your father...') document.querySelector('button').addEventListener('click', function () { theater.stop() }, false) ``` **Usage** ```javascript theater.stop() ``` ### on Add a callback to execute when an event is emitted (when a scene start/end). **Example** ```javascript let theater = theaterJS() theater .on('type:start, erase:start', function () { let actor = theater.getCurrentActor() actor.$element.classList.add('blinking-caret') }) .on('type:start, erase:end', function () { let actor = theater.getCurrentActor() actor.$element.classList.remove('blinking-caret') }) theater .addActor('vader') .addScene('vader:Luke...') ``` **Usage** ```javascript theater.on(, ) ``` Param|Default|Description -----|-------|----------- eventName||Event's name to listen to. callback||Function to call when the event got published. The callback function receives the event's name as first argument. Note: listen to all event by using the '*' shortcut: `theater.on('*', callback)`. ## Change Log ### 2.0.1 - 2015-11-02 * publish to npm, fix for non-browser environment * add a `.npmignore` file * add source map ### 2.0.0 - 2015-11-02 * Brand new version",
    "tags": "",
    "url": "/libraries/TheaterJS-2.0.1/"
},

  
  
  
  {
    "title": "amCharts Data Loader",
    "text": "# amCharts Data Loader Version: 1.0.16 ## Description By default all amCharts libraries accept data in JSON format. It needs to be there when the web page loads, defined in-line or loaded via custom code. This plugin introduces are native wrapper that enables automatic loading of data from external data data sources in CSV and JSON formats. Most of the times you will just need to provide a URL of the external data source - static file or dynamically generated - and it will do the rest. ## Important notice Due to security measures implemented in most of the browsers, the external data loader will work only when the page with the chart or map is loaded via web server. So, any of the examples loaded locally (file:///) will not work. The page needs to be loaded via web server (http://) in order to work properly. Loading data from another domain than the web page is loaded is possible but is a subject for `Access-Control-Allow-Origin` policies defined by the web server you are loading data from. For more about loading data across domains use the following thread: http://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains ## Usage ### 1) Include the minified version of file of this plugin. I.e.: ``` ``` (this needs to go after all the other amCharts includes) ### 2) Add data source properties to your chart configuration. Regular (Serial, Pie, etc.) charts: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"dataLoader\": { \"url\": \"data.json\", \"format\": \"json\" } } ); ``` Stock chart: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"dataSets\": [{ ..., \"dataLoader\": { \"url\": \"data.csv\", \"format\": \"csv\", \"delimiter\": \",\", // column separator \"useColumnNames\": true, // use first row for column names \"skip\": 1 // skip header row } }] } ); ``` That's it. The plugin will make sure the files are loaded and dataProvider is populated with their content *before* the chart is built. Some formats, like CSV, will require additional parameters needed to parse the data, such as \"separator\". If the \"format\" is omitted, the plugin will assume JSON. ## Complete list of available dataLoader settings Property | Default | Description -------- | ------- | ----------- async | true | If set to false (not recommended) everything will wait until data is fully loaded complete | | Callback function to execute when loader is done delimiter | , | [CSV only] a delimiter for columns (use \\t for tab delimiters) emptyAs | undefined | [CSV only] replace empty columns with whatever is set here error | | Callback function to execute if file load fails init | | Callback function to execute when Data Loader is initialized, before any loading starts format | json | Type of data: json, csv headers | | An array of objects with two properties (key and value) to attach to HTTP request load | | Callback function to execute when file is successfully loaded (might be invoked multiple times) noStyles | false | If set to true no styles will be applied to \"Data loading\" curtain numberFields | | [CSV only] An array of fields in data to treat as numbers postProcess | | If set to function reference, that function will be called to \"post-process\" loaded data before passing it on to chart. The handler function will receive two parameters: loaded data, Data Loader options progress | | Set this to function reference to track progress of the load. The function will be passed in three parameters: global progress, individual file progress, file URL. showErrors | true | Show loading errors in a chart curtain showCurtain | true| Show curtain over the chart area when loading data reload | 0 | Reload data every X seconds reverse | false | [CSV only] add data points in revers order skip | 0 | [CSV only] skip X first rows in data (includes first row if useColumnNames is used) skipEmpty | true | [CSV only] Ignore empty lines in data timestamp | false | Add current timestamp to data URLs (to avoid caching) useColumnNames | false | [CSV only] Use first row in data as column names when parsing ## Using in JavaScript Stock Chart In JavaScript Stock Chart it works exactly the same as in other chart types, with the exception that `dataLoader` is set as a property to the data set definition. I.e.: ``` var chart = AmCharts.makeChart(\"chartdiv\", { \"type\": \"stock\", ... \"dataSets\": [{ \"title\": \"MSFT\", \"fieldMappings\": [{ \"fromField\": \"Open\", \"toField\": \"open\" }, { \"fromField\": \"High\", \"toField\": \"high\" }, { \"fromField\": \"Low\", \"toField\": \"low\" }, { \"fromField\": \"Close\", \"toField\": \"close\" }, { \"fromField\": \"Volume\", \"toField\": \"volume\" }], \"compared\": false, \"categoryField\": \"Date\", \"dataLoader\": { \"url\": \"data/MSFT.csv\", \"format\": \"csv\", \"showCurtain\": true, \"showErrors\": true, \"async\": true, \"reverse\": true, \"delimiter\": \",\", \"useColumnNames\": true } } }] }); ``` ### Can I also load event data the same way? Sure. You just add a `eventDataLoader` object to your data set. All the same settings apply. ## Adding custom headers to HTTP requests If you want to add additional headers to your data load HTTP requests, use \"headers\" array. Each header is an object with two keys: \"key\" and \"value\": ``` \"dataLoader\": { \"url\": \"data/serial.json\", \"format\": \"json\", \"headers\": [{ \"key\": \"x-access-token\", \"value\": \"123456789\" }] } ``` ## Manually triggering a reload of all data Once chart is initialized, you can trigger the reload of all data manually by calling `chart.dataLoader.loadData()` function. (replace \"chart\" with the actual variable that holds reference to your chart object) ## Using callback functions Data Loader can call your own function when certain event happens, like data loading is complete, error occurs, etc. To set custom event handlers, use these config options: * \"complete\" * \"init\" * \"load\" * \"error\" * \"progress\" Example: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"dataSets\": [{ ..., \"dataLoader\": { \"url\": \"data.json\", \"init\": function ( options, chart ) { console.log( 'Loading started' ); }, \"load\": function ( options, chart ) { console.log( 'Loaded file: ' + options.url ); }, \"complete\": function ( chart ) { console.log( 'Woohoo! Finished loading' ); }, \"error\": function ( options, chart ) { console.log( 'Ummm something went wrong loading this file: ' + options.url ); }, \"progress\": function( totalPercent, filePercent, url ) { console.log( 'Total percent loaded: ' + Math.round( totalPercent ) ); } } }] } ); ``` ## Translating into other languages Depending on configuration options the plugin will display a small number of text prompts, like 'Data loading...'. Plugin will try matching chart's `language` property and display text prompts in a corresponding language. For that the plugin needs to have the translations. Some of the plugin translations are in **lang** subdirectory. Simply include the one you need. If there is no translation to your language readily available, just grab en.js, copy it and translate. The structure is simple: ``` 'The phrase in English': 'Translation' ``` The phrase in English must be left intact. When you're done, you can include your language as a JavaScript file. P.S. send us your translation so we can include it for the benefits of other users. Thanks! ## Requirements This plugin requires at least 3.13 version of JavaScript Charts, JavaScript Stock Chart or JavaScript Maps. ## Demos They're all in subdirectory /examples. ## Extending this plugin You're encouraged to modify, extend and make derivative plugins out of this plugin. You can modify files, included in this archive or, better yet, fork this project on GitHub: https://github.com/amcharts/dataloader We're curious types. Please let us know (contact@amcharts.com) if you do create something new out of this plugin. ## License This plugin is licensed under Apache License 2.0. This basically means you're free to use or modify this plugin, even make your own versions or completely different products out of it. Please see attached file \"license.txt\" for the complete license or online here: http://www.apache.org/licenses/LICENSE-2.0 ## Contact us * Email:contact@amcharts.com * Web: http://www.amcharts.com/ * Facebook: https://www.facebook.com/amcharts * Twitter: https://twitter.com/amcharts ## Changelog ### 1.0.16 * Added \"numberFields\" config array ### 1.0.15 * Added \"emptyAs\" config property. Empty CSV values will be set to this (default `undefined`) ### 1.0.14 * Added \"init\" event handler, which is called **before** loading starts ### 1.0.13 * Added \"progress\" handler, which can be used to monitor data load progress ### 1.0.12 * Better default options handling in external calls to AmCharts.loadFile * Fixed the latest version of Stock Chart not resetting to default pre-defined period * New example: Using Data Loader functions externally (map_json_external_function.html) ### 1.0.11 * New translation: Added French translation. Thanks Remy! * Tweaks to allow better animation after data load on Pie chart ### 1.0.10 * Fixed error related to headers not being set when using standalone data load functions ### 1.0.9 * Plugin will now ignore empty CSV lines by default (configurable with `skipEmpty` property) ### 1.0.8 * Added `headers` config variable which allows adding custom headers to HTTP requests ### 1.0.7 * Fixed an issue with the Pie chart when it is being loaded in inactive tab ### 1.0.6 * Added support for Gauge chart (loads `arrows` array) ### 1.0.5 * Fixed JS error if periodSelector was not defined in chart config * Now all callback functions (complete, error, load) receive additional parameter: chart * postProcess function will now have \"this\" context set to Data Loader object as well as receive chart reference as third paramater ### 1.0.4 * Added `chart.dataLoader.loadData()` function which can be used to manually trigger all data reload ### 1.0.3 * Fixed the bug where defaults were not being applied properly * Fixed the bug with translations not being applied properly * Cleaned up the code (to pass JSHint validation) ### 1.0.2 * Fixed the issue with modified Array prototypes ### 1.0.1 * Added `complete`, `load` and `error` properties that can be set with function handlers to be invoked on load completion, successful file load or failed load respectively * Fixed language container initialization bug * Fixed bug that was causing parse errors not be displayed ### 1.0 * Added GANTT chart support ### 0.9.2 * Added global data load methods that can be used to load and parse data by code outside plugin * Trim CSV column names * Translation added: Lithuanian ### 0.9.1 * Fix chart animations not playing after asynchronous load ### 0.9 * Initial release",
    "tags": "",
    "url": "/libraries/ammap/plugins/dataloader/"
},

  
  
  
  {
    "title": "amCharts Export",
    "text": "# amCharts Export Version: 1.4.20 ## Description This plugin adds export capabilities to all amCharts products - charts and maps. It allows annotating and exporting chart or related data to various bitmap, vector, document or data formats, such as PNG, JPG, PDF, SVG, JSON, XLSX and many more. ## Important notice Please note that due to security measures implemented in modern browsers, some or all export options might not work if the web page is loaded locally (via file:///) or contain images loaded from different host than the web page itself. ## Usage ### 1) Include the minified version of file of this plugin as well as the bundled CSS file. I.e.: ``` ``` Or if you'd rather use amCharts CDN: ``` ``` (this needs to go after all the other amCharts includes) ### 2) Enable `export` with default options: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"export\": { \"enabled\": true } } ); ``` ### ... OR set your own custom options: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"export\": { \"enabled\": true, \"menu\": [ { \"class\": \"export-main\", \"menu\": [ { \"label\": \"Download\", \"menu\": [ \"PNG\", \"JPG\", \"CSV\" ] }, { \"label\": \"Annotate\", \"action\": \"draw\", \"menu\": [ { \"class\": \"export-drawing\", \"menu\": [ \"PNG\", \"JPG\" ] } ] } ] } ] } } ); ``` ## Loading external libraries needed for operation of this plugin The plugin relies on a number of different libraries, to export images, draw annotations or generate download files. Those libraries need to be loaded for the plugin to work properly. There are two ways to load them. Choose the one that is right: ### 1) Automatic (preferred) All libraries required for plugin operation are included withing plugins */libs* subdirectory. The plugin will automatically try to look in chart's [`path`](http://docs.amcharts.com/3/javascriptcharts/AmSerialChart#path) property. If your plugin files are located within plugins folder under amcharts (as is the case with the default distributions), you don't need to do anything - the libraries will load on-demand. If you are using relative url, note that it is relative to the web page you are displaying your chart on, not the export.js library. In case you've moved the libs folder you need to tell the plugin where it is `\"libs\": { \"path\": \"../libs/\" }` ### 2) Manual You can also load all those JavaScript libraries by `` tags. Since loading of libraries is on by default you will need to turn it off by setting `\"libs\": { \"autoLoad\": false }` Here is a full list of the files that need to be loaded for each operation: File | Located in | Required for ---- | ---------- | ------------ fabric.min.js | libs/fabric.js/ | Any export operation FileSaver.js | libs/FileSaver.js/ | Used to offer download files pdfmake.min.js | libs/pdfmake/ | Export to PDF format vfs_fonts.js | libs/pdfmake/ | Export to PDF format jszip.js | libs/jszip/ | Export to XLSX format xlsx.js | libs/xlsx/ | Export to XLSX format ## Complete list of available export settings Property | Default | Description -------- | ------- | ----------- backgroundColor | #FFFFFF | RGB code of the color for the background of the exported image enabled | true | Enables or disables export functionality divId | | ID or a reference to div object in case you want the menu in a separate container. fabric | {} | Overwrites the default drawing settings (fabricJS library) fallback | {} | Holds the messages to guide the user to copy the generated output; `false` will disable the fallback feature fileName | amCharts | A file name to use for generated export files (an extension will be appended to it based on the export format) legend | {} | Places the legend in case it is within an external container ([skip to chapter](#adding-external-legend)) libs | | 3rd party required library settings (see the above section) menu | [] | A list of menu or submenu items (see the next chapter for details) pdfMake | {} | Overwrites the default settings for PDF export (pdfMake library) position | top-right | A position of export icon. Possible values: \"top-left\", \"top-right\" (default), \"bottom-left\", \"bottom-right\" removeImages | true | If true export checks for and removes \"tainted\" images that area lodead from different domains delay | | General setting to delay the capturing of the chart ([skip to chapter](#delay-the-capturing-before-export)) exportFields | [] | If set, only fields in this array will be exported ( data export only ) exportTitles | false | Exchanges the data field names with it's dedicated title ( data export only ) columnNames | {} | An object of key/value pairs to use as column names when exporting to data formats. `exportTitles` needs to be set for this to work as well. exportSelection | false | Exports the current data selection only ( data export only ) dataDateFormat | | Format to convert date strings to date objects, uses by default charts dataDateFormat ( data export only ) dateFormat | YYYY-MM-DD | Formats the category field in given date format ( data export only ) keyListener | false | If true it observes the pressed keys to undo/redo the annotations fileListener | false | If true it observes the drag and drop feature and loads the dropped image file into the annotation drawing | {} | Object which holds all possible settings for the annotation mode ([skip to chapter](#annotation-settings)) overflow | true | Flag to overwrite the css attribute 'overflow' of the chart container to avoid cropping the menu on small container border | {} | An object of key/value pairs to define the overlaying border processData | | A function which can be used to change the dataProvider when exporting to CSV, XLSX, or JSON ## Configuring export menu Plugin includes a way to completely control what is displayed on export menu. You can set up menus, sub-menus, down to any level. You can even add custom items there that execute your arbitrary code on click. It's so configurable it makes us sick with power ;) The top-level menu is configured via `menu` property under `export`. It should always be an array, even if you have a single item in it. The array items could be either objects or format codes. Objects will allow you to specify labels, action, icon, child items and even custom code to be executed on click. Simple format codes will assume you need an export to that format. ### Simple menu setup Here's a sample of the simple menu setup that allows export to PNG, JPG and CSV: ``` \"export\": { \"enabled\": true, \"menu\": [ { \"class\": \"export-main\", \"menu\": [ \"PNG\", \"JPG\", \"CSV\" ] } ] } ``` The above will display a menu out of three options when you hover on export icon: * PNG * JPG * CSV When clicked the plugin will trigger export to a respective format. If that is all you need, you're all set. Please note that we have wrapped out menu into another menu item, so that only the icon is displayed until we roll over the icon. This means that technically we have a two-level hierarchical menu. If we opmitted that first step, the chart would simply display a format list right there on the chart. ### Advanced menu setup However, you can do so much more with the menu. Let's add more formats and organize image and data formats into separate submenus. To add a submenu to a menu item, simply add a `menu` array as its own property: ``` \"export\": { \"enabled\": true, \"menu\": [ { \"class\": \"export-main\", \"menu\": [ { \"label\": \"Download as image\", \"menu\": [ \"PNG\", \"JPG\", \"SVG\" ] }, { \"label\": \"Download data\", \"menu\": [ \"CSV\", \"XLSX\" ] } ] } ] } ``` Now we have a hierarchical menu with the following topology: * Download as image * PNG * JPG * SVG * Download data * CSV * XLSX We can mix \"string\" and \"object\" formats the way we see fit, i.e.: ``` \"export\": { \"menu\": [ \"PNG\", { \"label\": \"JPEG\", \"format\": \"JPG\" }, \"SVG\" ] } ``` The magic does not end here, though. ### Adding custom click events to menu items Just like we set `label` and `format` properties for menu item, we can set `click` as well. This needs to be a function reference. I.e.: ``` \"export\": { \"menu\": [ \"PNG\", { \"label\": \"JPEG\", \"click\": function () { alert( \"Clicked JPEG. Wow cool!\" ); } }, \"SVG\" ] } ``` ### Adding external legend In case you have an external legend you need to define the position where it should get placed in your export. By default it obtains the dimensions from the container but you can optionally overwrite those settings as shown below. ``` \"export\": { \"legend\": { \"position\": \"top\", // or \"right\", \"bottom\" and \"left\" are possible \"width\": 200, // optional \"height\": 200 // optional } } ``` ### Changing the dataProvider when exporting If you want to change the dataProvider when exporting to CSV, XLSX, or JSON, you can use the `processData` option: ``` \"export\": { \"processData\": function (data) { return data.slice(1, -1); } } ``` ### Adding overlaying border In case you need a more visible separation of your chart for further processing you can add an overlaying border. ``` \"export\": { \"border\": { \"stroke\": \"#000000\", // HEX-CODE to define the border color \"strokeWidth\": 1, // number which represents the width in pixel \"strokeOpacity\": 1 // number which controls the opacity from 0 - 1 } } ``` ### Menu item reviver By passing the `menuReviver` callback function you can modify the resulting menu item or relative container, before it gets appended to the list (`ul`). The function takes two arguments and it needs to return a valid DOM element. ``` \"export\": { \"menuReviver\": function(item,li) { li.setAttribute(\"class\",\"something special\"); return li; } } ``` #### Format specific options that you can override using Menu item reviver Some formats, such as CSV, have specific parameters that are used when exporting to this format. For example, default column separator for CSV is a comma. But what if you would like to be that a tab? You could use `menuReviver` for that like this: ``` \"export\": { \"enabled\": true, \"menuReviver\": function(cfg,li) { if ( cfg.format == \"CSV\" ) { cfg.delimiter = \"\\t\"; } return li; } } ``` Below you will find a list of parameters that you can override for each format: **JPG** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- quality |1 | 0-1 | A quality of the resulting JPG image multiplier | 1 | number | Set this to non-1 number to resize the resulting image by **PNG** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- quality | 1 | 0-1 | A quality of the resulting JPG image multiplier | 1 | number | Set this to non-1 number to resize the resulting image by **PDF** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- multiplier | 2 | number | Set this to non-1 number to resize the resulting image by **PRINT** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- delay | 1 | number | Delay by number of seconds before triggering print lossless | false | true/false | Enable or disable image optimization when printing **CSV** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- delimiter | \",\" | string | A string to use as a column delimiter quotes | true | true/false | Set whether to enclose strings in doublequotes escape | true | true/false | Set whether to escape strings withHeader | true | true/false | Add header row with column names **XLSX** Property | Default | Available values | Description --------- | ------- | ---------------- | ----------- dateFormat | \"dateObject\" | \"dateObject\"\\|\"string\" | Whether to export dates as dates recognisable by Excel or formatted as strings withHeader | true | true/false | Add header row with column names stringify | false | true/false | Convert all cell content to strings ### Menu walker In case you don't like our structure, go ahead and write your own recursive function to create the menu by the given list configured through `menu`. ``` \"export\": { \"menuWalker\": function(list,container) { // some magic to generate the nested lists using the given list } } ``` ### Printing the chart Adding menu item to print the chart or map is as easy as adding export ones. You just use \"PRINT\" as `format`. I.e.: ``` \"export\": { \"menu\": [ \"PNG\", \"SVG\", \"PRINT\" ] } ``` Or if you want to change the label: ``` \"export\": { \"menu\": [ \"PNG\", \"SVG\", { \"format\": \"PRINT\", \"label\": \"Print Chart\" } ] } ``` ### Annotating the chart before export OK, this one is so cool, you'll need a class 700 insulation jacket. By default each menu item triggers some kind of export. You can trigger an \"annotation\" mode instead by including `\"action\": \"draw\"` instead. ``` \"export\": { \"menu\": [ { \"class\": \"export-main\", \"menu\": [ { \"label\": \"Download\", \"menu\": [ \"PNG\", \"JPG\", \"CSV\", \"XLSX\" ] }, { \"label\": \"Annotate\", \"action\": \"draw\" } ] } ] } ``` Now, when you click on the \"Annotate\" item in the menu, the chart will turn into an image editor which you can actual draw on and the menu gets replaced by the default annotation menu. If you don't like the detault annotation menu, you can define your own: ``` \"export\": { \"menu\": [ { \"class\": \"export-main\", \"menu\": [ { \"label\": \"Download\", \"menu\": [ \"PNG\", \"JPG\", \"CSV\", \"XLSX\" ] }, { \"label\": \"Annotate\", \"action\": \"draw\", \"menu\": [ { \"class\": \"export-drawing\", \"menu\": [ \"JPG\", \"PNG\", \"SVG\", \"PDF\" ] } ] } ] } ] } ``` Now, when you turn on the annotation mode, your own submenu will display, allowing to export the image into either PNG, JPG, SVG or PDF. And that's not even the end of it. You can add menu items to cancel, undo, redo and still be able to reuse the choices by using the actions `draw.modes`, `draw.widths`, `draw.colors` or `draw.shapes`. ``` \"export\": { \"menu\": [ { \"class\": \"export-main\", \"menu\": [ { \"label\": \"Download\", \"menu\": [ \"PNG\", \"JPG\", \"CSV\", \"XLSX\" ] }, { \"label\": \"Annotate\", \"action\": \"draw\", \"menu\": [ { \"class\": \"export-drawing\", \"menu\": [ { label: \"Size ...\", action: \"draw.widths\", widths: [ 5, 20, 30 ] // replaces the default choice }, { \"label\": \"Edit\", \"menu\": [ \"UNDO\", \"REDO\", \"CANCEL\" ] }, { \"label\": \"Save\", \"format\": \"PNG\" } ] } ] } ] } ] } ``` ### Annotation settings Since 1.2.1 it's also possible to set some of the annotation options without the need to re-define the whole menu structure. You can easily adjust the choice of modes, colors, widths or shapes, and set the defaults when entering the annotation mode. Following setup shows you all available settings. If you don't have the `drawing` property at all, it will falls back to the defaults. ``` \"export\": { \"drawing\": { \"enabled\": true, // Flag for `action: \"draw\"` menu items to toggle it's visibility \"shapes\": [ \"test.svg\" ], // Choice of shapes offered in the menu (shapes are being loaded from the shapes folder) \"width\": 2, // Width of the pencil and line when entering the annotation mode \"widths\": [ 2, 10, 20 ], // Choice of widths offered in the menu \"color\": \"#000000\", // Color of the pencil, line, text and shapes when entering the annotation mode \"colors\": [ \"#000000\", \"#FF0000\" ] // Choice of colors offered in the menu \"opacity\": 1, // Opacity of the pencil, line, text and shapes when entering the annotation mode \"opacities\": [ 1, 0.8, 0.6, 0.4, 0.2 ] // Choice of opacity offered in the menu \"menu\": [ ... ], // Shown menu when entering the annotation mode \"mode\": \"pencil\", // Drawing mode when entering the annotation mode \"pencil\", \"line\" and \"arrow\" are available \"modes\": [ \"pencil\" , \"line\", \"arrow\" ], // Choice of modes offered in the menu \"arrow\": \"end\", // position of the arrow on drawn lines; \"start\",\"middle\" and \"end\" are available \"autoClose\": true // Flag to automatically close the annotation mode after download } } ``` If you need to filter the drawn elements, you can pass the `reviver` method in your global configuration, or pass it to the `capture` method if you export manually. For example, to hide all free labels you can simply do something like the following: ``` \"export\": { \"menu\": [\"PNG\"], \"reviver\": function(obj) { if ( obj.className == \"amcharts-label\" ) { obj.opacity = 0; } } } ``` ### Delay the capturing before export In some cases you may want to delay the capturing of the current chart snapshot to highlight the current value. For this you can simply define the 'delay' property in your menu item: ``` \"export\": { \"delay\": 3, // or specifically on individual menu items \"menu\": [{ \"label\": \"PNG\", \"format\": \"PNG\", \"delay\": 3 }] } ``` ### Events Since version 1.1.7 the plugin introduces some events you can use. For example the `afterCapture` event allows you to add some texts or images which can't be seen on the regular chart but only the generated export. Use it to watermark your exported images. ``` \"export\": { \"afterCapture\": function(menuConfig) { var text = new fabric.Text(\"This is shown on exported image only\", { top: 50, left: 100, family: this.setup.chart.fontFamily, size: this.setup.chart.fontSize * 2 }); this.setup.fabric.add(text); }, // or specifically on individual menu items \"menu\": [{ \"label\": \"PNG\", \"format\": \"PNG\", \"afterCapture\": function(menuConfig) { var text = new fabric.Text(\"This is shown on exported image only\", { top: 50, left: 100, family: this.setup.chart.fontFamily, size: this.setup.chart.fontSize * 2 }); this.setup.fabric.add(text); } }] } ``` ### A list of the events Name | Arguments | Description ---- | --------- | ----------- beforeCapture | [menu item setup](#a-list-of-menu-item-properties) | Called before the SVG element gets converted afterCapture | [menu item setup](#a-list-of-menu-item-properties) | Called right before the passed callback of the capture method ### A list of menu item properties Property | Description -------- | ----------- action | Set to \"draw\" if you want the item to trigger annotation mode class | Class name applied to the tag click | Function handler invoked upon click on menu item format | A format to export chart/map to upon click (see below for a list of available formats) icon | Icon file (will use chart's [path](http://docs.amcharts.com/3/javascriptcharts/AmSerialChart#path) if the URL is not full) label | Text label to be displayed menu | An array of submenu items title | A title attribute of the link backgroundColor | The background color of the canvas fileName | A file name to use for generated export files (an extension will be appended to it based on the export format) extension | File extension for the generated export file (uses format default if not defined) mimeType | Internet media type to generate the export file (usses format default if not defined) pageSize | A string or { width: number, height: number } ([details](#exporting-to-pdf)) pageOrientation | By default we use portrait, you can change it to landscape if you wish ([details](#exporting-to-pdf)) pageMargins | [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins ([details](#exporting-to-pdf)) content | Array of elements which represents the content ([details](#exporting-to-pdf)) multiplier | Scale factor for the generated image lossless | Flag to print the actual vector graphic instead of buffered bitmap (print option only, experimental) delay | A numeric value to delay the capturing in seconds ([details](#delay-the-capturing-before-export)) exportFields | [] | If set, only fields in this array will be exported ( data export only ) exportTitles | Exchanges the data field names with it's dedicated title ( data export only ) columnNames | An object of key/value pairs to use as column names when exporting ( data export only ) exportSelection | Exports the current data selection only ( data export only ) dataDateFormat | Format to convert date strings to date objects, uses by default charts dataDateFormat ( data export only ) dateFormat | Formats the category field in given date format ( data export only ) border | An object of key/value pairs to define the overlaying border Available `format` values: * JPG * PNG * SVG * CSV * JSON * PDF * XLSX * PRINT ### Exporting to PDF When exporting to PDF, you can set and modify the content of the resulting document. I.e. add additional text and/or modify image size, etc. To do that, you can use menu item's `content` property. Each item in `content` represents either a text line (string) or an exported image. To add a text line, simply use a string. It can even be a JavaScript variable or a function that returns a string. To include exported image, use `image: \"reference\"`. Additionally, you can add `fit` property which is an array of pixel dimensions, you want the image to be scaled to fit into. Here's an example of such export menu item: ``` { \"format\": \"PDF\", \"content\": [ \"Saved from:\", window.location.href, { \"image\": \"reference\", \"fit\": [ 523.28, 769.89 ] // fit image to A4 } ] } ``` Property | Description -------- | ----------- pageSize | a string or { width: number, height: number } pageOrientation | by default we use portrait, you can change it to landscape if you wish pageMargins | [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins content | array of elements which represents the content ([full description](https://github.com/bpampuch/pdfmake/)) Pagesize | Dimensions in pixel -------- | ----------- 4A0 | [4767.87, 6740.79] 2A0 | [3370.39, 4767.87] A0 | [2383.94, 3370.39] A1 | [1683.78, 2383.94] A2 | [1190.55, 1683.78] A3 | [841.89, 1190.55] A4 | [595.28, 841.89] A5 | [419.53, 595.28] A6 | [297.64, 419.53] A7 | [209.76, 297.64] A8 | [147.40, 209.76] A9 | [104.88, 147.40] A10 | [73.70, 104.88] B0 | [2834.65, 4008.19] B1 | [2004.09, 2834.65] B2 | [1417.32, 2004.09] B3 | [1000.63, 1417.32] B4 | [708.66, 1000.63] B5 | [498.90, 708.66] B6 | [354.33, 498.90] B7 | [249.45, 354.33] B8 | [175.75, 249.45] B9 | [124.72, 175.75] B10 | [87.87, 124.72] C0 | [2599.37, 3676.54] C1 | [1836.85, 2599.37] C2 | [1298.27, 1836.85] C3 | [918.43, 1298.27] C4 | [649.13, 918.43] C5 | [459.21, 649.13] C6 | [323.15, 459.21] C7 | [229.61, 323.15] C8 | [161.57, 229.61] C9 | [113.39, 161.57] C10 | [79.37, 113.39] RA0 | [2437.80, 3458.27] RA1 | [1729.13, 2437.80] RA2 | [1218.90, 1729.13] RA3 | [864.57, 1218.90] RA4 | [609.45, 864.57] SRA0 | [2551.18, 3628.35] SRA1 | [1814.17, 2551.18] SRA2 | [1275.59, 1814.17] SRA3 | [907.09, 1275.59] SRA4 | [637.80, 907.09] EXECUTIVE | [521.86, 756.00] FOLIO | [612.00, 936.00] LEGAL | [612.00, 1008.00] LETTER | [612.00, 792.00] TABLOID | [792.00, 1224.00] ## Styling the export menu The plugin comes with a default CSS file `export.css`. You just need to include it on your page. Feel free to override any styles defined in it, create your own version and modify as you see fit. If you choose to modify it, we suggest creating a copy so it does not get overwritten when you update amCharts or plugin. ## Plugin API We explained how you can define custom functions to be executed on click on export menu items. Those functions can tap into plugin's methods to augment it with some custom functionality. Here's an example: ``` \"export\": { menu: [ { label: \"JPG\", click: function() { this.capture({},function() { this.toJPG( {}, function( data ) { this.download( data, \"image/jpg\", \"amCharts.jpg\" ); }); }); } } ] } ``` The above will use plugin's internal `capture` method to capture it's current state and `toJPG()` method to export the chart to JPEG format. Yes, you're right, it's the exact equivalent of just including \"JPG\" string. The code is here for the explanatory purposes. Here's a full list of API functions available for your consumption: Function | Parameters | Description -------- | ---------- | ----------- toJPG | (object) options, (function) callback | Prepares a JPEG representation of the chart and passes the binary data to the callback function toPNG | (object) options, (function) callback | Prepares a PNG representation of the chart and passes the binary data to the callback function toSVG | (object) options, (function) callback | Prepares a SVG representation of the chart and passes the binary data to the callback function toPDF | (object) options, (function) callback | Prepares a PDF representation of the chart and passes the binary data to the callback function toJSON | (object) options, (function) callback | Prepares a JSON and passes the plain data to the callback function toCSV | (object) options, (function) callback | Prepares a CSV and passes the plain data to the callback function toXLSX | (object) options, (function) callback | Prepares a XLSX representation of the chart and passes the binary data to the callback function toBlob | (object) options, (function) callback | Prepares a BLOB and passes the instance to the callback function toCanvas | (object) options, (function) callback | Prepares a Canvas and passes the element to the callback function toArray | (object) options, (function) callback | Prepares an Array and passes the data to the callback function toImage | (object) options, (function) callback | Generates an image element which holds the output in an embedded base64 data url ## Fallback for IE9 Unfortunately, Internet Explorer 9 has restrictions in place that prevent the download of locally-generated files. In this case the plugin will place the generated image along download instructions directly over the chart area. To avoid having a bigger payload by including senseless polyfills to your site, you may need to add following metatag in your `` of your HTML document. ``` ``` This feature will kick in by default. If you want to disable it simply pass `false` to the `fallback` parameter. ``` \"export\": { fallback: false } ``` In case you want to change our default messages you can modify it like following. ``` \"export\": { fallback: { text: \"CTRL + C to copy the data into the clipboard.\", image: \"Rightclick -> Save picture as... to save the image.\" } } ``` ## Requirements This plugin requires at least 3.13 version of JavaScript Charts, JavaScript Stock Chart or JavaScript Maps. The export will also need relatively recent browsers. IE10 and up are supported. Partial support for IE9; Fallback mechanism. IE8 and older are not supported I'm afraid. Hey, it's time to upgrade! ## Demos They're all in subdirectory /examples. ## Extending this plugin You're encouraged to modify, extend and make derivative plugins out of this plugin. You can modify files, included in this archive or, better yet, fork this project on GitHub: https://github.com/amcharts/export We're curious types. Please let us know (contact@amcharts.com) if you do create something new out of this plugin. ## License This plugin is licensed under Apache License 2.0. This basically means you're free to use or modify this plugin, even make your own versions or completely different products out of it. Please see attached file \"license.txt\" for the complete license or online here: http://www.apache.org/licenses/LICENSE-2.0 ## Contact us * Email:contact@amcharts.com * Web: http://www.amcharts.com/ * Facebook: https://www.facebook.com/amcharts * Twitter: https://twitter.com/amcharts ## Changelog ### 1.4.20 * Fixed: Issue with disappearing images in PDFs caused by exceeding boundary box for images ### 1.4.19 * Fixed: Issue with radial gradient ### 1.4.18 * Fixed: Issue with the legend positioning on the left side ### 1.4.17 * Fixed: `clip-path` issue on XY serial charts which exposed the drawn line beyond the plotarea. ### 1.4.16 * Added: ([processData](#changing-the-dataprovider-when-exporting)) config-property to change the dataProvider when exporting. ### 1.4.15 * Fixed: Menu items obtain the global `multiplier` setting to scale the output image. ### 1.4.14 * Added: ([border](#adding-overlaying-border)) config-property to add an overlaying border on the output image. ### 1.4.13 * Fixed: Issue on balloons showing it's content as HTML added \"textContent\" as alternative getter ### 1.4.12 * Fixed: clipPath issue on SVG export (workaround until fabricJS handles that by themselves) ### 1.4.11 * Fixed: Depth issue on value labels on columns ### 1.4.10 * Fixed: potential vulnerability with anonymous function declaration ### 1.4.9 * Added: Radial gradient support on pie charts (new feature in amCharts v3.18.0) ### 1.4.8 * Fixed: Clippath positioning issue * Fixed: Issue removing tainted images * Fixed: Hashbanged url interpretation issue in IE (related to reusable svg nodes) ### 1.4.7 * Fixed: Zeroes were being exported to data formats as empty strings rather than numbers ### 1.4.6 * Fixed: Loading issue with patterns in firefox ### 1.4.5 * Fixed: Issue with the \"canvas-container\" on chart revalidations ### 1.4.4 * Added: Balloon text orientation * Fixed: Issue with multiline label positioning ### 1.4.3 * Added: `exportFields` option which is an array of fields to export in data formats (if you want to export just some fields as opposed to all fields) ### 1.4.2 * Added: `overflow` flag to overwrite the css attribute 'overflow' of the chart container ### 1.4.1 * Fixed: cropped bullets on XY charts ### 1.4.0 * Fixed: beforeCapture issue on SVG document changes * Added: Namespace check within globals for required third party software ### 1.3.9 * Fixed: Base tag gradient drawing issue (includes embedded hotfix for fabricjs commit #c9745ff) ### 1.3.8 * Fixed: Base tag clip path issue which draw the lines outside the plotarea ### 1.3.7 * Added: `columnNames` property, which allows overriding column names when expoerting chart data ### 1.3.6 * Fixed: Checking parseDates for category values for date interpretation ### 1.3.5 * Fixed: Scrollbar issue hiding the unselected scrollbar background area ### 1.3.4 * Fixed: Absolute legend positioning issue. ### 1.3.3 * Added: English as default language when define language does not exist ### 1.3.2 * Added: ([drawing.autoClose](#annotation-settings)) new flag to automatically close the annotation mode after download * Fixed: Internal pdfMake issue which prevented to generate PDFs in IE10, uses custom build until officially fixed ### 1.3.1 * Added: Timestamp date fields get converted as dates * Fixed: XLSX respects given dateFormat * Changed: JSON exports date fields as date objects by default ### 1.3.0 * Fixed: Issue hiding drawing container on \"drawing.done\" * Fixed: Legend positioning issue with charts created in a hidden container ### 1.2.9 * Fixed: Issue with missing `export.css` which showed the canvas * Fixed: Issue with empty menu items; adds list only with childNodes > 1 * Fixed: Issue with hidden bullets; caused by wrong clip-paths * Added: Polish language file ( thanks to piernik ) ### 1.2.8 * Fixed: Issue in `gatherClassName` checking element type ### 1.2.7 * Fixed: Generates true JPG file instead PNG with JPG extension * Fixed: Drag&Drop feature does not activate automatically the annotation mode ### 1.2.6 * Added: Native EXCEL date cell type for date fields, forced by default * Fixed: Issue in `getChartData` which ignored given data array ( affected API usage only ) ### 1.2.5 * Added: Illustrator support; `reviver` method to `toSVG`; converts by default RGBA to HEX colors codes and places it's dedicated opacity property * Fixed: Multiline text positioning / line heights ### 1.2.4 * Added: `exportSelection` exports the current data selection * Added: `dataDateFormat` converts the date-strings to date objects with given format * Added: `dateFormat` converts the date in given format * Added: `processData` to format date fields and translate fields * Changed: `gatherChartData` collects data, fields and titles only and uses `processData` to format ### 1.2.3 * Fixed: Positioning issue on multiline labels ### 1.2.2 * Fixed: Issue with object changes which overwrite undo/redo object states * Fixed: Issue with default fontSize ### 1.2.1 * Added: Possibility to add text, lines, shapes ([details](#annotation-settings)) * Added: Possibility to change drawing mode, color, opacity and size * Added: Possibility to select,move,scale drawn items * Added: Possibility to define dedicated drawing menu `drawing.menu` individual menu items get prioritised * Added: Dropbox feature which allows to drag images into the chart `fileListener: true` * Added: Keylistener which allows to undo/redo/remove the drawn steps `keyListener: true` * Added: Isolated plugin to be able to initiate manually regardless of the chart setup * Fixed: Conflict with prototypeJS which caused tainted return value from `toArray` ### 1.2.0 * Fixed: Issue with deepMerge which did not allow to modfiy the pdfMake default settings * Fixed: Menu issue which did not allow to modify the pdfMake settings * Fixed: Undo issue which needed double attempts in the beginning * Added: Drag/Scale feature in annotation mode; toggles automatically between drawing/dragging while hovering over the elements ### 1.1.9 * Added: `exportTitles` available in general or individual setup which exchanges the data field names with it's dedicated title * Fix: Interpolates missing data fields across data provider ### 1.1.8 * Added: Temporary workaround to bypass FileSaver check; issue prevented to open blob urls in safari browser ### 1.1.7 * Added: beforeCapture to be able to indicate the export process in some way * Added: afterCapture to be able to modify the fabric instance if needed * Added: SVG element as second argument within the \"reviver\" callback * Added: Multiple arguments supported in \"handleCallback\" method ### 1.1.6 * Fix: Pattern render issue in IE; * Added: Multiline support (workaround until fabricJS supports tspan) * Added: General delay property to delay the capturing of the chart ([details](#delay-the-capturing-before-export)) ### 1.1.5 * Fix: Tainted check issue which failed if location.origin wasn't available * Fix: Capture image check, triggers callback only if all images have been loaded * Added: Multi language support; embedded english by default; overtakes chart language * Added: Delay feature, which allows to delay the capturing ([details](#delay-the-capturing-before-export)) ### 1.1.4 * Fix: Did not collect clip-path and pattern from legend * Fix: External legend did not respect given width when positioned on left side * Fix: Improved tainted image detection ### 1.1.3 * Added: Added reviver in capturing method to filter the drawn chart elements ### 1.1.2 * Added: Generalized fallback; does a lookup on the Blob constructor * Fix: Wait for lazy images, triggers capture callback only when all images have been fully loaded * Discovered: [Safari 5 issue](https://github.com/kangax/fabric.js/issues/2241) please adapt fabric.js manually to solve it ### 1.1.1 * Fix: CSV export issue on date based charts * Fix: Enhanced migration script to obtain more settings ### 1.1.0 * Fix: Print issue on safari which captured the actual page instead of the export * Added: IE9 download fallback for `text/plain` and `image/*` mime types (CSS has been modified) * Added: `toImage` method; returns `img` element with embedded base64 imagery * Added: `getBase64` option in `toSVG` * Added: `toImage` usage in `toPRINT` to be able to choose the image type + settings. * Added: `lossless` option in `toPRINT` (experimental) ### 1.0.9 * Added: IE9 base64 export * Added: Third party updates + minified versions ### 1.0.8 * Fix: IE8 issue which prevents the chart from initiating ### 1.0.7 * Fix: issue on toCSV handling the header (first row) ### 1.0.6 * Fix: issue on revalidation the chart/map * Added: [path](http://docs.amcharts.com/3/javascriptcharts/AmSerialChart#path) to load the libaries by default ### 1.0.5 * Added: divId to be able to place the menu within an external container * Added: menuWalker to replace the whole menu generation * Added: menuReviver to adapt menu items before being appended to the list * Added: libs.async to load dependencies asynchronous (default true) ### 1.0.4 * Considering classNamePrefix (dont't forget to adapt export.css) * Added: safety delay on print restore to ensure capturing the canvas ### 1.0.3 * Fix: flagged relative image paths as tainted ### 1.0.2 * Fix: compabitily on array method extension such as PrototypeJS ### 1.0.1 * Added: libs.reload: false, script tag crawling to avoid multiple insertions * Fix: IE10 bug on print * Fix: migration bug, replaces menu instead of appending ### 1.0 * Initial release",
    "tags": "",
    "url": "/libraries/ammap/plugins/export/"
},

  
  
  
  {
    "title": "amCharts Responsive",
    "text": "# amCharts Responsive Version: 1.0.2 ## Description Use this plugin to enable \"responsive\" features for amCharts' JavaScript Charts, JavaScript Stock Chart, or JavaScript Maps. \"Responsive\" chart or map will modify it's features dynamically (even as you resize the container) based on the available area. For example: a full fledged line chart with legend guides, labels, titles and other elements will be displayed in all its glory if container is big enough. If the container shrinks (i.e. you resize a browser window or view it on an iPad), it starts \"compacting\" the chart. First the legend is removed. Shrink it even further, axis titles are removed and its value labels are moved inside the plot area. Going even smaller, bullets, labels gone. All the way to the sparkline representation of the chart. Plugin brings a universal set of pre-defined rules that you can use to instantly enable responsiveness. Those are custom-tailored for each chart/map type and will probably fit your requirements out-of the-box. All you need to do is to enable \"responsive\" plugin for your chart instance. You can modify those defaults rules, or make your own list. The plugin allows that. (see further down this file for instructions) ## Usage 1. Include the minified version of file of this plugin. I.e.: ``` ``` (this needs to go after all the other amCharts includes) 2. Add the following setting to your chart configuration: ``` AmCharts.makeChart( \"chartdiv\", { ..., \"responsive\": { \"enabled\": true } } ); ``` Or if you are using non-JSON setup: ``` chart.responsive = { \"enabled\": true }; ``` That's it. ## Advanced use ### Rules You can modify (or completely overwrite) the default responsive rules used by the plugin. A plugin works by checking chart area dimensions after each resize. (or after initial build / mobile device orientation change) It then overrides particular settings suitable for these particular dimensions. Override rules are implemented by defining chart rules, or just \"rules\" moving forward. Each rule has two things: 1. Dimension conditions; 2. Overrides. (a set of properties to override for this particular rule) A rule is an object, for example: ``` { \"minWidth\": 200, \"maxWidth\": 400, \"maxHeight\": 400, \"minHeight\": 200, \"overrides\": { \"precision\": 2, \"legend\": { \"enabled\": false }, \"valueAxes\": { \"inside\": true } } } ``` The above rule will be applicable to a chart that is between 200px and 400px in width and height. It is not necessary to add all of the dimensional properties. You just neat at least one. So for example to make the rule apply to all charts with width 400px or lower, you would do something like this: ``` { \"maxWidth\": 400, \"overrides\": { \"precision\": 2, \"legend\": { \"enabled\": false }, \"valueAxes\": { \"inside\": true } } } ``` Please note that there are several other conditional properties besides the ones that deal with chart's dimensions: * \"rotate\" (true|false) - set this property if you want to make this rule applicable to rotated serial chart only (i.e. bar chart) * \"legendPosition\" (\"top|bottom|left|right\") - set this property if you want the rule applied only when the chart legend is set to particular position. Please note that this does not check whether the legend is enabled at all. Now, on to explaining \"overrides\". It's an object, that contains properties that you want to override the chart's initial ones with. It can be either simple properties, like \"fontSize\" or \"precision\", or complext types like object, or array. To override a property of a child object, such as \"legend\", you would simply go with JSON representation of the properties you need to override. I.e.: ``` \"legend\": { \"enabled\": false } ``` This will look for a \"legend\" property in chart object, then change it's \"enabled\" property to false. ### Overriding arrays of objects Some objects in charts are collected in arrays, i.e. \"graphs\", \"valueAxes\", etc. There are some ways to override their properties as well. To override properties for ALL objects in the array, you would provide an override instruction as an object. I.e.: ``` \"graphs\": { \"bullet\": \"round\", \"lineThickness\": 5 } ``` The above will add a round bullet and set line thickness to all of the graphs on the chart. You can also target individual items in the array. There are two ways to do that: a) Use \"id\" property; b) Apply using the same index. To individually apply property overrides, you will need to supply override instructions as an array: ``` \"graphs\": [ { \"id\": \"g1\", \"bullet\": \"round\", \"lineThickness\": 5 } ] ``` The above will apply the same properties for the graph with an id of \"g1\" only. It will not touch the rest of the graphs. Please note that original graph definition in your chart settings needs to have the \"id\" property set so this plugin can target it. Or you can omit the \"id\" and just apply overrides in the same order as you have them defined. I.e.: ``` \"graphs\": [ { \"bullet\": \"round\" }, { \"bullet\": \"square\" } ] ``` The above will apply round bullets to the first defined graph, and square bullets to the second graph. ### Chaining multiple rules The cool pat is that you can daisy-chain the override rules, much like in CSS. The plugin will examine all of the rules if their dimensional conditions match current chart condition and will apply their overrides in the same order they are defined. Consider this rule set: ``` \"responsive\": { \"enabled\": true, \"rules\": [ // at 400px wide, we hide legend { \"maxWidth\": 400, \"overrides\": { \"legend\": { \"enabled\" } } }, // at 300px or less, we move value axis labels inside plot area // the legend is still hidden because the above rule is still applicable { \"maxWidth\": 300, \"overrides\": { \"valueAxes\": { \"inside\": true } } }, // at 200 px we hide value axis labels altogether { \"maxWidth\": 200, \"overrides\": { \"valueAxes\": { \"labelsEnabled\": false } } } ] } ``` In case several rules modify the same property, the last one will always \"win\". ### Combining custom rules with pre-defined ones The plugin will combine your custom rules with pre-defined ones automatically. In case you want to go pure and set only your own responsive rules, you can set property \"addDefaultRules\" to false. I.e.: ``` \"responsive\": { \"enabled\": true, \"addDefaultRules\": false, \"rules\": [ { \"maxWidth\": 400, \"overrides\": { \"legend\": { \"enabled\" } } } ] } ``` When your custom rules are combined with pre-defined ones, yours are appended at the end of the list. This means that your rules will always have the \"last word\". ## Requirements This plugin requires at least 3.13 version of JavaScript Charts, JavaScript Stock Chart or JavaScript Maps. Any older versions will be ignored by this plugin. The charts will function but no responsive rules will be applied to them. ## Demos Run the index.html in the subdirectory /examples. It will allow viewing misc chart types at various resolutions. ## Extending this plugin You're encouraged to modify, extend and make derivative plugins out of this plugin. You can modify files, included in this archive or, better yet, fork this project on GitHub: https://github.com/amcharts/responsive We're curious types. Please let us know (contact@amcharts.com) if you do create something new out of this plugin. ## License This plugin is licensed under Apache License 2.0. This basically means you're free to use or modify this plugin, even make your own versions or completely different products out of it. Please see attached file \"license.txt\" for the complete license or online here: http://www.apache.org/licenses/LICENSE-2.0 ## Contact us * Email:contact@amcharts.com * Web: http://www.amcharts.com/ * Facebook: https://www.facebook.com/amcharts * Twitter: https://twitter.com/amcharts ## Changelog ### 1.0.2 * Fixed a bug where the plugin was causing an error when chart/map container was being hidden ### 1.0.1 * Fixed bug with overrides being overwritten with chart object in some cases * V3.14 compatibility ### 1.0 * Added support for GANTT chart type (available sin JavaScript Charts V3.14) ### 0.9.2 * Fixed a custom rules being applied in the wrong order ### 0.9.1 * Made all examples use minified version of the plugin * Introduced removal of grid lines on micro charts * Tweaked legend hiding dimensions for pie chart ### 0.9 * Initial release",
    "tags": "",
    "url": "/libraries/ammap/plugins/responsive/"
},

  
  
  
  {
    "title": "",
    "text": "/************************************************************** * Name: Kevin Hou * License: MIT **************************************************************/ # Usage ## Include head This library relies on ReactJS and Jquery so you must first include these in your : ```html ``` ## Add grid data This library accepts a JS object of this format: ```javascript // Must be named 'gridData' var gridData = { columns: 5, // Number of columns textColor: \"white\", // Tile text color data: [ // All tile data { title: \"Title\", // Title subtitle: \"Subtitle...\", // Subtitle description: \"Lorem ipsum dolor sit amet...\", image: \"image.png\", // Tile background image link: \"#\", // Link when click size: \"1\", // Number of horizontal blocks this tile will take up category: { label: \"Category\", color: \"#FFFFFF\" } }, ... // Rest of tiles ] }; ``` You can either include a data.js file if you have a lot of data: ```html ``` or you can embed them in the ``` ## Include grid It is important the gridData comes *before* you include the second script tag. ```html ```",
    "tags": "",
    "url": "/libraries/tile-layout-library/"
}

]};
